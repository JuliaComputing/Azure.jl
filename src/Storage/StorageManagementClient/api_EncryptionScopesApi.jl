# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct EncryptionScopesApi <: SwaggerApi
    client::Swagger.Client
end

"""

Returns the properties for the specified encryption scope.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: encryptionScopeName::String (required)
Return: EncryptionScope
"""
function _swaggerinternal_encryptionScopesGet(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "encryptionScopesGet", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "encryptionScopesGet", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "encryptionScopesGet", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "encryptionScopesGet", :minLength, accountName, 3)

    Swagger.validate_param("api_version", "encryptionScopesGet", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "encryptionScopesGet", :minLength, subscriptionId, 1)

    Swagger.validate_param("encryptionScopeName", "encryptionScopesGet", :maxLength, encryptionScopeName, 63)
    Swagger.validate_param("encryptionScopeName", "encryptionScopesGet", :minLength, encryptionScopeName, 3)

    _ctx = Swagger.Ctx(_api.client, "GET", EncryptionScope, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.path, "encryptionScopeName", encryptionScopeName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function encryptionScopesGet(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesGet(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function encryptionScopesGet(_api::EncryptionScopesApi, response_stream::Channel, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesGet(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Lists all the encryption scopes available under the specified storage account.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: EncryptionScopeListResult
"""
function _swaggerinternal_encryptionScopesList(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "encryptionScopesList", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "encryptionScopesList", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "encryptionScopesList", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "encryptionScopesList", :minLength, accountName, 3)

    Swagger.validate_param("api_version", "encryptionScopesList", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "encryptionScopesList", :minLength, subscriptionId, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", EncryptionScopeListResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function encryptionScopesList(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesList(_api, resourceGroupName, accountName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function encryptionScopesList(_api::EncryptionScopesApi, response_stream::Channel, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesList(_api, resourceGroupName, accountName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Update encryption scope properties as specified in the request body. Update fails if the specified encryption scope does not already exist.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: encryptionScopeName::String (required)
Param: encryptionScope::EncryptionScope (required)
Return: EncryptionScope
"""
function _swaggerinternal_encryptionScopesPatch(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "encryptionScopesPatch", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "encryptionScopesPatch", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "encryptionScopesPatch", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "encryptionScopesPatch", :minLength, accountName, 3)

    Swagger.validate_param("api_version", "encryptionScopesPatch", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "encryptionScopesPatch", :minLength, subscriptionId, 1)

    Swagger.validate_param("encryptionScopeName", "encryptionScopesPatch", :maxLength, encryptionScopeName, 63)
    Swagger.validate_param("encryptionScopeName", "encryptionScopesPatch", :minLength, encryptionScopeName, 3)

    _ctx = Swagger.Ctx(_api.client, "PATCH", EncryptionScope, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth"], encryptionScope)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.path, "encryptionScopeName", encryptionScopeName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function encryptionScopesPatch(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesPatch(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName, encryptionScope; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function encryptionScopesPatch(_api::EncryptionScopesApi, response_stream::Channel, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesPatch(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName, encryptionScope; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Synchronously creates or updates an encryption scope under the specified storage account. If an encryption scope is already created and a subsequent request is issued with different properties, the encryption scope properties will be updated per the specified request.
Param: resourceGroupName::String (required)
Param: accountName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: encryptionScopeName::String (required)
Param: encryptionScope::EncryptionScope (required)
Return: EncryptionScope
"""
function _swaggerinternal_encryptionScopesPut(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "encryptionScopesPut", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "encryptionScopesPut", :minLength, resourceGroupName, 1)

    Swagger.validate_param("accountName", "encryptionScopesPut", :maxLength, accountName, 24)
    Swagger.validate_param("accountName", "encryptionScopesPut", :minLength, accountName, 3)

    Swagger.validate_param("api_version", "encryptionScopesPut", :minLength, api_version, 1)

    Swagger.validate_param("subscriptionId", "encryptionScopesPut", :minLength, subscriptionId, 1)

    Swagger.validate_param("encryptionScopeName", "encryptionScopesPut", :maxLength, encryptionScopeName, 63)
    Swagger.validate_param("encryptionScopeName", "encryptionScopesPut", :minLength, encryptionScopeName, 3)

    _ctx = Swagger.Ctx(_api.client, "PUT", EncryptionScope, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth"], encryptionScope)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "accountName", accountName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.path, "encryptionScopeName", encryptionScopeName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function encryptionScopesPut(_api::EncryptionScopesApi, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesPut(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName, encryptionScope; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function encryptionScopesPut(_api::EncryptionScopesApi, response_stream::Channel, resourceGroupName::String, accountName::String, api_version::String, subscriptionId::String, encryptionScopeName::String, encryptionScope; _mediaType=nothing)
    _ctx = _swaggerinternal_encryptionScopesPut(_api, resourceGroupName, accountName, api_version, subscriptionId, encryptionScopeName, encryptionScope; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export encryptionScopesGet, encryptionScopesList, encryptionScopesPatch, encryptionScopesPut
