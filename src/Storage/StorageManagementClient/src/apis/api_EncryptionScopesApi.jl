# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct EncryptionScopesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `EncryptionScopesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ EncryptionScopesApi }) = "https://management.azure.com"

const _returntypes_encryption_scopes_get_EncryptionScopesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EncryptionScope,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_encryption_scopes_get(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_get", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_get", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "encryption_scopes_get", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "encryption_scopes_get", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "encryption_scopes_get", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "encryption_scopes_get", :minLength, subscription_id, 1)

    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_get", :maxLength, encryption_scope_name, 63)
    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_get", :minLength, encryption_scope_name, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_encryption_scopes_get_EncryptionScopesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "encryptionScopeName", encryption_scope_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns the properties for the specified encryption scope.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- encryption_scope_name::String (required)

Return: EncryptionScope, OpenAPI.Clients.ApiResponse
"""
function encryption_scopes_get(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_get(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function encryption_scopes_get(_api::EncryptionScopesApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_get(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_encryption_scopes_list_EncryptionScopesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EncryptionScopeListResult,
)

function _oacinternal_encryption_scopes_list(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_list", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_list", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "encryption_scopes_list", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "encryption_scopes_list", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "encryption_scopes_list", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "encryption_scopes_list", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_encryption_scopes_list_EncryptionScopesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the encryption scopes available under the specified storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: EncryptionScopeListResult, OpenAPI.Clients.ApiResponse
"""
function encryption_scopes_list(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_list(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function encryption_scopes_list(_api::EncryptionScopesApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_list(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_encryption_scopes_patch_EncryptionScopesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => EncryptionScope,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_encryption_scopes_patch(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_patch", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_patch", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "encryption_scopes_patch", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "encryption_scopes_patch", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "encryption_scopes_patch", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "encryption_scopes_patch", :minLength, subscription_id, 1)

    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_patch", :maxLength, encryption_scope_name, 63)
    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_patch", :minLength, encryption_scope_name, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_encryption_scopes_patch_EncryptionScopesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth", ], encryption_scope)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "encryptionScopeName", encryption_scope_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update encryption scope properties as specified in the request body. Update fails if the specified encryption scope does not already exist.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- encryption_scope_name::String (required)
- encryption_scope::EncryptionScope (required)

Return: EncryptionScope, OpenAPI.Clients.ApiResponse
"""
function encryption_scopes_patch(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_patch(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name, encryption_scope; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function encryption_scopes_patch(_api::EncryptionScopesApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_patch(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name, encryption_scope; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_encryption_scopes_put_EncryptionScopesApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => EncryptionScope,
    Regex("^" * replace("200", "x"=>".") * "\$") => EncryptionScope,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_encryption_scopes_put(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_put", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "encryption_scopes_put", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "encryption_scopes_put", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "encryption_scopes_put", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "encryption_scopes_put", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "encryption_scopes_put", :minLength, subscription_id, 1)

    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_put", :maxLength, encryption_scope_name, 63)
    OpenAPI.validate_param("encryption_scope_name", "encryption_scopes_put", :minLength, encryption_scope_name, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_encryption_scopes_put_EncryptionScopesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/encryptionScopes/{encryptionScopeName}", ["azure_auth", ], encryption_scope)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "encryptionScopeName", encryption_scope_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Synchronously creates or updates an encryption scope under the specified storage account. If an encryption scope is already created and a subsequent request is issued with different properties, the encryption scope properties will be updated per the specified request.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- encryption_scope_name::String (required)
- encryption_scope::EncryptionScope (required)

Return: EncryptionScope, OpenAPI.Clients.ApiResponse
"""
function encryption_scopes_put(_api::EncryptionScopesApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_put(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name, encryption_scope; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function encryption_scopes_put(_api::EncryptionScopesApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, encryption_scope_name::String, encryption_scope::EncryptionScope; _mediaType=nothing)
    _ctx = _oacinternal_encryption_scopes_put(_api, resource_group_name, account_name, api_version, subscription_id, encryption_scope_name, encryption_scope; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export encryption_scopes_get
export encryption_scopes_list
export encryption_scopes_patch
export encryption_scopes_put
