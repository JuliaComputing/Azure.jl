# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct LocalUsersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `LocalUsersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ LocalUsersApi }) = "https://management.azure.com"

const _returntypes_local_users_create_or_update_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocalUser,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_create_or_update(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String, properties::LocalUser; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_create_or_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_create_or_update", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_create_or_update", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_create_or_update", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_create_or_update", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_create_or_update", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_create_or_update", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_create_or_update", :minLength, subscription_id, 1)

    OpenAPI.validate_param("username", "local_users_create_or_update", :maxLength, username, 64)
    OpenAPI.validate_param("username", "local_users_create_or_update", :minLength, username, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_local_users_create_or_update_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}", ["azure_auth", ], properties)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or update the properties of a local user associated with the storage account. Properties for NFSv3 enablement and extended groups cannot be set with other properties.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- username::String (required)
- properties::LocalUser (required)

Return: LocalUser, OpenAPI.Clients.ApiResponse
"""
function local_users_create_or_update(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String, properties::LocalUser; _mediaType=nothing)
    _ctx = _oacinternal_local_users_create_or_update(_api, resource_group_name, account_name, api_version, subscription_id, username, properties; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_create_or_update(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String, properties::LocalUser; _mediaType=nothing)
    _ctx = _oacinternal_local_users_create_or_update(_api, resource_group_name, account_name, api_version, subscription_id, username, properties; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_local_users_delete_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_delete(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_delete", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_delete", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_delete", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_delete", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_delete", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_delete", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_delete", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_delete", :minLength, subscription_id, 1)

    OpenAPI.validate_param("username", "local_users_delete", :maxLength, username, 64)
    OpenAPI.validate_param("username", "local_users_delete", :minLength, username, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_local_users_delete_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the local user associated with the specified storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- username::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function local_users_delete(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_delete(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_delete(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_delete(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_local_users_get_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocalUser,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_get(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_get", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_get", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_get", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_get", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_get", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_get", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_get", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_get", :minLength, subscription_id, 1)

    OpenAPI.validate_param("username", "local_users_get", :maxLength, username, 64)
    OpenAPI.validate_param("username", "local_users_get", :minLength, username, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_local_users_get_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get the local user of the storage account by username.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- username::String (required)

Return: LocalUser, OpenAPI.Clients.ApiResponse
"""
function local_users_get(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_get(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_get(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_get(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_local_users_list_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocalUsers,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_list(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; maxpagesize=nothing, filter=nothing, include=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_list", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_list", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_list", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_list", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_list", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_list", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_list", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_list", :minLength, subscription_id, 1)

    OpenAPI.validate_param("maxpagesize", "local_users_list", :maximum, maxpagesize, 5000, false)
    OpenAPI.validate_param("maxpagesize", "local_users_list", :minimum, maxpagesize, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_local_users_list_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$maxpagesize", maxpagesize; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$include", include; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List the local users associated with the storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- maxpagesize::Int64
- filter::String
- include::String

Return: LocalUsers, OpenAPI.Clients.ApiResponse
"""
function local_users_list(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; maxpagesize=nothing, filter=nothing, include=nothing, _mediaType=nothing)
    _ctx = _oacinternal_local_users_list(_api, resource_group_name, account_name, api_version, subscription_id; maxpagesize=maxpagesize, filter=filter, include=include, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_list(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; maxpagesize=nothing, filter=nothing, include=nothing, _mediaType=nothing)
    _ctx = _oacinternal_local_users_list(_api, resource_group_name, account_name, api_version, subscription_id; maxpagesize=maxpagesize, filter=filter, include=include, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_local_users_list_keys_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocalUserKeys,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_list_keys(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_list_keys", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_list_keys", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_list_keys", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_list_keys", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_list_keys", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_list_keys", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_list_keys", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_list_keys", :minLength, subscription_id, 1)

    OpenAPI.validate_param("username", "local_users_list_keys", :maxLength, username, 64)
    OpenAPI.validate_param("username", "local_users_list_keys", :minLength, username, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_local_users_list_keys_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/listKeys", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List SSH authorized keys and shared key of the local user.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- username::String (required)

Return: LocalUserKeys, OpenAPI.Clients.ApiResponse
"""
function local_users_list_keys(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_list_keys(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_list_keys(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_list_keys(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_local_users_regenerate_password_LocalUsersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LocalUserRegeneratePasswordResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_local_users_regenerate_password(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "local_users_regenerate_password", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "local_users_regenerate_password", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "local_users_regenerate_password", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    OpenAPI.validate_param("account_name", "local_users_regenerate_password", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "local_users_regenerate_password", :minLength, account_name, 3)
        OpenAPI.validate_param("account_name", "local_users_regenerate_password", :pattern, account_name, r"^[a-z0-9]+$")

    OpenAPI.validate_param("api_version", "local_users_regenerate_password", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "local_users_regenerate_password", :minLength, subscription_id, 1)

    OpenAPI.validate_param("username", "local_users_regenerate_password", :maxLength, username, 64)
    OpenAPI.validate_param("username", "local_users_regenerate_password", :minLength, username, 3)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_local_users_regenerate_password_LocalUsersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/localUsers/{username}/regeneratePassword", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "username", username)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Regenerate the local user SSH password.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- username::String (required)

Return: LocalUserRegeneratePasswordResult, OpenAPI.Clients.ApiResponse
"""
function local_users_regenerate_password(_api::LocalUsersApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_regenerate_password(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function local_users_regenerate_password(_api::LocalUsersApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, username::String; _mediaType=nothing)
    _ctx = _oacinternal_local_users_regenerate_password(_api, resource_group_name, account_name, api_version, subscription_id, username; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export local_users_create_or_update
export local_users_delete
export local_users_get
export local_users_list
export local_users_list_keys
export local_users_regenerate_password
