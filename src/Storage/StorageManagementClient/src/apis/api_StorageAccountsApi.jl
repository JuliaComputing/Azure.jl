# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct StorageAccountsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `StorageAccountsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ StorageAccountsApi }) = "https://management.azure.com"

const _returntypes_storage_accounts_check_name_availability_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CheckNameAvailabilityResult,
)

function _oacinternal_storage_accounts_check_name_availability(_api::StorageAccountsApi, api_version::String, subscription_id::String, account_name::StorageAccountCheckNameAvailabilityParameters; _mediaType=nothing)
    OpenAPI.validate_param("api_version", "storage_accounts_check_name_availability", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_check_name_availability", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_check_name_availability_StorageAccountsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability", ["azure_auth", ], account_name)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Checks that the storage account name is valid and is not already in use.

Params:
- api_version::String (required)
- subscription_id::String (required)
- account_name::StorageAccountCheckNameAvailabilityParameters (required)

Return: CheckNameAvailabilityResult, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_check_name_availability(_api::StorageAccountsApi, api_version::String, subscription_id::String, account_name::StorageAccountCheckNameAvailabilityParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_check_name_availability(_api, api_version, subscription_id, account_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_check_name_availability(_api::StorageAccountsApi, response_stream::Channel, api_version::String, subscription_id::String, account_name::StorageAccountCheckNameAvailabilityParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_check_name_availability(_api, api_version, subscription_id, account_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_create_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccount,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_storage_accounts_create(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountCreateParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_create", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_create", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_create", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_create", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_create", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_create", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_storage_accounts_create_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::StorageAccountCreateParameters (required)

Return: StorageAccount, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_create(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountCreateParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_create(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_create(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountCreateParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_create(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_delete_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_storage_accounts_delete(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_delete", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_delete", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_delete", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_delete", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_delete", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_delete", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_storage_accounts_delete_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a storage account in Microsoft Azure.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_delete(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_delete(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_delete(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_delete(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_failover_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_storage_accounts_failover(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_failover", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_failover", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_failover", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_failover", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_failover", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_failover", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_failover_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/failover", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Failover request can be triggered for a storage account in case of availability issues. The failover occurs from the storage account's primary cluster to secondary cluster for RA-GRS accounts. The secondary cluster will become primary after failover.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_failover(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_failover(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_failover(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_failover(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_get_properties_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccount,
)

function _oacinternal_storage_accounts_get_properties(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_get_properties", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_get_properties", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_get_properties", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_get_properties", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_get_properties", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_get_properties", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_storage_accounts_get_properties_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: StorageAccount, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_get_properties(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_get_properties(_api, resource_group_name, account_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_get_properties(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_get_properties(_api, resource_group_name, account_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_list_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccountListResult,
)

function _oacinternal_storage_accounts_list(_api::StorageAccountsApi, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("api_version", "storage_accounts_list", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_list", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_storage_accounts_list_StorageAccountsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: StorageAccountListResult, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_list(_api::StorageAccountsApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_list(_api::StorageAccountsApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_list_account_s_a_s_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAccountSasResponse,
)

function _oacinternal_storage_accounts_list_account_s_a_s(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::AccountSasParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_account_s_a_s", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_account_s_a_s", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_list_account_s_a_s", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_list_account_s_a_s", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_list_account_s_a_s", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_list_account_s_a_s", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_list_account_s_a_s_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListAccountSas", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""List SAS credentials of a storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::AccountSasParameters (required)

Return: ListAccountSasResponse, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_list_account_s_a_s(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::AccountSasParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_account_s_a_s(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_list_account_s_a_s(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::AccountSasParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_account_s_a_s(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_list_by_resource_group_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccountListResult,
)

function _oacinternal_storage_accounts_list_by_resource_group(_api::StorageAccountsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_by_resource_group", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_by_resource_group", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("api_version", "storage_accounts_list_by_resource_group", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_list_by_resource_group", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_storage_accounts_list_by_resource_group_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: StorageAccountListResult, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_list_by_resource_group(_api::StorageAccountsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_list_by_resource_group(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_list_keys_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccountListKeysResult,
)

function _oacinternal_storage_accounts_list_keys(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_keys", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_keys", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_list_keys", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_list_keys", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_list_keys", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_list_keys", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_list_keys_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists the access keys or Kerberos keys (if active directory enabled) for the specified storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: StorageAccountListKeysResult, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_list_keys(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_keys(_api, resource_group_name, account_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_list_keys(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_keys(_api, resource_group_name, account_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_list_service_s_a_s_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListServiceSasResponse,
)

function _oacinternal_storage_accounts_list_service_s_a_s(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::ServiceSasParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_service_s_a_s", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_list_service_s_a_s", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_list_service_s_a_s", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_list_service_s_a_s", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_list_service_s_a_s", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_list_service_s_a_s", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_list_service_s_a_s_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/ListServiceSas", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""List service SAS credentials of a specific resource.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ServiceSasParameters (required)

Return: ListServiceSasResponse, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_list_service_s_a_s(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::ServiceSasParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_service_s_a_s(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_list_service_s_a_s(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::ServiceSasParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_list_service_s_a_s(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_regenerate_key_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccountListKeysResult,
)

function _oacinternal_storage_accounts_regenerate_key(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, regenerate_key::StorageAccountRegenerateKeyParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_regenerate_key", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_regenerate_key", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_regenerate_key", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_regenerate_key", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_regenerate_key", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_regenerate_key", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_regenerate_key_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey", ["azure_auth", ], regenerate_key)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Regenerates one of the access keys or Kerberos keys for the specified storage account.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- regenerate_key::StorageAccountRegenerateKeyParameters (required)

Return: StorageAccountListKeysResult, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_regenerate_key(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, regenerate_key::StorageAccountRegenerateKeyParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_regenerate_key(_api, resource_group_name, account_name, api_version, subscription_id, regenerate_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_regenerate_key(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, regenerate_key::StorageAccountRegenerateKeyParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_regenerate_key(_api, resource_group_name, account_name, api_version, subscription_id, regenerate_key; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_restore_blob_ranges_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BlobRestoreStatus,
    Regex("^" * replace("202", "x"=>".") * "\$") => BlobRestoreStatus,
)

function _oacinternal_storage_accounts_restore_blob_ranges(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::BlobRestoreParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_restore_blob_ranges", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_restore_blob_ranges", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_restore_blob_ranges", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_restore_blob_ranges", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_restore_blob_ranges", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_restore_blob_ranges", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_restore_blob_ranges_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/restoreBlobRanges", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Restore blobs in the specified blob ranges

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::BlobRestoreParameters (required)

Return: BlobRestoreStatus, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_restore_blob_ranges(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::BlobRestoreParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_restore_blob_ranges(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_restore_blob_ranges(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::BlobRestoreParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_restore_blob_ranges(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_revoke_user_delegation_keys_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_storage_accounts_revoke_user_delegation_keys(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_revoke_user_delegation_keys", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_revoke_user_delegation_keys", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_revoke_user_delegation_keys", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_revoke_user_delegation_keys", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_revoke_user_delegation_keys", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_revoke_user_delegation_keys", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_storage_accounts_revoke_user_delegation_keys_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/revokeUserDelegationKeys", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Revoke user delegation keys.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_revoke_user_delegation_keys(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_revoke_user_delegation_keys(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_revoke_user_delegation_keys(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_revoke_user_delegation_keys(_api, resource_group_name, account_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_storage_accounts_update_StorageAccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => StorageAccount,
)

function _oacinternal_storage_accounts_update(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountUpdateParameters; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "storage_accounts_update", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("account_name", "storage_accounts_update", :maxLength, account_name, 24)
    OpenAPI.validate_param("account_name", "storage_accounts_update", :minLength, account_name, 3)

    OpenAPI.validate_param("api_version", "storage_accounts_update", :minLength, api_version, 1)

    OpenAPI.validate_param("subscription_id", "storage_accounts_update", :minLength, subscription_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_storage_accounts_update_StorageAccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.

Params:
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::StorageAccountUpdateParameters (required)

Return: StorageAccount, OpenAPI.Clients.ApiResponse
"""
function storage_accounts_update(_api::StorageAccountsApi, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountUpdateParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_update(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function storage_accounts_update(_api::StorageAccountsApi, response_stream::Channel, resource_group_name::String, account_name::String, api_version::String, subscription_id::String, parameters::StorageAccountUpdateParameters; _mediaType=nothing)
    _ctx = _oacinternal_storage_accounts_update(_api, resource_group_name, account_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export storage_accounts_check_name_availability
export storage_accounts_create
export storage_accounts_delete
export storage_accounts_failover
export storage_accounts_get_properties
export storage_accounts_list
export storage_accounts_list_account_s_a_s
export storage_accounts_list_by_resource_group
export storage_accounts_list_keys
export storage_accounts_list_service_s_a_s
export storage_accounts_regenerate_key
export storage_accounts_restore_blob_ranges
export storage_accounts_revoke_user_delegation_keys
export storage_accounts_update
