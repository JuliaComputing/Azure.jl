# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CheckNameAvailabilityResult
The CheckNameAvailability operation response.

    CheckNameAvailabilityResult(;
        nameAvailable=nothing,
        reason=nothing,
        message=nothing,
    )

    - nameAvailable::Bool : Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.
    - reason::String : Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
    - message::String : Gets an error message explaining the Reason value in more detail.
"""
Base.@kwdef mutable struct CheckNameAvailabilityResult <: OpenAPI.APIModel
    nameAvailable::Union{Nothing, Bool} = nothing
    reason::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing

    function CheckNameAvailabilityResult(nameAvailable, reason, message, )
        o = new(nameAvailable, reason, message, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type CheckNameAvailabilityResult

const _property_types_CheckNameAvailabilityResult = Dict{Symbol,String}(Symbol("nameAvailable")=>"Bool", Symbol("reason")=>"String", Symbol("message")=>"String", )
OpenAPI.property_type(::Type{ CheckNameAvailabilityResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CheckNameAvailabilityResult[name]))}

function OpenAPI.check_required(o::CheckNameAvailabilityResult)
    true
end

function OpenAPI.validate_properties(o::CheckNameAvailabilityResult)
    OpenAPI.validate_property(CheckNameAvailabilityResult, Symbol("nameAvailable"), o.nameAvailable)
    OpenAPI.validate_property(CheckNameAvailabilityResult, Symbol("reason"), o.reason)
    OpenAPI.validate_property(CheckNameAvailabilityResult, Symbol("message"), o.message)
end

function OpenAPI.validate_property(::Type{ CheckNameAvailabilityResult }, name::Symbol, val)


    if name === Symbol("reason")
        OpenAPI.validate_param(name, "CheckNameAvailabilityResult", :enum, val, ["AccountNameInvalid", "AlreadyExists"])
    end


end
