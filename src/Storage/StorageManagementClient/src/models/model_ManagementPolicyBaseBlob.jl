# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ManagementPolicyBaseBlob
Management policy action for base blob.

    ManagementPolicyBaseBlob(;
        tierToCool=nothing,
        tierToArchive=nothing,
        delete=nothing,
    )

    - tierToCool::DateAfterModification
    - tierToArchive::DateAfterModification
    - delete::DateAfterModification
"""
Base.@kwdef mutable struct ManagementPolicyBaseBlob <: OpenAPI.APIModel
    tierToCool = nothing # spec type: Union{ Nothing, DateAfterModification }
    tierToArchive = nothing # spec type: Union{ Nothing, DateAfterModification }
    delete = nothing # spec type: Union{ Nothing, DateAfterModification }

    function ManagementPolicyBaseBlob(tierToCool, tierToArchive, delete, )
        OpenAPI.validate_property(ManagementPolicyBaseBlob, Symbol("tierToCool"), tierToCool)
        OpenAPI.validate_property(ManagementPolicyBaseBlob, Symbol("tierToArchive"), tierToArchive)
        OpenAPI.validate_property(ManagementPolicyBaseBlob, Symbol("delete"), delete)
        return new(tierToCool, tierToArchive, delete, )
    end
end # type ManagementPolicyBaseBlob

const _property_types_ManagementPolicyBaseBlob = Dict{Symbol,String}(Symbol("tierToCool")=>"DateAfterModification", Symbol("tierToArchive")=>"DateAfterModification", Symbol("delete")=>"DateAfterModification", )
OpenAPI.property_type(::Type{ ManagementPolicyBaseBlob }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyBaseBlob[name]))}

function check_required(o::ManagementPolicyBaseBlob)
    true
end

function OpenAPI.validate_property(::Type{ ManagementPolicyBaseBlob }, name::Symbol, val)
end
