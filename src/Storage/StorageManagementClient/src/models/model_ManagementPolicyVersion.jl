# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ManagementPolicyVersion
Management policy action for blob version.

    ManagementPolicyVersion(;
        tierToCool=nothing,
        tierToArchive=nothing,
        tierToCold=nothing,
        tierToHot=nothing,
        delete=nothing,
    )

    - tierToCool::DateAfterCreation
    - tierToArchive::DateAfterCreation
    - tierToCold::DateAfterCreation
    - tierToHot::DateAfterCreation
    - delete::DateAfterCreation
"""
Base.@kwdef mutable struct ManagementPolicyVersion <: OpenAPI.APIModel
    tierToCool = nothing # spec type: Union{ Nothing, DateAfterCreation }
    tierToArchive = nothing # spec type: Union{ Nothing, DateAfterCreation }
    tierToCold = nothing # spec type: Union{ Nothing, DateAfterCreation }
    tierToHot = nothing # spec type: Union{ Nothing, DateAfterCreation }
    delete = nothing # spec type: Union{ Nothing, DateAfterCreation }

    function ManagementPolicyVersion(tierToCool, tierToArchive, tierToCold, tierToHot, delete, )
        o = new(tierToCool, tierToArchive, tierToCold, tierToHot, delete, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ManagementPolicyVersion

const _property_types_ManagementPolicyVersion = Dict{Symbol,String}(Symbol("tierToCool")=>"DateAfterCreation", Symbol("tierToArchive")=>"DateAfterCreation", Symbol("tierToCold")=>"DateAfterCreation", Symbol("tierToHot")=>"DateAfterCreation", Symbol("delete")=>"DateAfterCreation", )
OpenAPI.property_type(::Type{ ManagementPolicyVersion }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyVersion[name]))}

function OpenAPI.check_required(o::ManagementPolicyVersion)
    true
end

function OpenAPI.validate_properties(o::ManagementPolicyVersion)
    OpenAPI.validate_property(ManagementPolicyVersion, Symbol("tierToCool"), o.tierToCool)
    OpenAPI.validate_property(ManagementPolicyVersion, Symbol("tierToArchive"), o.tierToArchive)
    OpenAPI.validate_property(ManagementPolicyVersion, Symbol("tierToCold"), o.tierToCold)
    OpenAPI.validate_property(ManagementPolicyVersion, Symbol("tierToHot"), o.tierToHot)
    OpenAPI.validate_property(ManagementPolicyVersion, Symbol("delete"), o.delete)
end

function OpenAPI.validate_property(::Type{ ManagementPolicyVersion }, name::Symbol, val)





end
