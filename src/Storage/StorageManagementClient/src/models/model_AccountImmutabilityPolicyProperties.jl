# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AccountImmutabilityPolicyProperties
This defines account-level immutability policy properties.

    AccountImmutabilityPolicyProperties(;
        immutabilityPeriodSinceCreationInDays=nothing,
        state=nothing,
        allowProtectedAppendWrites=nothing,
    )

    - immutabilityPeriodSinceCreationInDays::Int64 : The immutability period for the blobs in the container since the policy creation, in days.
    - state::String : The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.
    - allowProtectedAppendWrites::Bool : This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.
"""
Base.@kwdef mutable struct AccountImmutabilityPolicyProperties <: OpenAPI.APIModel
    immutabilityPeriodSinceCreationInDays::Union{Nothing, Int64} = nothing
    state::Union{Nothing, String} = nothing
    allowProtectedAppendWrites::Union{Nothing, Bool} = nothing

    function AccountImmutabilityPolicyProperties(immutabilityPeriodSinceCreationInDays, state, allowProtectedAppendWrites, )
        o = new(immutabilityPeriodSinceCreationInDays, state, allowProtectedAppendWrites, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AccountImmutabilityPolicyProperties

const _property_types_AccountImmutabilityPolicyProperties = Dict{Symbol,String}(Symbol("immutabilityPeriodSinceCreationInDays")=>"Int64", Symbol("state")=>"String", Symbol("allowProtectedAppendWrites")=>"Bool", )
OpenAPI.property_type(::Type{ AccountImmutabilityPolicyProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AccountImmutabilityPolicyProperties[name]))}

function OpenAPI.check_required(o::AccountImmutabilityPolicyProperties)
    true
end

function OpenAPI.validate_properties(o::AccountImmutabilityPolicyProperties)
    OpenAPI.validate_property(AccountImmutabilityPolicyProperties, Symbol("immutabilityPeriodSinceCreationInDays"), o.immutabilityPeriodSinceCreationInDays)
    OpenAPI.validate_property(AccountImmutabilityPolicyProperties, Symbol("state"), o.state)
    OpenAPI.validate_property(AccountImmutabilityPolicyProperties, Symbol("allowProtectedAppendWrites"), o.allowProtectedAppendWrites)
end

function OpenAPI.validate_property(::Type{ AccountImmutabilityPolicyProperties }, name::Symbol, val)

    if name === Symbol("immutabilityPeriodSinceCreationInDays")
        OpenAPI.validate_param(name, "AccountImmutabilityPolicyProperties", :format, val, "int32")
    end
    if name === Symbol("immutabilityPeriodSinceCreationInDays")
        OpenAPI.validate_param(name, "AccountImmutabilityPolicyProperties", :maximum, val, 146000, false)
        OpenAPI.validate_param(name, "AccountImmutabilityPolicyProperties", :minimum, val, 1, false)
    end

    if name === Symbol("state")
        OpenAPI.validate_param(name, "AccountImmutabilityPolicyProperties", :enum, val, ["Unlocked", "Locked", "Disabled"])
    end


end
