# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ServiceSasParameters
The parameters to list service SAS credentials of a specific resource.

    ServiceSasParameters(;
        canonicalizedResource=nothing,
        signedResource=nothing,
        signedPermission=nothing,
        signedIp=nothing,
        signedProtocol=nothing,
        signedStart=nothing,
        signedExpiry=nothing,
        signedIdentifier=nothing,
        startPk=nothing,
        endPk=nothing,
        startRk=nothing,
        endRk=nothing,
        keyToSign=nothing,
        rscc=nothing,
        rscd=nothing,
        rsce=nothing,
        rscl=nothing,
        rsct=nothing,
    )

    - canonicalizedResource::String : The canonical path to the signed resource.
    - signedResource::String : The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
    - signedPermission::String : The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
    - signedIp::String : An IP address or a range of IP addresses from which to accept requests.
    - signedProtocol::String : The protocol permitted for a request made with the account SAS.
    - signedStart::ZonedDateTime : The time at which the SAS becomes valid.
    - signedExpiry::ZonedDateTime : The time at which the shared access signature becomes invalid.
    - signedIdentifier::String : A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
    - startPk::String : The start of partition key.
    - endPk::String : The end of partition key.
    - startRk::String : The start of row key.
    - endRk::String : The end of row key.
    - keyToSign::String : The key to sign the account SAS token with.
    - rscc::String : The response header override for cache control.
    - rscd::String : The response header override for content disposition.
    - rsce::String : The response header override for content encoding.
    - rscl::String : The response header override for content language.
    - rsct::String : The response header override for content type.
"""
Base.@kwdef mutable struct ServiceSasParameters <: OpenAPI.APIModel
    canonicalizedResource::Union{Nothing, String} = nothing
    signedResource::Union{Nothing, String} = nothing
    signedPermission::Union{Nothing, String} = nothing
    signedIp::Union{Nothing, String} = nothing
    signedProtocol::Union{Nothing, String} = nothing
    signedStart::Union{Nothing, ZonedDateTime} = nothing
    signedExpiry::Union{Nothing, ZonedDateTime} = nothing
    signedIdentifier::Union{Nothing, String} = nothing
    startPk::Union{Nothing, String} = nothing
    endPk::Union{Nothing, String} = nothing
    startRk::Union{Nothing, String} = nothing
    endRk::Union{Nothing, String} = nothing
    keyToSign::Union{Nothing, String} = nothing
    rscc::Union{Nothing, String} = nothing
    rscd::Union{Nothing, String} = nothing
    rsce::Union{Nothing, String} = nothing
    rscl::Union{Nothing, String} = nothing
    rsct::Union{Nothing, String} = nothing

    function ServiceSasParameters(canonicalizedResource, signedResource, signedPermission, signedIp, signedProtocol, signedStart, signedExpiry, signedIdentifier, startPk, endPk, startRk, endRk, keyToSign, rscc, rscd, rsce, rscl, rsct, )
        o = new(canonicalizedResource, signedResource, signedPermission, signedIp, signedProtocol, signedStart, signedExpiry, signedIdentifier, startPk, endPk, startRk, endRk, keyToSign, rscc, rscd, rsce, rscl, rsct, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ServiceSasParameters

const _property_types_ServiceSasParameters = Dict{Symbol,String}(Symbol("canonicalizedResource")=>"String", Symbol("signedResource")=>"String", Symbol("signedPermission")=>"String", Symbol("signedIp")=>"String", Symbol("signedProtocol")=>"String", Symbol("signedStart")=>"ZonedDateTime", Symbol("signedExpiry")=>"ZonedDateTime", Symbol("signedIdentifier")=>"String", Symbol("startPk")=>"String", Symbol("endPk")=>"String", Symbol("startRk")=>"String", Symbol("endRk")=>"String", Symbol("keyToSign")=>"String", Symbol("rscc")=>"String", Symbol("rscd")=>"String", Symbol("rsce")=>"String", Symbol("rscl")=>"String", Symbol("rsct")=>"String", )
OpenAPI.property_type(::Type{ ServiceSasParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ServiceSasParameters[name]))}

function OpenAPI.check_required(o::ServiceSasParameters)
    o.canonicalizedResource === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ServiceSasParameters)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("canonicalizedResource"), o.canonicalizedResource)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedResource"), o.signedResource)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedPermission"), o.signedPermission)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedIp"), o.signedIp)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedProtocol"), o.signedProtocol)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedStart"), o.signedStart)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedExpiry"), o.signedExpiry)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("signedIdentifier"), o.signedIdentifier)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("startPk"), o.startPk)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("endPk"), o.endPk)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("startRk"), o.startRk)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("endRk"), o.endRk)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("keyToSign"), o.keyToSign)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("rscc"), o.rscc)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("rscd"), o.rscd)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("rsce"), o.rsce)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("rscl"), o.rscl)
    OpenAPI.validate_property(ServiceSasParameters, Symbol("rsct"), o.rsct)
end

function OpenAPI.validate_property(::Type{ ServiceSasParameters }, name::Symbol, val)


    if name === Symbol("signedResource")
        OpenAPI.validate_param(name, "ServiceSasParameters", :enum, val, ["b", "c", "f", "s"])
    end


    if name === Symbol("signedPermission")
        OpenAPI.validate_param(name, "ServiceSasParameters", :enum, val, ["r", "d", "w", "l", "a", "c", "u", "p"])
    end



    if name === Symbol("signedProtocol")
        OpenAPI.validate_param(name, "ServiceSasParameters", :enum, val, ["https,http", "https"])
    end


    if name === Symbol("signedStart")
        OpenAPI.validate_param(name, "ServiceSasParameters", :format, val, "date-time")
    end

    if name === Symbol("signedExpiry")
        OpenAPI.validate_param(name, "ServiceSasParameters", :format, val, "date-time")
    end

    if name === Symbol("signedIdentifier")
        OpenAPI.validate_param(name, "ServiceSasParameters", :maxLength, val, 64)
    end










end
