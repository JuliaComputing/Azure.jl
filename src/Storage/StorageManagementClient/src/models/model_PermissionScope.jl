# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PermissionScope

    PermissionScope(;
        permissions=nothing,
        service=nothing,
        resourceName=nothing,
    )

    - permissions::String : The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), Create (c), Modify Ownership (o), and Modify Permissions (p).
    - service::String : The service used by the local user, e.g. blob, file.
    - resourceName::String : The name of resource, normally the container name or the file share name, used by the local user.
"""
Base.@kwdef mutable struct PermissionScope <: OpenAPI.APIModel
    permissions::Union{Nothing, String} = nothing
    service::Union{Nothing, String} = nothing
    resourceName::Union{Nothing, String} = nothing

    function PermissionScope(permissions, service, resourceName, )
        o = new(permissions, service, resourceName, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PermissionScope

const _property_types_PermissionScope = Dict{Symbol,String}(Symbol("permissions")=>"String", Symbol("service")=>"String", Symbol("resourceName")=>"String", )
OpenAPI.property_type(::Type{ PermissionScope }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PermissionScope[name]))}

function OpenAPI.check_required(o::PermissionScope)
    o.permissions === nothing && (return false)
    o.service === nothing && (return false)
    o.resourceName === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::PermissionScope)
    OpenAPI.validate_property(PermissionScope, Symbol("permissions"), o.permissions)
    OpenAPI.validate_property(PermissionScope, Symbol("service"), o.service)
    OpenAPI.validate_property(PermissionScope, Symbol("resourceName"), o.resourceName)
end

function OpenAPI.validate_property(::Type{ PermissionScope }, name::Symbol, val)



end
