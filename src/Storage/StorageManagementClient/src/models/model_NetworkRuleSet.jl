# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NetworkRuleSet
Network rule set

    NetworkRuleSet(;
        bypass=AzureServices,
        virtualNetworkRules=nothing,
        ipRules=nothing,
        defaultAction=Allow,
    )

    - bypass::String : Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \&quot;Logging, Metrics\&quot;), or None to bypass none of those traffics.
    - virtualNetworkRules::Vector{VirtualNetworkRule} : Sets the virtual network rules
    - ipRules::Vector{IPRule} : Sets the IP ACL rules
    - defaultAction::String : Specifies the default action of allow or deny when no other rules match.
"""
Base.@kwdef mutable struct NetworkRuleSet <: OpenAPI.APIModel
    bypass::Union{Nothing, String} = AzureServices
    virtualNetworkRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkRule} }
    ipRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IPRule} }
    defaultAction::Union{Nothing, String} = Allow

    function NetworkRuleSet(bypass, virtualNetworkRules, ipRules, defaultAction, )
        OpenAPI.validate_property(NetworkRuleSet, Symbol("bypass"), bypass)
        OpenAPI.validate_property(NetworkRuleSet, Symbol("virtualNetworkRules"), virtualNetworkRules)
        OpenAPI.validate_property(NetworkRuleSet, Symbol("ipRules"), ipRules)
        OpenAPI.validate_property(NetworkRuleSet, Symbol("defaultAction"), defaultAction)
        return new(bypass, virtualNetworkRules, ipRules, defaultAction, )
    end
end # type NetworkRuleSet

const _property_types_NetworkRuleSet = Dict{Symbol,String}(Symbol("bypass")=>"String", Symbol("virtualNetworkRules")=>"Vector{VirtualNetworkRule}", Symbol("ipRules")=>"Vector{IPRule}", Symbol("defaultAction")=>"String", )
OpenAPI.property_type(::Type{ NetworkRuleSet }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkRuleSet[name]))}

function check_required(o::NetworkRuleSet)
    o.defaultAction === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ NetworkRuleSet }, name::Symbol, val)
    if name === Symbol("bypass")
        OpenAPI.validate_param(name, "NetworkRuleSet", :enum, val, ["None", "Logging", "Metrics", "AzureServices"])
    end
    if name === Symbol("defaultAction")
        OpenAPI.validate_param(name, "NetworkRuleSet", :enum, val, ["Allow", "Deny"])
    end
end
