# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MetricSpecification
Metric specification of operation.

    MetricSpecification(;
        name=nothing,
        displayName=nothing,
        displayDescription=nothing,
        unit=nothing,
        dimensions=nothing,
        aggregationType=nothing,
        fillGapWithZero=nothing,
        category=nothing,
        resourceIdDimensionNameOverride=nothing,
    )

    - name::String : Name of metric specification.
    - displayName::String : Display name of metric specification.
    - displayDescription::String : Display description of metric specification.
    - unit::String : Unit could be Bytes or Count.
    - dimensions::Vector{Dimension} : Dimensions of blobs, including blob type and access tier.
    - aggregationType::String : Aggregation type could be Average.
    - fillGapWithZero::Bool : The property to decide fill gap with zero or not.
    - category::String : The category this metric specification belong to, could be Capacity.
    - resourceIdDimensionNameOverride::String : Account Resource Id.
"""
Base.@kwdef mutable struct MetricSpecification <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    displayName::Union{Nothing, String} = nothing
    displayDescription::Union{Nothing, String} = nothing
    unit::Union{Nothing, String} = nothing
    dimensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Dimension} }
    aggregationType::Union{Nothing, String} = nothing
    fillGapWithZero::Union{Nothing, Bool} = nothing
    category::Union{Nothing, String} = nothing
    resourceIdDimensionNameOverride::Union{Nothing, String} = nothing

    function MetricSpecification(name, displayName, displayDescription, unit, dimensions, aggregationType, fillGapWithZero, category, resourceIdDimensionNameOverride, )
        o = new(name, displayName, displayDescription, unit, dimensions, aggregationType, fillGapWithZero, category, resourceIdDimensionNameOverride, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type MetricSpecification

const _property_types_MetricSpecification = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("displayName")=>"String", Symbol("displayDescription")=>"String", Symbol("unit")=>"String", Symbol("dimensions")=>"Vector{Dimension}", Symbol("aggregationType")=>"String", Symbol("fillGapWithZero")=>"Bool", Symbol("category")=>"String", Symbol("resourceIdDimensionNameOverride")=>"String", )
OpenAPI.property_type(::Type{ MetricSpecification }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MetricSpecification[name]))}

function OpenAPI.check_required(o::MetricSpecification)
    true
end

function OpenAPI.validate_properties(o::MetricSpecification)
    OpenAPI.validate_property(MetricSpecification, Symbol("name"), o.name)
    OpenAPI.validate_property(MetricSpecification, Symbol("displayName"), o.displayName)
    OpenAPI.validate_property(MetricSpecification, Symbol("displayDescription"), o.displayDescription)
    OpenAPI.validate_property(MetricSpecification, Symbol("unit"), o.unit)
    OpenAPI.validate_property(MetricSpecification, Symbol("dimensions"), o.dimensions)
    OpenAPI.validate_property(MetricSpecification, Symbol("aggregationType"), o.aggregationType)
    OpenAPI.validate_property(MetricSpecification, Symbol("fillGapWithZero"), o.fillGapWithZero)
    OpenAPI.validate_property(MetricSpecification, Symbol("category"), o.category)
    OpenAPI.validate_property(MetricSpecification, Symbol("resourceIdDimensionNameOverride"), o.resourceIdDimensionNameOverride)
end

function OpenAPI.validate_property(::Type{ MetricSpecification }, name::Symbol, val)









end
