# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LocalUserProperties
The Storage Account Local User properties.

    LocalUserProperties(;
        permissionScopes=nothing,
        homeDirectory=nothing,
        sshAuthorizedKeys=nothing,
        sid=nothing,
        hasSharedKey=nothing,
        hasSshKey=nothing,
        hasSshPassword=nothing,
        userId=nothing,
        groupId=nothing,
        allowAclAuthorization=nothing,
        extendedGroups=nothing,
        isNFSv3Enabled=nothing,
    )

    - permissionScopes::Vector{PermissionScope} : The permission scopes of the local user.
    - homeDirectory::String : Optional, local user home directory.
    - sshAuthorizedKeys::Vector{SshPublicKey} : Optional, local user ssh authorized keys for SFTP.
    - sid::String : A unique Security Identifier that is generated by the server.
    - hasSharedKey::Bool : Indicates whether shared key exists. Set it to false to remove existing shared key.
    - hasSshKey::Bool : Indicates whether ssh key exists. Set it to false to remove existing SSH key.
    - hasSshPassword::Bool : Indicates whether ssh password exists. Set it to false to remove existing SSH password.
    - userId::Int64 : A unique Identifier that is generated by the server.
    - groupId::Int64 : An identifier for associating a group of users.
    - allowAclAuthorization::Bool : Indicates whether ACL authorization is allowed for this user. Set it to false to disallow using ACL authorization.
    - extendedGroups::Vector{Int64} : Supplementary group membership. Only applicable for local users enabled for NFSv3 access.
    - isNFSv3Enabled::Bool : Indicates if the local user is enabled for access with NFSv3 protocol.
"""
Base.@kwdef mutable struct LocalUserProperties <: OpenAPI.APIModel
    permissionScopes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PermissionScope} }
    homeDirectory::Union{Nothing, String} = nothing
    sshAuthorizedKeys::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SshPublicKey} }
    sid::Union{Nothing, String} = nothing
    hasSharedKey::Union{Nothing, Bool} = nothing
    hasSshKey::Union{Nothing, Bool} = nothing
    hasSshPassword::Union{Nothing, Bool} = nothing
    userId::Union{Nothing, Int64} = nothing
    groupId::Union{Nothing, Int64} = nothing
    allowAclAuthorization::Union{Nothing, Bool} = nothing
    extendedGroups::Union{Nothing, Vector{Int64}} = nothing
    isNFSv3Enabled::Union{Nothing, Bool} = nothing

    function LocalUserProperties(permissionScopes, homeDirectory, sshAuthorizedKeys, sid, hasSharedKey, hasSshKey, hasSshPassword, userId, groupId, allowAclAuthorization, extendedGroups, isNFSv3Enabled, )
        o = new(permissionScopes, homeDirectory, sshAuthorizedKeys, sid, hasSharedKey, hasSshKey, hasSshPassword, userId, groupId, allowAclAuthorization, extendedGroups, isNFSv3Enabled, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type LocalUserProperties

const _property_types_LocalUserProperties = Dict{Symbol,String}(Symbol("permissionScopes")=>"Vector{PermissionScope}", Symbol("homeDirectory")=>"String", Symbol("sshAuthorizedKeys")=>"Vector{SshPublicKey}", Symbol("sid")=>"String", Symbol("hasSharedKey")=>"Bool", Symbol("hasSshKey")=>"Bool", Symbol("hasSshPassword")=>"Bool", Symbol("userId")=>"Int64", Symbol("groupId")=>"Int64", Symbol("allowAclAuthorization")=>"Bool", Symbol("extendedGroups")=>"Vector{Int64}", Symbol("isNFSv3Enabled")=>"Bool", )
OpenAPI.property_type(::Type{ LocalUserProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LocalUserProperties[name]))}

function OpenAPI.check_required(o::LocalUserProperties)
    true
end

function OpenAPI.validate_properties(o::LocalUserProperties)
    OpenAPI.validate_property(LocalUserProperties, Symbol("permissionScopes"), o.permissionScopes)
    OpenAPI.validate_property(LocalUserProperties, Symbol("homeDirectory"), o.homeDirectory)
    OpenAPI.validate_property(LocalUserProperties, Symbol("sshAuthorizedKeys"), o.sshAuthorizedKeys)
    OpenAPI.validate_property(LocalUserProperties, Symbol("sid"), o.sid)
    OpenAPI.validate_property(LocalUserProperties, Symbol("hasSharedKey"), o.hasSharedKey)
    OpenAPI.validate_property(LocalUserProperties, Symbol("hasSshKey"), o.hasSshKey)
    OpenAPI.validate_property(LocalUserProperties, Symbol("hasSshPassword"), o.hasSshPassword)
    OpenAPI.validate_property(LocalUserProperties, Symbol("userId"), o.userId)
    OpenAPI.validate_property(LocalUserProperties, Symbol("groupId"), o.groupId)
    OpenAPI.validate_property(LocalUserProperties, Symbol("allowAclAuthorization"), o.allowAclAuthorization)
    OpenAPI.validate_property(LocalUserProperties, Symbol("extendedGroups"), o.extendedGroups)
    OpenAPI.validate_property(LocalUserProperties, Symbol("isNFSv3Enabled"), o.isNFSv3Enabled)
end

function OpenAPI.validate_property(::Type{ LocalUserProperties }, name::Symbol, val)








    if name === Symbol("userId")
        OpenAPI.validate_param(name, "LocalUserProperties", :format, val, "int32")
    end

    if name === Symbol("groupId")
        OpenAPI.validate_param(name, "LocalUserProperties", :format, val, "int32")
    end



end
