# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AccountSasParameters
The parameters to list SAS credentials of a storage account.

    AccountSasParameters(;
        signedServices=nothing,
        signedResourceTypes=nothing,
        signedPermission=nothing,
        signedIp=nothing,
        signedProtocol=nothing,
        signedStart=nothing,
        signedExpiry=nothing,
        keyToSign=nothing,
    )

    - signedServices::String : The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
    - signedResourceTypes::String : The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
    - signedPermission::String : The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
    - signedIp::String : An IP address or a range of IP addresses from which to accept requests.
    - signedProtocol::String : The protocol permitted for a request made with the account SAS.
    - signedStart::ZonedDateTime : The time at which the SAS becomes valid.
    - signedExpiry::ZonedDateTime : The time at which the shared access signature becomes invalid.
    - keyToSign::String : The key to sign the account SAS token with.
"""
Base.@kwdef mutable struct AccountSasParameters <: OpenAPI.APIModel
    signedServices::Union{Nothing, String} = nothing
    signedResourceTypes::Union{Nothing, String} = nothing
    signedPermission::Union{Nothing, String} = nothing
    signedIp::Union{Nothing, String} = nothing
    signedProtocol::Union{Nothing, String} = nothing
    signedStart::Union{Nothing, ZonedDateTime} = nothing
    signedExpiry::Union{Nothing, ZonedDateTime} = nothing
    keyToSign::Union{Nothing, String} = nothing

    function AccountSasParameters(signedServices, signedResourceTypes, signedPermission, signedIp, signedProtocol, signedStart, signedExpiry, keyToSign, )
        o = new(signedServices, signedResourceTypes, signedPermission, signedIp, signedProtocol, signedStart, signedExpiry, keyToSign, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AccountSasParameters

const _property_types_AccountSasParameters = Dict{Symbol,String}(Symbol("signedServices")=>"String", Symbol("signedResourceTypes")=>"String", Symbol("signedPermission")=>"String", Symbol("signedIp")=>"String", Symbol("signedProtocol")=>"String", Symbol("signedStart")=>"ZonedDateTime", Symbol("signedExpiry")=>"ZonedDateTime", Symbol("keyToSign")=>"String", )
OpenAPI.property_type(::Type{ AccountSasParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AccountSasParameters[name]))}

function OpenAPI.check_required(o::AccountSasParameters)
    o.signedServices === nothing && (return false)
    o.signedResourceTypes === nothing && (return false)
    o.signedPermission === nothing && (return false)
    o.signedExpiry === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::AccountSasParameters)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedServices"), o.signedServices)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedResourceTypes"), o.signedResourceTypes)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedPermission"), o.signedPermission)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedIp"), o.signedIp)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedProtocol"), o.signedProtocol)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedStart"), o.signedStart)
    OpenAPI.validate_property(AccountSasParameters, Symbol("signedExpiry"), o.signedExpiry)
    OpenAPI.validate_property(AccountSasParameters, Symbol("keyToSign"), o.keyToSign)
end

function OpenAPI.validate_property(::Type{ AccountSasParameters }, name::Symbol, val)

    if name === Symbol("signedServices")
        OpenAPI.validate_param(name, "AccountSasParameters", :enum, val, ["b", "q", "t", "f"])
    end


    if name === Symbol("signedResourceTypes")
        OpenAPI.validate_param(name, "AccountSasParameters", :enum, val, ["s", "c", "o"])
    end


    if name === Symbol("signedPermission")
        OpenAPI.validate_param(name, "AccountSasParameters", :enum, val, ["r", "d", "w", "l", "a", "c", "u", "p"])
    end



    if name === Symbol("signedProtocol")
        OpenAPI.validate_param(name, "AccountSasParameters", :enum, val, ["https,http", "https"])
    end


    if name === Symbol("signedStart")
        OpenAPI.validate_param(name, "AccountSasParameters", :format, val, "date-time")
    end

    if name === Symbol("signedExpiry")
        OpenAPI.validate_param(name, "AccountSasParameters", :format, val, "date-time")
    end

end
