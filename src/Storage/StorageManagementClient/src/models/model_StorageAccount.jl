# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""StorageAccount
The storage account.

    StorageAccount(;
        sku=nothing,
        kind=nothing,
        identity=nothing,
        properties=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
    )

    - sku::Any
    - kind::String : Gets the Kind.
    - identity::Identity
    - properties::StorageAccountProperties
    - id::String : Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    - name::String : The name of the resource
    - type::String : The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
"""
Base.@kwdef mutable struct StorageAccount <: OpenAPI.APIModel
    sku::Union{Nothing, Any} = nothing
    kind::Union{Nothing, String} = nothing
    identity = nothing # spec type: Union{ Nothing, Identity }
    properties = nothing # spec type: Union{ Nothing, StorageAccountProperties }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function StorageAccount(sku, kind, identity, properties, id, name, type, )
        OpenAPI.validate_property(StorageAccount, Symbol("sku"), sku)
        OpenAPI.validate_property(StorageAccount, Symbol("kind"), kind)
        OpenAPI.validate_property(StorageAccount, Symbol("identity"), identity)
        OpenAPI.validate_property(StorageAccount, Symbol("properties"), properties)
        OpenAPI.validate_property(StorageAccount, Symbol("id"), id)
        OpenAPI.validate_property(StorageAccount, Symbol("name"), name)
        OpenAPI.validate_property(StorageAccount, Symbol("type"), type)
        return new(sku, kind, identity, properties, id, name, type, )
    end
end # type StorageAccount

const _property_types_StorageAccount = Dict{Symbol,String}(Symbol("sku")=>"Any", Symbol("kind")=>"String", Symbol("identity")=>"Identity", Symbol("properties")=>"StorageAccountProperties", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ StorageAccount }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_StorageAccount[name]))}

function check_required(o::StorageAccount)
    true
end

function OpenAPI.validate_property(::Type{ StorageAccount }, name::Symbol, val)
    if name === Symbol("kind")
        OpenAPI.validate_param(name, "StorageAccount", :enum, val, ["Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage"])
    end
end
