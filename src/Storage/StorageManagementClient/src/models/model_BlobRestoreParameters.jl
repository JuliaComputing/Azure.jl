# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BlobRestoreParameters
Blob restore parameters

    BlobRestoreParameters(;
        timeToRestore=nothing,
        blobRanges=nothing,
    )

    - timeToRestore::ZonedDateTime : Restore blob to the specified time.
    - blobRanges::Vector{BlobRestoreRange} : Blob ranges to restore.
"""
Base.@kwdef mutable struct BlobRestoreParameters <: OpenAPI.APIModel
    timeToRestore::Union{Nothing, ZonedDateTime} = nothing
    blobRanges::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{BlobRestoreRange} }

    function BlobRestoreParameters(timeToRestore, blobRanges, )
        OpenAPI.validate_property(BlobRestoreParameters, Symbol("timeToRestore"), timeToRestore)
        OpenAPI.validate_property(BlobRestoreParameters, Symbol("blobRanges"), blobRanges)
        return new(timeToRestore, blobRanges, )
    end
end # type BlobRestoreParameters

const _property_types_BlobRestoreParameters = Dict{Symbol,String}(Symbol("timeToRestore")=>"ZonedDateTime", Symbol("blobRanges")=>"Vector{BlobRestoreRange}", )
OpenAPI.property_type(::Type{ BlobRestoreParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BlobRestoreParameters[name]))}

function check_required(o::BlobRestoreParameters)
    o.timeToRestore === nothing && (return false)
    o.blobRanges === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BlobRestoreParameters }, name::Symbol, val)
    if name === Symbol("timeToRestore")
        OpenAPI.validate_param(name, "BlobRestoreParameters", :format, val, "date-time")
    end
end
