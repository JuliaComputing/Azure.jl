# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ManagementPolicyFilter
Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 

    ManagementPolicyFilter(;
        prefixMatch=nothing,
        blobTypes=nothing,
        blobIndexMatch=nothing,
    )

    - prefixMatch::Vector{String} : An array of strings for prefixes to be match.
    - blobTypes::Vector{String} : An array of predefined enum values. Only blockBlob is supported.
    - blobIndexMatch::Vector{TagFilter} : An array of blob index tag based filters, there can be at most 10 tag filters
"""
Base.@kwdef mutable struct ManagementPolicyFilter <: OpenAPI.APIModel
    prefixMatch::Union{Nothing, Vector{String}} = nothing
    blobTypes::Union{Nothing, Vector{String}} = nothing
    blobIndexMatch::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TagFilter} }

    function ManagementPolicyFilter(prefixMatch, blobTypes, blobIndexMatch, )
        OpenAPI.validate_property(ManagementPolicyFilter, Symbol("prefixMatch"), prefixMatch)
        OpenAPI.validate_property(ManagementPolicyFilter, Symbol("blobTypes"), blobTypes)
        OpenAPI.validate_property(ManagementPolicyFilter, Symbol("blobIndexMatch"), blobIndexMatch)
        return new(prefixMatch, blobTypes, blobIndexMatch, )
    end
end # type ManagementPolicyFilter

const _property_types_ManagementPolicyFilter = Dict{Symbol,String}(Symbol("prefixMatch")=>"Vector{String}", Symbol("blobTypes")=>"Vector{String}", Symbol("blobIndexMatch")=>"Vector{TagFilter}", )
OpenAPI.property_type(::Type{ ManagementPolicyFilter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ManagementPolicyFilter[name]))}

function check_required(o::ManagementPolicyFilter)
    o.blobTypes === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ManagementPolicyFilter }, name::Symbol, val)
end
