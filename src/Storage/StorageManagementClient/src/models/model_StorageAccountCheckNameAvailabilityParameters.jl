# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""StorageAccountCheckNameAvailabilityParameters
The parameters used to check the availability of the storage account name.

    StorageAccountCheckNameAvailabilityParameters(;
        name=nothing,
        type=nothing,
    )

    - name::String : The storage account name.
    - type::String : The type of resource, Microsoft.Storage/storageAccounts
"""
Base.@kwdef mutable struct StorageAccountCheckNameAvailabilityParameters <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function StorageAccountCheckNameAvailabilityParameters(name, type, )
        OpenAPI.validate_property(StorageAccountCheckNameAvailabilityParameters, Symbol("name"), name)
        OpenAPI.validate_property(StorageAccountCheckNameAvailabilityParameters, Symbol("type"), type)
        return new(name, type, )
    end
end # type StorageAccountCheckNameAvailabilityParameters

const _property_types_StorageAccountCheckNameAvailabilityParameters = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ StorageAccountCheckNameAvailabilityParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_StorageAccountCheckNameAvailabilityParameters[name]))}

function check_required(o::StorageAccountCheckNameAvailabilityParameters)
    o.name === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ StorageAccountCheckNameAvailabilityParameters }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "StorageAccountCheckNameAvailabilityParameters", :enum, val, ["Microsoft.Storage/storageAccounts"])
    end
end
