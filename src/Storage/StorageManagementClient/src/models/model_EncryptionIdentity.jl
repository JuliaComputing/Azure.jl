# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionIdentity
Encryption identity for the storage account.

    EncryptionIdentity(;
        userAssignedIdentity=nothing,
        federatedIdentityClientId=nothing,
    )

    - userAssignedIdentity::String : Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
    - federatedIdentityClientId::String : ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.
"""
Base.@kwdef mutable struct EncryptionIdentity <: OpenAPI.APIModel
    userAssignedIdentity::Union{Nothing, String} = nothing
    federatedIdentityClientId::Union{Nothing, String} = nothing

    function EncryptionIdentity(userAssignedIdentity, federatedIdentityClientId, )
        o = new(userAssignedIdentity, federatedIdentityClientId, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type EncryptionIdentity

const _property_types_EncryptionIdentity = Dict{Symbol,String}(Symbol("userAssignedIdentity")=>"String", Symbol("federatedIdentityClientId")=>"String", )
OpenAPI.property_type(::Type{ EncryptionIdentity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionIdentity[name]))}

function OpenAPI.check_required(o::EncryptionIdentity)
    true
end

function OpenAPI.validate_properties(o::EncryptionIdentity)
    OpenAPI.validate_property(EncryptionIdentity, Symbol("userAssignedIdentity"), o.userAssignedIdentity)
    OpenAPI.validate_property(EncryptionIdentity, Symbol("federatedIdentityClientId"), o.federatedIdentityClientId)
end

function OpenAPI.validate_property(::Type{ EncryptionIdentity }, name::Symbol, val)


end
