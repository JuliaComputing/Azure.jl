# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionScopeProperties
Properties of the encryption scope.

    EncryptionScopeProperties(;
        source=nothing,
        state=nothing,
        creationTime=nothing,
        lastModifiedTime=nothing,
        keyVaultProperties=nothing,
    )

    - source::String : The provider for the encryption scope. Possible values (case-insensitive):  Microsoft.Storage, Microsoft.KeyVault.
    - state::String : The state of the encryption scope. Possible values (case-insensitive):  Enabled, Disabled.
    - creationTime::ZonedDateTime : Gets the creation date and time of the encryption scope in UTC.
    - lastModifiedTime::ZonedDateTime : Gets the last modification date and time of the encryption scope in UTC.
    - keyVaultProperties::EncryptionScopeKeyVaultProperties
"""
Base.@kwdef mutable struct EncryptionScopeProperties <: OpenAPI.APIModel
    source::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    creationTime::Union{Nothing, ZonedDateTime} = nothing
    lastModifiedTime::Union{Nothing, ZonedDateTime} = nothing
    keyVaultProperties = nothing # spec type: Union{ Nothing, EncryptionScopeKeyVaultProperties }

    function EncryptionScopeProperties(source, state, creationTime, lastModifiedTime, keyVaultProperties, )
        OpenAPI.validate_property(EncryptionScopeProperties, Symbol("source"), source)
        OpenAPI.validate_property(EncryptionScopeProperties, Symbol("state"), state)
        OpenAPI.validate_property(EncryptionScopeProperties, Symbol("creationTime"), creationTime)
        OpenAPI.validate_property(EncryptionScopeProperties, Symbol("lastModifiedTime"), lastModifiedTime)
        OpenAPI.validate_property(EncryptionScopeProperties, Symbol("keyVaultProperties"), keyVaultProperties)
        return new(source, state, creationTime, lastModifiedTime, keyVaultProperties, )
    end
end # type EncryptionScopeProperties

const _property_types_EncryptionScopeProperties = Dict{Symbol,String}(Symbol("source")=>"String", Symbol("state")=>"String", Symbol("creationTime")=>"ZonedDateTime", Symbol("lastModifiedTime")=>"ZonedDateTime", Symbol("keyVaultProperties")=>"EncryptionScopeKeyVaultProperties", )
OpenAPI.property_type(::Type{ EncryptionScopeProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionScopeProperties[name]))}

function check_required(o::EncryptionScopeProperties)
    true
end

function OpenAPI.validate_property(::Type{ EncryptionScopeProperties }, name::Symbol, val)
    if name === Symbol("source")
        OpenAPI.validate_param(name, "EncryptionScopeProperties", :enum, val, ["Microsoft.Storage", "Microsoft.KeyVault"])
    end
    if name === Symbol("state")
        OpenAPI.validate_param(name, "EncryptionScopeProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("creationTime")
        OpenAPI.validate_param(name, "EncryptionScopeProperties", :format, val, "date-time")
    end
    if name === Symbol("lastModifiedTime")
        OpenAPI.validate_param(name, "EncryptionScopeProperties", :format, val, "date-time")
    end
end
