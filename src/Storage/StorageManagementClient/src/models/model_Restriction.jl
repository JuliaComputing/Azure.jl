# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Restriction
The restriction because of which SKU cannot be used.

    Restriction(;
        type=nothing,
        values=nothing,
        reasonCode=nothing,
    )

    - type::String : The type of restrictions. As of now only possible value for this is location.
    - values::Vector{String} : The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
    - reasonCode::String : The reason for the restriction. As of now this can be \&quot;QuotaId\&quot; or \&quot;NotAvailableForSubscription\&quot;. Quota Id is set when the SKU has requiredQuotas parameter as the subscription does not belong to that quota. The \&quot;NotAvailableForSubscription\&quot; is related to capacity at DC.
"""
Base.@kwdef mutable struct Restriction <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector{String}} = nothing
    reasonCode::Union{Nothing, String} = nothing

    function Restriction(type, values, reasonCode, )
        OpenAPI.validate_property(Restriction, Symbol("type"), type)
        OpenAPI.validate_property(Restriction, Symbol("values"), values)
        OpenAPI.validate_property(Restriction, Symbol("reasonCode"), reasonCode)
        return new(type, values, reasonCode, )
    end
end # type Restriction

const _property_types_Restriction = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("values")=>"Vector{String}", Symbol("reasonCode")=>"String", )
OpenAPI.property_type(::Type{ Restriction }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Restriction[name]))}

function check_required(o::Restriction)
    true
end

function OpenAPI.validate_property(::Type{ Restriction }, name::Symbol, val)
    if name === Symbol("reasonCode")
        OpenAPI.validate_param(name, "Restriction", :enum, val, ["QuotaId", "NotAvailableForSubscription"])
    end
end
