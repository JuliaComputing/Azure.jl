# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SasPolicy
SasPolicy assigned to the storage account.

    SasPolicy(;
        sasExpirationPeriod=nothing,
        expirationAction="Log",
    )

    - sasExpirationPeriod::String : The SAS expiration period, DD.HH:MM:SS.
    - expirationAction::String : The SAS Expiration Action defines the action to be performed when sasPolicy.sasExpirationPeriod is violated. The &#39;Log&#39; action can be used for audit purposes and the &#39;Block&#39; action can be used to block and deny the usage of SAS tokens that do not adhere to the sas policy expiration period.
"""
Base.@kwdef mutable struct SasPolicy <: OpenAPI.APIModel
    sasExpirationPeriod::Union{Nothing, String} = nothing
    expirationAction::Union{Nothing, String} = "Log"

    function SasPolicy(sasExpirationPeriod, expirationAction, )
        o = new(sasExpirationPeriod, expirationAction, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type SasPolicy

const _property_types_SasPolicy = Dict{Symbol,String}(Symbol("sasExpirationPeriod")=>"String", Symbol("expirationAction")=>"String", )
OpenAPI.property_type(::Type{ SasPolicy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SasPolicy[name]))}

function OpenAPI.check_required(o::SasPolicy)
    o.sasExpirationPeriod === nothing && (return false)
    o.expirationAction === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::SasPolicy)
    OpenAPI.validate_property(SasPolicy, Symbol("sasExpirationPeriod"), o.sasExpirationPeriod)
    OpenAPI.validate_property(SasPolicy, Symbol("expirationAction"), o.expirationAction)
end

function OpenAPI.validate_property(::Type{ SasPolicy }, name::Symbol, val)


    if name === Symbol("expirationAction")
        OpenAPI.validate_param(name, "SasPolicy", :enum, val, ["Log", "Block"])
    end

end
