# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionScopeListResult
List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes.

    EncryptionScopeListResult(;
        value=nothing,
        nextLink=nothing,
    )

    - value::Vector{EncryptionScope} : List of encryption scopes requested.
    - nextLink::String : Request URL that can be used to query next page of encryption scopes. Returned when total number of requested encryption scopes exceeds the maximum page size.
"""
Base.@kwdef mutable struct EncryptionScopeListResult <: OpenAPI.APIModel
    value::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EncryptionScope} }
    nextLink::Union{Nothing, String} = nothing

    function EncryptionScopeListResult(value, nextLink, )
        OpenAPI.validate_property(EncryptionScopeListResult, Symbol("value"), value)
        OpenAPI.validate_property(EncryptionScopeListResult, Symbol("nextLink"), nextLink)
        return new(value, nextLink, )
    end
end # type EncryptionScopeListResult

const _property_types_EncryptionScopeListResult = Dict{Symbol,String}(Symbol("value")=>"Vector{EncryptionScope}", Symbol("nextLink")=>"String", )
OpenAPI.property_type(::Type{ EncryptionScopeListResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionScopeListResult[name]))}

function check_required(o::EncryptionScopeListResult)
    true
end

function OpenAPI.validate_property(::Type{ EncryptionScopeListResult }, name::Symbol, val)
end
