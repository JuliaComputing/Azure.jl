# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionScope
The Encryption Scope resource.

    EncryptionScope(;
        properties=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
    )

    - properties::EncryptionScopeProperties
    - id::String : Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    - name::String : The name of the resource
    - type::String : The type of the resource. E.g. \&quot;Microsoft.Compute/virtualMachines\&quot; or \&quot;Microsoft.Storage/storageAccounts\&quot;
"""
Base.@kwdef mutable struct EncryptionScope <: OpenAPI.APIModel
    properties = nothing # spec type: Union{ Nothing, EncryptionScopeProperties }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function EncryptionScope(properties, id, name, type, )
        o = new(properties, id, name, type, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type EncryptionScope

const _property_types_EncryptionScope = Dict{Symbol,String}(Symbol("properties")=>"EncryptionScopeProperties", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ EncryptionScope }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionScope[name]))}

function OpenAPI.check_required(o::EncryptionScope)
    true
end

function OpenAPI.validate_properties(o::EncryptionScope)
    OpenAPI.validate_property(EncryptionScope, Symbol("properties"), o.properties)
    OpenAPI.validate_property(EncryptionScope, Symbol("id"), o.id)
    OpenAPI.validate_property(EncryptionScope, Symbol("name"), o.name)
    OpenAPI.validate_property(EncryptionScope, Symbol("type"), o.type)
end

function OpenAPI.validate_property(::Type{ EncryptionScope }, name::Symbol, val)




end
