# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Endpoints
The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.

    Endpoints(;
        blob=nothing,
        queue=nothing,
        table=nothing,
        file=nothing,
        web=nothing,
        dfs=nothing,
        microsoftEndpoints=nothing,
        internetEndpoints=nothing,
    )

    - blob::String : Gets the blob endpoint.
    - queue::String : Gets the queue endpoint.
    - table::String : Gets the table endpoint.
    - file::String : Gets the file endpoint.
    - web::String : Gets the web endpoint.
    - dfs::String : Gets the dfs endpoint.
    - microsoftEndpoints::StorageAccountMicrosoftEndpoints
    - internetEndpoints::StorageAccountInternetEndpoints
"""
Base.@kwdef mutable struct Endpoints <: OpenAPI.APIModel
    blob::Union{Nothing, String} = nothing
    queue::Union{Nothing, String} = nothing
    table::Union{Nothing, String} = nothing
    file::Union{Nothing, String} = nothing
    web::Union{Nothing, String} = nothing
    dfs::Union{Nothing, String} = nothing
    microsoftEndpoints = nothing # spec type: Union{ Nothing, StorageAccountMicrosoftEndpoints }
    internetEndpoints = nothing # spec type: Union{ Nothing, StorageAccountInternetEndpoints }

    function Endpoints(blob, queue, table, file, web, dfs, microsoftEndpoints, internetEndpoints, )
        OpenAPI.validate_property(Endpoints, Symbol("blob"), blob)
        OpenAPI.validate_property(Endpoints, Symbol("queue"), queue)
        OpenAPI.validate_property(Endpoints, Symbol("table"), table)
        OpenAPI.validate_property(Endpoints, Symbol("file"), file)
        OpenAPI.validate_property(Endpoints, Symbol("web"), web)
        OpenAPI.validate_property(Endpoints, Symbol("dfs"), dfs)
        OpenAPI.validate_property(Endpoints, Symbol("microsoftEndpoints"), microsoftEndpoints)
        OpenAPI.validate_property(Endpoints, Symbol("internetEndpoints"), internetEndpoints)
        return new(blob, queue, table, file, web, dfs, microsoftEndpoints, internetEndpoints, )
    end
end # type Endpoints

const _property_types_Endpoints = Dict{Symbol,String}(Symbol("blob")=>"String", Symbol("queue")=>"String", Symbol("table")=>"String", Symbol("file")=>"String", Symbol("web")=>"String", Symbol("dfs")=>"String", Symbol("microsoftEndpoints")=>"StorageAccountMicrosoftEndpoints", Symbol("internetEndpoints")=>"StorageAccountInternetEndpoints", )
OpenAPI.property_type(::Type{ Endpoints }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Endpoints[name]))}

function check_required(o::Endpoints)
    true
end

function OpenAPI.validate_property(::Type{ Endpoints }, name::Symbol, val)
end
