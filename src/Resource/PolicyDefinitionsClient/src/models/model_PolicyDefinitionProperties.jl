# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyDefinitionProperties
The policy definition properties.

    PolicyDefinitionProperties(;
        policyType=nothing,
        mode=nothing,
        displayName=nothing,
        description=nothing,
        policyRule=nothing,
        metadata=nothing,
        parameters=nothing,
    )

    - policyType::String : The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
    - mode::String : The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data.
    - displayName::String : The display name of the policy definition.
    - description::String : The policy definition description.
    - policyRule::Any : The policy rule.
    - metadata::Any : The policy definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
    - parameters::Dict{String, ParameterDefinitionsValue} : The parameter definitions for parameters used in the policy. The keys are the parameter names.
"""
Base.@kwdef mutable struct PolicyDefinitionProperties <: OpenAPI.APIModel
    policyType::Union{Nothing, String} = nothing
    mode::Union{Nothing, String} = nothing
    displayName::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    policyRule::Union{Nothing, Any} = nothing
    metadata::Union{Nothing, Any} = nothing
    parameters::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ParameterDefinitionsValue} }

    function PolicyDefinitionProperties(policyType, mode, displayName, description, policyRule, metadata, parameters, )
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("policyType"), policyType)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("mode"), mode)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("displayName"), displayName)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("description"), description)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("policyRule"), policyRule)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("metadata"), metadata)
        OpenAPI.validate_property(PolicyDefinitionProperties, Symbol("parameters"), parameters)
        return new(policyType, mode, displayName, description, policyRule, metadata, parameters, )
    end
end # type PolicyDefinitionProperties

const _property_types_PolicyDefinitionProperties = Dict{Symbol,String}(Symbol("policyType")=>"String", Symbol("mode")=>"String", Symbol("displayName")=>"String", Symbol("description")=>"String", Symbol("policyRule")=>"Any", Symbol("metadata")=>"Any", Symbol("parameters")=>"Dict{String, ParameterDefinitionsValue}", )
OpenAPI.property_type(::Type{ PolicyDefinitionProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyDefinitionProperties[name]))}

function check_required(o::PolicyDefinitionProperties)
    true
end

function OpenAPI.validate_property(::Type{ PolicyDefinitionProperties }, name::Symbol, val)
    if name === Symbol("policyType")
        OpenAPI.validate_param(name, "PolicyDefinitionProperties", :enum, val, ["NotSpecified", "BuiltIn", "Custom", "Static"])
    end
end
