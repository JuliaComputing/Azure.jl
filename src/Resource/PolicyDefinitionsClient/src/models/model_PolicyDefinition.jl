# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyDefinition
The policy definition.

    PolicyDefinition(;
        properties=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
    )

    - properties::PolicyDefinitionProperties
    - id::String : The ID of the policy definition.
    - name::String : The name of the policy definition.
    - type::String : The type of the resource (Microsoft.Authorization/policyDefinitions).
"""
Base.@kwdef mutable struct PolicyDefinition <: OpenAPI.APIModel
    properties = nothing # spec type: Union{ Nothing, PolicyDefinitionProperties }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function PolicyDefinition(properties, id, name, type, )
        OpenAPI.validate_property(PolicyDefinition, Symbol("properties"), properties)
        OpenAPI.validate_property(PolicyDefinition, Symbol("id"), id)
        OpenAPI.validate_property(PolicyDefinition, Symbol("name"), name)
        OpenAPI.validate_property(PolicyDefinition, Symbol("type"), type)
        return new(properties, id, name, type, )
    end
end # type PolicyDefinition

const _property_types_PolicyDefinition = Dict{Symbol,String}(Symbol("properties")=>"PolicyDefinitionProperties", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ PolicyDefinition }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyDefinition[name]))}

function check_required(o::PolicyDefinition)
    true
end

function OpenAPI.validate_property(::Type{ PolicyDefinition }, name::Symbol, val)
end
