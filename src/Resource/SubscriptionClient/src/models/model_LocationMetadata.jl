# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LocationMetadata
Location metadata information

    LocationMetadata(;
        regionType=nothing,
        regionCategory=nothing,
        geographyGroup=nothing,
        longitude=nothing,
        latitude=nothing,
        physicalLocation=nothing,
        pairedRegion=nothing,
    )

    - regionType::String : The type of the region.
    - regionCategory::String : The category of the region.
    - geographyGroup::String : The geography group of the location.
    - longitude::String : The longitude of the location.
    - latitude::String : The latitude of the location.
    - physicalLocation::String : The physical location of the Azure location.
    - pairedRegion::Vector{PairedRegion} : The regions paired to this region.
"""
Base.@kwdef mutable struct LocationMetadata <: OpenAPI.APIModel
    regionType::Union{Nothing, String} = nothing
    regionCategory::Union{Nothing, String} = nothing
    geographyGroup::Union{Nothing, String} = nothing
    longitude::Union{Nothing, String} = nothing
    latitude::Union{Nothing, String} = nothing
    physicalLocation::Union{Nothing, String} = nothing
    pairedRegion::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PairedRegion} }

    function LocationMetadata(regionType, regionCategory, geographyGroup, longitude, latitude, physicalLocation, pairedRegion, )
        OpenAPI.validate_property(LocationMetadata, Symbol("regionType"), regionType)
        OpenAPI.validate_property(LocationMetadata, Symbol("regionCategory"), regionCategory)
        OpenAPI.validate_property(LocationMetadata, Symbol("geographyGroup"), geographyGroup)
        OpenAPI.validate_property(LocationMetadata, Symbol("longitude"), longitude)
        OpenAPI.validate_property(LocationMetadata, Symbol("latitude"), latitude)
        OpenAPI.validate_property(LocationMetadata, Symbol("physicalLocation"), physicalLocation)
        OpenAPI.validate_property(LocationMetadata, Symbol("pairedRegion"), pairedRegion)
        return new(regionType, regionCategory, geographyGroup, longitude, latitude, physicalLocation, pairedRegion, )
    end
end # type LocationMetadata

const _property_types_LocationMetadata = Dict{Symbol,String}(Symbol("regionType")=>"String", Symbol("regionCategory")=>"String", Symbol("geographyGroup")=>"String", Symbol("longitude")=>"String", Symbol("latitude")=>"String", Symbol("physicalLocation")=>"String", Symbol("pairedRegion")=>"Vector{PairedRegion}", )
OpenAPI.property_type(::Type{ LocationMetadata }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LocationMetadata[name]))}

function check_required(o::LocationMetadata)
    true
end

function OpenAPI.validate_property(::Type{ LocationMetadata }, name::Symbol, val)
    if name === Symbol("regionType")
        OpenAPI.validate_param(name, "LocationMetadata", :enum, val, ["Physical", "Logical"])
    end
    if name === Symbol("regionCategory")
        OpenAPI.validate_param(name, "LocationMetadata", :enum, val, ["Recommended", "Other"])
    end
end
