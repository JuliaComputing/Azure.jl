# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PairedRegion
Information regarding paired region.

    PairedRegion(;
        name=nothing,
        id=nothing,
        subscriptionId=nothing,
    )

    - name::String : The name of the paired region.
    - id::String : The fully qualified ID of the location. For example, /subscriptions/8d65815f-a5b6-402f-9298-045155da7d74/locations/westus.
    - subscriptionId::String : The subscription ID.
"""
Base.@kwdef mutable struct PairedRegion <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    subscriptionId::Union{Nothing, String} = nothing

    function PairedRegion(name, id, subscriptionId, )
        o = new(name, id, subscriptionId, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PairedRegion

const _property_types_PairedRegion = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"String", Symbol("subscriptionId")=>"String", )
OpenAPI.property_type(::Type{ PairedRegion }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PairedRegion[name]))}

function OpenAPI.check_required(o::PairedRegion)
    true
end

function OpenAPI.validate_properties(o::PairedRegion)
    OpenAPI.validate_property(PairedRegion, Symbol("name"), o.name)
    OpenAPI.validate_property(PairedRegion, Symbol("id"), o.id)
    OpenAPI.validate_property(PairedRegion, Symbol("subscriptionId"), o.subscriptionId)
end

function OpenAPI.validate_property(::Type{ PairedRegion }, name::Symbol, val)



end
