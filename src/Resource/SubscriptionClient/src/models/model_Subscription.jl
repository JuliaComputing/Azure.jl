# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Subscription
Subscription information.

    Subscription(;
        id=nothing,
        subscriptionId=nothing,
        displayName=nothing,
        tenantId=nothing,
        state=nothing,
        subscriptionPolicies=nothing,
        authorizationSource=nothing,
        managedByTenants=nothing,
        tags=nothing,
    )

    - id::String : The fully qualified ID for the subscription. For example, /subscriptions/8d65815f-a5b6-402f-9298-045155da7d74
    - subscriptionId::String : The subscription ID.
    - displayName::String : The subscription display name.
    - tenantId::String : The subscription tenant ID.
    - state::String : The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
    - subscriptionPolicies::SubscriptionPolicies
    - authorizationSource::String : The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, &#39;Legacy, RoleBased&#39;.
    - managedByTenants::Vector{ManagedByTenant} : An array containing the tenants managing the subscription.
    - tags::Dict{String, String} : The tags attached to the subscription.
"""
Base.@kwdef mutable struct Subscription <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    subscriptionId::Union{Nothing, String} = nothing
    displayName::Union{Nothing, String} = nothing
    tenantId::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    subscriptionPolicies = nothing # spec type: Union{ Nothing, SubscriptionPolicies }
    authorizationSource::Union{Nothing, String} = nothing
    managedByTenants::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ManagedByTenant} }
    tags::Union{Nothing, Dict{String, String}} = nothing

    function Subscription(id, subscriptionId, displayName, tenantId, state, subscriptionPolicies, authorizationSource, managedByTenants, tags, )
        o = new(id, subscriptionId, displayName, tenantId, state, subscriptionPolicies, authorizationSource, managedByTenants, tags, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Subscription

const _property_types_Subscription = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("subscriptionId")=>"String", Symbol("displayName")=>"String", Symbol("tenantId")=>"String", Symbol("state")=>"String", Symbol("subscriptionPolicies")=>"SubscriptionPolicies", Symbol("authorizationSource")=>"String", Symbol("managedByTenants")=>"Vector{ManagedByTenant}", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ Subscription }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Subscription[name]))}

function OpenAPI.check_required(o::Subscription)
    true
end

function OpenAPI.validate_properties(o::Subscription)
    OpenAPI.validate_property(Subscription, Symbol("id"), o.id)
    OpenAPI.validate_property(Subscription, Symbol("subscriptionId"), o.subscriptionId)
    OpenAPI.validate_property(Subscription, Symbol("displayName"), o.displayName)
    OpenAPI.validate_property(Subscription, Symbol("tenantId"), o.tenantId)
    OpenAPI.validate_property(Subscription, Symbol("state"), o.state)
    OpenAPI.validate_property(Subscription, Symbol("subscriptionPolicies"), o.subscriptionPolicies)
    OpenAPI.validate_property(Subscription, Symbol("authorizationSource"), o.authorizationSource)
    OpenAPI.validate_property(Subscription, Symbol("managedByTenants"), o.managedByTenants)
    OpenAPI.validate_property(Subscription, Symbol("tags"), o.tags)
end

function OpenAPI.validate_property(::Type{ Subscription }, name::Symbol, val)





    if name === Symbol("state")
        OpenAPI.validate_param(name, "Subscription", :enum, val, ["Enabled", "Warned", "PastDue", "Disabled", "Deleted"])
    end





end
