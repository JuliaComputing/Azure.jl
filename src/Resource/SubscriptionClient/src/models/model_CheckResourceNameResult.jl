# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CheckResourceNameResult
Resource Name valid if not a reserved word, does not contain a reserved word and does not start with a reserved word

    CheckResourceNameResult(;
        name=nothing,
        type=nothing,
        status=nothing,
    )

    - name::String : Name of Resource
    - type::String : Type of Resource
    - status::String : Is the resource name Allowed or Reserved
"""
Base.@kwdef mutable struct CheckResourceNameResult <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing

    function CheckResourceNameResult(name, type, status, )
        o = new(name, type, status, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type CheckResourceNameResult

const _property_types_CheckResourceNameResult = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String", Symbol("status")=>"String", )
OpenAPI.property_type(::Type{ CheckResourceNameResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CheckResourceNameResult[name]))}

function OpenAPI.check_required(o::CheckResourceNameResult)
    true
end

function OpenAPI.validate_properties(o::CheckResourceNameResult)
    OpenAPI.validate_property(CheckResourceNameResult, Symbol("name"), o.name)
    OpenAPI.validate_property(CheckResourceNameResult, Symbol("type"), o.type)
    OpenAPI.validate_property(CheckResourceNameResult, Symbol("status"), o.status)
end

function OpenAPI.validate_property(::Type{ CheckResourceNameResult }, name::Symbol, val)



    if name === Symbol("status")
        OpenAPI.validate_param(name, "CheckResourceNameResult", :enum, val, ["Allowed", "Reserved"])
    end

end
