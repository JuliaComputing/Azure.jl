# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyDefinitionReference
The policy definition reference.

    PolicyDefinitionReference(;
        policyDefinitionId=nothing,
        definitionVersion=nothing,
        latestDefinitionVersion=nothing,
        effectiveDefinitionVersion=nothing,
        parameters=nothing,
        policyDefinitionReferenceId=nothing,
        groupNames=nothing,
    )

    - policyDefinitionId::String : The ID of the policy definition or policy set definition.
    - definitionVersion::String : The version of the policy definition to use.
    - latestDefinitionVersion::String : The latest version of the policy definition available. This is only present if requested via the $expand query parameter.
    - effectiveDefinitionVersion::String : The effective version of the policy definition in use. This is only present if requested via the $expand query parameter.
    - parameters::Dict{String, ParameterValuesValue} : The parameter values for the policy rule. The keys are the parameter names.
    - policyDefinitionReferenceId::String : A unique id (within the policy set definition) for this policy definition reference.
    - groupNames::Vector{String} : The name of the groups that this policy definition reference belongs to.
"""
Base.@kwdef mutable struct PolicyDefinitionReference <: OpenAPI.APIModel
    policyDefinitionId::Union{Nothing, String} = nothing
    definitionVersion::Union{Nothing, String} = nothing
    latestDefinitionVersion::Union{Nothing, String} = nothing
    effectiveDefinitionVersion::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ParameterValuesValue} }
    policyDefinitionReferenceId::Union{Nothing, String} = nothing
    groupNames::Union{Nothing, Vector{String}} = nothing

    function PolicyDefinitionReference(policyDefinitionId, definitionVersion, latestDefinitionVersion, effectiveDefinitionVersion, parameters, policyDefinitionReferenceId, groupNames, )
        o = new(policyDefinitionId, definitionVersion, latestDefinitionVersion, effectiveDefinitionVersion, parameters, policyDefinitionReferenceId, groupNames, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PolicyDefinitionReference

const _property_types_PolicyDefinitionReference = Dict{Symbol,String}(Symbol("policyDefinitionId")=>"String", Symbol("definitionVersion")=>"String", Symbol("latestDefinitionVersion")=>"String", Symbol("effectiveDefinitionVersion")=>"String", Symbol("parameters")=>"Dict{String, ParameterValuesValue}", Symbol("policyDefinitionReferenceId")=>"String", Symbol("groupNames")=>"Vector{String}", )
OpenAPI.property_type(::Type{ PolicyDefinitionReference }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyDefinitionReference[name]))}

function OpenAPI.check_required(o::PolicyDefinitionReference)
    o.policyDefinitionId === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::PolicyDefinitionReference)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("policyDefinitionId"), o.policyDefinitionId)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("definitionVersion"), o.definitionVersion)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("latestDefinitionVersion"), o.latestDefinitionVersion)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("effectiveDefinitionVersion"), o.effectiveDefinitionVersion)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("parameters"), o.parameters)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("policyDefinitionReferenceId"), o.policyDefinitionReferenceId)
    OpenAPI.validate_property(PolicyDefinitionReference, Symbol("groupNames"), o.groupNames)
end

function OpenAPI.validate_property(::Type{ PolicyDefinitionReference }, name::Symbol, val)







end
