# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ParameterDefinitionsValue
The definition of a parameter that can be provided to the policy.

    ParameterDefinitionsValue(;
        type=nothing,
        allowedValues=nothing,
        defaultValue=nothing,
        metadata=nothing,
    )

    - type::String : The data type of the parameter.
    - allowedValues::Vector{Any} : The allowed values for the parameter.
    - defaultValue::Any : The default value for the parameter if no value is provided.
    - metadata::Dict{String, Any} : General metadata for the parameter.
"""
Base.@kwdef mutable struct ParameterDefinitionsValue <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    allowedValues::Union{Nothing, Vector{Any}} = nothing
    defaultValue::Union{Nothing, Any} = nothing
    metadata::Union{Nothing, Dict{String, Any}} = nothing

    function ParameterDefinitionsValue(type, allowedValues, defaultValue, metadata, )
        OpenAPI.validate_property(ParameterDefinitionsValue, Symbol("type"), type)
        OpenAPI.validate_property(ParameterDefinitionsValue, Symbol("allowedValues"), allowedValues)
        OpenAPI.validate_property(ParameterDefinitionsValue, Symbol("defaultValue"), defaultValue)
        OpenAPI.validate_property(ParameterDefinitionsValue, Symbol("metadata"), metadata)
        return new(type, allowedValues, defaultValue, metadata, )
    end
end # type ParameterDefinitionsValue

const _property_types_ParameterDefinitionsValue = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("allowedValues")=>"Vector{Any}", Symbol("defaultValue")=>"Any", Symbol("metadata")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ ParameterDefinitionsValue }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ParameterDefinitionsValue[name]))}

function check_required(o::ParameterDefinitionsValue)
    true
end

function OpenAPI.validate_property(::Type{ ParameterDefinitionsValue }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ParameterDefinitionsValue", :enum, val, ["String", "Array", "Object", "Boolean", "Integer", "Float", "DateTime"])
    end
end
