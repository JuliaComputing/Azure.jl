# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyDefinitionGroup
The policy definition group.

    PolicyDefinitionGroup(;
        name=nothing,
        displayName=nothing,
        category=nothing,
        description=nothing,
        additionalMetadataId=nothing,
    )

    - name::String : The name of the group.
    - displayName::String : The group&#39;s display name.
    - category::String : The group&#39;s category.
    - description::String : The group&#39;s description.
    - additionalMetadataId::String : A resource ID of a resource that contains additional metadata about the group.
"""
Base.@kwdef mutable struct PolicyDefinitionGroup <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    displayName::Union{Nothing, String} = nothing
    category::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    additionalMetadataId::Union{Nothing, String} = nothing

    function PolicyDefinitionGroup(name, displayName, category, description, additionalMetadataId, )
        OpenAPI.validate_property(PolicyDefinitionGroup, Symbol("name"), name)
        OpenAPI.validate_property(PolicyDefinitionGroup, Symbol("displayName"), displayName)
        OpenAPI.validate_property(PolicyDefinitionGroup, Symbol("category"), category)
        OpenAPI.validate_property(PolicyDefinitionGroup, Symbol("description"), description)
        OpenAPI.validate_property(PolicyDefinitionGroup, Symbol("additionalMetadataId"), additionalMetadataId)
        return new(name, displayName, category, description, additionalMetadataId, )
    end
end # type PolicyDefinitionGroup

const _property_types_PolicyDefinitionGroup = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("displayName")=>"String", Symbol("category")=>"String", Symbol("description")=>"String", Symbol("additionalMetadataId")=>"String", )
OpenAPI.property_type(::Type{ PolicyDefinitionGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyDefinitionGroup[name]))}

function check_required(o::PolicyDefinitionGroup)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PolicyDefinitionGroup }, name::Symbol, val)
end
