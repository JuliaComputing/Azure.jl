# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Selector
The selector expression.

    Selector(;
        kind=nothing,
        in=nothing,
        notIn=nothing,
    )

    - kind::String : The selector kind.
    - in::Vector{String} : The list of values to filter in.
    - notIn::Vector{String} : The list of values to filter out.
"""
Base.@kwdef mutable struct Selector <: OpenAPI.APIModel
    kind::Union{Nothing, String} = nothing
    in::Union{Nothing, Vector{String}} = nothing
    notIn::Union{Nothing, Vector{String}} = nothing

    function Selector(kind, in, notIn, )
        o = new(kind, in, notIn, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Selector

const _property_types_Selector = Dict{Symbol,String}(Symbol("kind")=>"String", Symbol("in")=>"Vector{String}", Symbol("notIn")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Selector }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Selector[name]))}

function OpenAPI.check_required(o::Selector)
    true
end

function OpenAPI.validate_properties(o::Selector)
    OpenAPI.validate_property(Selector, Symbol("kind"), o.kind)
    OpenAPI.validate_property(Selector, Symbol("in"), o.in)
    OpenAPI.validate_property(Selector, Symbol("notIn"), o.notIn)
end

function OpenAPI.validate_property(::Type{ Selector }, name::Symbol, val)

    if name === Symbol("kind")
        OpenAPI.validate_param(name, "Selector", :enum, val, ["resourceLocation", "resourceType", "resourceWithoutLocation", "policyDefinitionReferenceId"])
    end



end
