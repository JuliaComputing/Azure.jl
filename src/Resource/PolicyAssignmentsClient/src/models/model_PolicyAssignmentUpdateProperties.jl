# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyAssignmentUpdateProperties
The policy assignment properties for Patch request.

    PolicyAssignmentUpdateProperties(;
        resourceSelectors=nothing,
        overrides=nothing,
    )

    - resourceSelectors::Vector{ResourceSelector} : The resource selector list to filter policies by resource properties.
    - overrides::Vector{Override} : The policy property value override.
"""
Base.@kwdef mutable struct PolicyAssignmentUpdateProperties <: OpenAPI.APIModel
    resourceSelectors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ResourceSelector} }
    overrides::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Override} }

    function PolicyAssignmentUpdateProperties(resourceSelectors, overrides, )
        o = new(resourceSelectors, overrides, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PolicyAssignmentUpdateProperties

const _property_types_PolicyAssignmentUpdateProperties = Dict{Symbol,String}(Symbol("resourceSelectors")=>"Vector{ResourceSelector}", Symbol("overrides")=>"Vector{Override}", )
OpenAPI.property_type(::Type{ PolicyAssignmentUpdateProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyAssignmentUpdateProperties[name]))}

function OpenAPI.check_required(o::PolicyAssignmentUpdateProperties)
    true
end

function OpenAPI.validate_properties(o::PolicyAssignmentUpdateProperties)
    OpenAPI.validate_property(PolicyAssignmentUpdateProperties, Symbol("resourceSelectors"), o.resourceSelectors)
    OpenAPI.validate_property(PolicyAssignmentUpdateProperties, Symbol("overrides"), o.overrides)
end

function OpenAPI.validate_property(::Type{ PolicyAssignmentUpdateProperties }, name::Symbol, val)


end
