# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Override
The policy property value override.

    Override(;
        kind=nothing,
        value=nothing,
        selectors=nothing,
    )

    - kind::String : The override kind.
    - value::String : The value to override the policy property.
    - selectors::Vector{Selector} : The list of the selector expressions.
"""
Base.@kwdef mutable struct Override <: OpenAPI.APIModel
    kind::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    selectors::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Selector} }

    function Override(kind, value, selectors, )
        o = new(kind, value, selectors, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Override

const _property_types_Override = Dict{Symbol,String}(Symbol("kind")=>"String", Symbol("value")=>"String", Symbol("selectors")=>"Vector{Selector}", )
OpenAPI.property_type(::Type{ Override }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Override[name]))}

function OpenAPI.check_required(o::Override)
    true
end

function OpenAPI.validate_properties(o::Override)
    OpenAPI.validate_property(Override, Symbol("kind"), o.kind)
    OpenAPI.validate_property(Override, Symbol("value"), o.value)
    OpenAPI.validate_property(Override, Symbol("selectors"), o.selectors)
end

function OpenAPI.validate_property(::Type{ Override }, name::Symbol, val)

    if name === Symbol("kind")
        OpenAPI.validate_param(name, "Override", :enum, val, ["policyEffect", "definitionVersion"])
    end



end
