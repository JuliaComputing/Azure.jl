# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NonComplianceMessage
A message that describes why a resource is non-compliant with the policy. This is shown in &#39;deny&#39; error messages and on resource&#39;s non-compliant compliance results.

    NonComplianceMessage(;
        message=nothing,
        policyDefinitionReferenceId=nothing,
    )

    - message::String : A message that describes why a resource is non-compliant with the policy. This is shown in &#39;deny&#39; error messages and on resource&#39;s non-compliant compliance results.
    - policyDefinitionReferenceId::String : The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment.
"""
Base.@kwdef mutable struct NonComplianceMessage <: OpenAPI.APIModel
    message::Union{Nothing, String} = nothing
    policyDefinitionReferenceId::Union{Nothing, String} = nothing

    function NonComplianceMessage(message, policyDefinitionReferenceId, )
        o = new(message, policyDefinitionReferenceId, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type NonComplianceMessage

const _property_types_NonComplianceMessage = Dict{Symbol,String}(Symbol("message")=>"String", Symbol("policyDefinitionReferenceId")=>"String", )
OpenAPI.property_type(::Type{ NonComplianceMessage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NonComplianceMessage[name]))}

function OpenAPI.check_required(o::NonComplianceMessage)
    o.message === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::NonComplianceMessage)
    OpenAPI.validate_property(NonComplianceMessage, Symbol("message"), o.message)
    OpenAPI.validate_property(NonComplianceMessage, Symbol("policyDefinitionReferenceId"), o.policyDefinitionReferenceId)
end

function OpenAPI.validate_property(::Type{ NonComplianceMessage }, name::Symbol, val)


end
