# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PolicyAssignmentProperties
The policy assignment properties.

    PolicyAssignmentProperties(;
        displayName=nothing,
        policyDefinitionId=nothing,
        scope=nothing,
        notScopes=nothing,
        parameters=nothing,
        description=nothing,
        metadata=nothing,
        enforcementMode=nothing,
    )

    - displayName::String : The display name of the policy assignment.
    - policyDefinitionId::String : The ID of the policy definition or policy set definition being assigned.
    - scope::String : The scope for the policy assignment.
    - notScopes::Vector{String} : The policy&#39;s excluded scopes.
    - parameters::Dict{String, ParameterValuesValue} : The parameter values for the policy rule. The keys are the parameter names.
    - description::String : This message will be part of response in case of policy violation.
    - metadata::Any : The policy assignment metadata. Metadata is an open ended object and is typically a collection of key value pairs.
    - enforcementMode::String : The policy assignment enforcement mode. Possible values are Default and DoNotEnforce.
"""
Base.@kwdef mutable struct PolicyAssignmentProperties <: OpenAPI.APIModel
    displayName::Union{Nothing, String} = nothing
    policyDefinitionId::Union{Nothing, String} = nothing
    scope::Union{Nothing, String} = nothing
    notScopes::Union{Nothing, Vector{String}} = nothing
    parameters::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ParameterValuesValue} }
    description::Union{Nothing, String} = nothing
    metadata::Union{Nothing, Any} = nothing
    enforcementMode::Union{Nothing, String} = nothing

    function PolicyAssignmentProperties(displayName, policyDefinitionId, scope, notScopes, parameters, description, metadata, enforcementMode, )
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("displayName"), displayName)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("policyDefinitionId"), policyDefinitionId)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("scope"), scope)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("notScopes"), notScopes)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("parameters"), parameters)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("description"), description)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("metadata"), metadata)
        OpenAPI.validate_property(PolicyAssignmentProperties, Symbol("enforcementMode"), enforcementMode)
        return new(displayName, policyDefinitionId, scope, notScopes, parameters, description, metadata, enforcementMode, )
    end
end # type PolicyAssignmentProperties

const _property_types_PolicyAssignmentProperties = Dict{Symbol,String}(Symbol("displayName")=>"String", Symbol("policyDefinitionId")=>"String", Symbol("scope")=>"String", Symbol("notScopes")=>"Vector{String}", Symbol("parameters")=>"Dict{String, ParameterValuesValue}", Symbol("description")=>"String", Symbol("metadata")=>"Any", Symbol("enforcementMode")=>"String", )
OpenAPI.property_type(::Type{ PolicyAssignmentProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PolicyAssignmentProperties[name]))}

function check_required(o::PolicyAssignmentProperties)
    true
end

function OpenAPI.validate_property(::Type{ PolicyAssignmentProperties }, name::Symbol, val)
    if name === Symbol("enforcementMode")
        OpenAPI.validate_param(name, "PolicyAssignmentProperties", :enum, val, ["Default", "DoNotEnforce"])
    end
end
