# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct ResourceGroupsApi <: SwaggerApi
    client::Swagger.Client
end

"""

Checks whether a resource group exists.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_resourceGroupsCheckExistence(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourceGroupsCheckExistence", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsCheckExistence", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "HEAD", Nothing, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsCheckExistence(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsCheckExistence(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsCheckExistence(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsCheckExistence(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Creates or updates a resource group.
Param: resourceGroupName::String (required)
Param: parameters::ResourceGroup (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: ResourceGroup
"""
function _swaggerinternal_resourceGroupsCreateOrUpdate(_api::ResourceGroupsApi, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourceGroupsCreateOrUpdate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsCreateOrUpdate", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "PUT", ResourceGroup, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsCreateOrUpdate(_api::ResourceGroupsApi, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsCreateOrUpdate(_api, resourceGroupName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsCreateOrUpdate(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsCreateOrUpdate(_api, resourceGroupName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""
Deletes a resource group.
When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_resourceGroupsDelete(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourceGroupsDelete", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsDelete", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsDelete(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsDelete(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsDelete(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsDelete(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Captures the specified resource group as a template.
Param: subscriptionId::String (required)
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: parameters::ExportTemplateRequest (required)
Return: ResourceGroupExportResult
"""
function _swaggerinternal_resourceGroupsExportTemplate(_api::ResourceGroupsApi, subscriptionId::String, resourceGroupName::String, api_version::String, parameters; _mediaType=nothing)
    Swagger.validate_param("subscriptionId", "resourceGroupsExportTemplate", :minLength, subscriptionId, 1)

    Swagger.validate_param("resourceGroupName", "resourceGroupsExportTemplate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsExportTemplate", :minLength, resourceGroupName, 1)

    Swagger.validate_param("api_version", "resourceGroupsExportTemplate", :minLength, api_version, 1)

    _ctx = Swagger.Ctx(_api.client, "POST", ResourceGroupExportResult, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsExportTemplate(_api::ResourceGroupsApi, subscriptionId::String, resourceGroupName::String, api_version::String, parameters; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsExportTemplate(_api, subscriptionId, resourceGroupName, api_version, parameters; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsExportTemplate(_api::ResourceGroupsApi, response_stream::Channel, subscriptionId::String, resourceGroupName::String, api_version::String, parameters; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsExportTemplate(_api, subscriptionId, resourceGroupName, api_version, parameters; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Gets a resource group.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: ResourceGroup
"""
function _swaggerinternal_resourceGroupsGet(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourceGroupsGet", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsGet", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", ResourceGroup, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsGet(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsGet(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsGet(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsGet(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Gets all the resource groups for a subscription.
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: filter::String
Param: top::Int32
Return: ResourceGroupListResult
"""
function _swaggerinternal_resourceGroupsList(_api::ResourceGroupsApi, api_version::String, subscriptionId::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", ResourceGroupListResult, "/subscriptions/{subscriptionId}/resourcegroups", ["azure_auth"])
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsList(_api::ResourceGroupsApi, api_version::String, subscriptionId::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsList(_api, api_version, subscriptionId; filter=filter, top=top, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsList(_api::ResourceGroupsApi, response_stream::Channel, api_version::String, subscriptionId::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsList(_api, api_version, subscriptionId; filter=filter, top=top, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""
Updates a resource group.
Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.
Param: resourceGroupName::String (required)
Param: parameters::ResourceGroupPatchable (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: ResourceGroup
"""
function _swaggerinternal_resourceGroupsUpdate(_api::ResourceGroupsApi, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourceGroupsUpdate", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourceGroupsUpdate", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "PATCH", ResourceGroup, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourceGroupsUpdate(_api::ResourceGroupsApi, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsUpdate(_api, resourceGroupName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourceGroupsUpdate(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_resourceGroupsUpdate(_api, resourceGroupName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Get all the resources for a resource group.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: filter::String
Param: expand::String
Param: top::Int32
Return: ResourceListResult
"""
function _swaggerinternal_resourcesListByResourceGroup(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    Swagger.validate_param("resourceGroupName", "resourcesListByResourceGroup", :maxLength, resourceGroupName, 90)
    Swagger.validate_param("resourceGroupName", "resourcesListByResourceGroup", :minLength, resourceGroupName, 1)

    _ctx = Swagger.Ctx(_api.client, "GET", ResourceListResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "\$filter", filter)  # type String
    Swagger.set_param(_ctx.query, "\$expand", expand)  # type String
    Swagger.set_param(_ctx.query, "\$top", top)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function resourcesListByResourceGroup(_api::ResourceGroupsApi, resourceGroupName::String, api_version::String, subscriptionId::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_resourcesListByResourceGroup(_api, resourceGroupName, api_version, subscriptionId; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function resourcesListByResourceGroup(_api::ResourceGroupsApi, response_stream::Channel, resourceGroupName::String, api_version::String, subscriptionId::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_resourcesListByResourceGroup(_api, resourceGroupName, api_version, subscriptionId; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export resourceGroupsCheckExistence, resourceGroupsCreateOrUpdate, resourceGroupsDelete, resourceGroupsExportTemplate, resourceGroupsGet, resourceGroupsList, resourceGroupsUpdate, resourcesListByResourceGroup
