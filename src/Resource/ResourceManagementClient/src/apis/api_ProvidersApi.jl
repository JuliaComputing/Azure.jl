# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ProvidersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ProvidersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ProvidersApi }) = "https://management.azure.com"

const _returntypes_providers_get_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Provider,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_get(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_providers_get_ProvidersApi, "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified resource provider.

Params:
- resource_provider_namespace::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: Provider, OpenAPI.Clients.ApiResponse
"""
function providers_get(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_get(_api, resource_provider_namespace, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_get(_api::ProvidersApi, response_stream::Channel, resource_provider_namespace::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_get(_api, resource_provider_namespace, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_providers_get_at_tenant_scope_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Provider,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_get_at_tenant_scope(_api::ProvidersApi, resource_provider_namespace::String, api_version::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_providers_get_at_tenant_scope_ProvidersApi, "/providers/{resourceProviderNamespace}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified resource provider at the tenant level.

Params:
- resource_provider_namespace::String (required)
- api_version::String (required)
- expand::String

Return: Provider, OpenAPI.Clients.ApiResponse
"""
function providers_get_at_tenant_scope(_api::ProvidersApi, resource_provider_namespace::String, api_version::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_get_at_tenant_scope(_api, resource_provider_namespace, api_version; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_get_at_tenant_scope(_api::ProvidersApi, response_stream::Channel, resource_provider_namespace::String, api_version::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_get_at_tenant_scope(_api, resource_provider_namespace, api_version; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_providers_list_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ProviderListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_list(_api::ProvidersApi, api_version::String, subscription_id::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_providers_list_ProvidersApi, "/subscriptions/{subscriptionId}/providers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all resource providers for a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)
- top::Int64
- expand::String

Return: ProviderListResult, OpenAPI.Clients.ApiResponse
"""
function providers_list(_api::ProvidersApi, api_version::String, subscription_id::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_list(_api, api_version, subscription_id; top=top, expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_list(_api::ProvidersApi, response_stream::Channel, api_version::String, subscription_id::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_list(_api, api_version, subscription_id; top=top, expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_providers_list_at_tenant_scope_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ProviderListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_list_at_tenant_scope(_api::ProvidersApi, api_version::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_providers_list_at_tenant_scope_ProvidersApi, "/providers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all resource providers for the tenant.

Params:
- api_version::String (required)
- top::Int64
- expand::String

Return: ProviderListResult, OpenAPI.Clients.ApiResponse
"""
function providers_list_at_tenant_scope(_api::ProvidersApi, api_version::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_list_at_tenant_scope(_api, api_version; top=top, expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_list_at_tenant_scope(_api::ProvidersApi, response_stream::Channel, api_version::String; top=nothing, expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_providers_list_at_tenant_scope(_api, api_version; top=top, expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_providers_register_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Provider,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_register(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_providers_register_ProvidersApi, "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/register", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Registers a subscription with a resource provider.

Params:
- resource_provider_namespace::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Provider, OpenAPI.Clients.ApiResponse
"""
function providers_register(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_providers_register(_api, resource_provider_namespace, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_register(_api::ProvidersApi, response_stream::Channel, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_providers_register(_api, resource_provider_namespace, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_providers_unregister_ProvidersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Provider,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_providers_unregister(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_providers_unregister_ProvidersApi, "/subscriptions/{subscriptionId}/providers/{resourceProviderNamespace}/unregister", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Unregisters a subscription from a resource provider.

Params:
- resource_provider_namespace::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Provider, OpenAPI.Clients.ApiResponse
"""
function providers_unregister(_api::ProvidersApi, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_providers_unregister(_api, resource_provider_namespace, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function providers_unregister(_api::ProvidersApi, response_stream::Channel, resource_provider_namespace::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_providers_unregister(_api, resource_provider_namespace, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export providers_get
export providers_get_at_tenant_scope
export providers_list
export providers_list_at_tenant_scope
export providers_register
export providers_unregister
