# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct TagsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `TagsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ TagsApi }) = "https://management.azure.com"

const _returntypes_tags_create_or_update_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagDetails,
    Regex("^" * replace("201", "x"=>".") * "\$") => TagDetails,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_create_or_update(_api::TagsApi, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_tags_create_or_update_TagsApi, "/subscriptions/{subscriptionId}/tagNames/{tagName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "tagName", tag_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Creates a predefined tag name.

This operation allows adding a name to the list of predefined tag names for the given subscription. A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.

Params:
- tag_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: TagDetails, OpenAPI.Clients.ApiResponse
"""
function tags_create_or_update(_api::TagsApi, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update(_api, tag_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_create_or_update(_api::TagsApi, response_stream::Channel, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update(_api, tag_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_create_or_update_at_scope_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagsResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_create_or_update_at_scope(_api::TagsApi, scope::String, api_version::String, parameters::TagsResource; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_tags_create_or_update_at_scope_TagsApi, "/{scope}/providers/Microsoft.Resources/tags/default", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates the entire set of tags on a resource or subscription.

This operation allows adding or replacing the entire set of tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags.

Params:
- scope::String (required)
- api_version::String (required)
- parameters::TagsResource (required)

Return: TagsResource, OpenAPI.Clients.ApiResponse
"""
function tags_create_or_update_at_scope(_api::TagsApi, scope::String, api_version::String, parameters::TagsResource; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update_at_scope(_api, scope, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_create_or_update_at_scope(_api::TagsApi, response_stream::Channel, scope::String, api_version::String, parameters::TagsResource; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update_at_scope(_api, scope, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_create_or_update_value_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagValue,
    Regex("^" * replace("201", "x"=>".") * "\$") => TagValue,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_create_or_update_value(_api::TagsApi, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_tags_create_or_update_value_TagsApi, "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "tagName", tag_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "tagValue", tag_value)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Creates a predefined value for a predefined tag name.

This operation allows adding a value to the list of predefined values for an existing predefined tag name. A tag value can have a maximum of 256 characters.

Params:
- tag_name::String (required)
- tag_value::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: TagValue, OpenAPI.Clients.ApiResponse
"""
function tags_create_or_update_value(_api::TagsApi, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update_value(_api, tag_name, tag_value, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_create_or_update_value(_api::TagsApi, response_stream::Channel, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_create_or_update_value(_api, tag_name, tag_value, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_delete_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_delete(_api::TagsApi, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_tags_delete_TagsApi, "/subscriptions/{subscriptionId}/tagNames/{tagName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "tagName", tag_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a predefined tag name.

This operation allows deleting a name from the list of predefined tag names for the given subscription. The name being deleted must not be in use as a tag name for any resource. All predefined values for the given name must have already been deleted.

Params:
- tag_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function tags_delete(_api::TagsApi, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete(_api, tag_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_delete(_api::TagsApi, response_stream::Channel, tag_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete(_api, tag_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_delete_at_scope_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_delete_at_scope(_api::TagsApi, scope::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_tags_delete_at_scope_TagsApi, "/{scope}/providers/Microsoft.Resources/tags/default", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the entire set of tags on a resource or subscription.

Params:
- scope::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function tags_delete_at_scope(_api::TagsApi, scope::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete_at_scope(_api, scope, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_delete_at_scope(_api::TagsApi, response_stream::Channel, scope::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete_at_scope(_api, scope, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_delete_value_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_delete_value(_api::TagsApi, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_tags_delete_value_TagsApi, "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "tagName", tag_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "tagValue", tag_value)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a predefined tag value for a predefined tag name.

This operation allows deleting a value from the list of predefined values for an existing predefined tag name. The value being deleted must not be in use as a tag value for the given tag name for any resource.

Params:
- tag_name::String (required)
- tag_value::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function tags_delete_value(_api::TagsApi, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete_value(_api, tag_name, tag_value, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_delete_value(_api::TagsApi, response_stream::Channel, tag_name::String, tag_value::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_delete_value(_api, tag_name, tag_value, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_get_at_scope_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagsResource,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_get_at_scope(_api::TagsApi, scope::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tags_get_at_scope_TagsApi, "/{scope}/providers/Microsoft.Resources/tags/default", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the entire set of tags on a resource or subscription.

Params:
- scope::String (required)
- api_version::String (required)

Return: TagsResource, OpenAPI.Clients.ApiResponse
"""
function tags_get_at_scope(_api::TagsApi, scope::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_get_at_scope(_api, scope, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_get_at_scope(_api::TagsApi, response_stream::Channel, scope::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_get_at_scope(_api, scope, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_list_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagsListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_list(_api::TagsApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_tags_list_TagsApi, "/subscriptions/{subscriptionId}/tagNames", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a summary of tag usage under the subscription.

This operation performs a union of predefined tags, resource tags, resource group tags and subscription tags, and returns a summary of usage for each tag name and value under the given subscription. In case of a large number of tags, this operation may return a previously cached result.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: TagsListResult, OpenAPI.Clients.ApiResponse
"""
function tags_list(_api::TagsApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_list(_api::TagsApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_tags_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_tags_update_at_scope_TagsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TagsResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_tags_update_at_scope(_api::TagsApi, scope::String, api_version::String, parameters::TagsPatchResource; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_tags_update_at_scope_TagsApi, "/{scope}/providers/Microsoft.Resources/tags/default", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Selectively updates the set of tags on a resource or subscription.

This operation allows replacing, merging or selectively deleting tags on the specified resource or subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows adding tags with new names and updating the values of tags with existing names. The 'delete' option allows selectively deleting tags based on given names or name/value pairs.

Params:
- scope::String (required)
- api_version::String (required)
- parameters::TagsPatchResource (required)

Return: TagsResource, OpenAPI.Clients.ApiResponse
"""
function tags_update_at_scope(_api::TagsApi, scope::String, api_version::String, parameters::TagsPatchResource; _mediaType=nothing)
    _ctx = _oacinternal_tags_update_at_scope(_api, scope, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function tags_update_at_scope(_api::TagsApi, response_stream::Channel, scope::String, api_version::String, parameters::TagsPatchResource; _mediaType=nothing)
    _ctx = _oacinternal_tags_update_at_scope(_api, scope, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export tags_create_or_update
export tags_create_or_update_at_scope
export tags_create_or_update_value
export tags_delete
export tags_delete_at_scope
export tags_delete_value
export tags_get_at_scope
export tags_list
export tags_update_at_scope
