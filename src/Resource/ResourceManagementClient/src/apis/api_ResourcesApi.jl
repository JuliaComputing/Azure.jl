# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ResourcesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ResourcesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ResourcesApi }) = "https://management.azure.com"

const _returntypes_resources_check_existence_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_check_existence(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_check_existence", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_check_existence", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_resources_check_existence_ResourcesApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "parentResourcePath", parent_resource_path)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceType", resource_type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceName", resource_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether a resource exists.

Params:
- resource_group_name::String (required)
- resource_provider_namespace::String (required)
- parent_resource_path::String (required)
- resource_type::String (required)
- resource_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_check_existence(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_check_existence(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_check_existence(_api::ResourcesApi, response_stream::Channel, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_check_existence(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_check_existence_by_id_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_check_existence_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_resources_check_existence_by_id_ResourcesApi, "/{resourceId}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceId", resource_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks by ID whether a resource exists.

Params:
- resource_id::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_check_existence_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_check_existence_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_check_existence_by_id(_api::ResourcesApi, response_stream::Channel, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_check_existence_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_create_or_update_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("201", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_create_or_update(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_create_or_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_create_or_update", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_resources_create_or_update_ResourcesApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "parentResourcePath", parent_resource_path)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceType", resource_type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceName", resource_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates a resource.

Params:
- resource_group_name::String (required)
- resource_provider_namespace::String (required)
- parent_resource_path::String (required)
- resource_type::String (required)
- resource_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::GenericResource (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_create_or_update(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_create_or_update(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_create_or_update(_api::ResourcesApi, response_stream::Channel, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_create_or_update(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_create_or_update_by_id_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("201", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_create_or_update_by_id(_api::ResourcesApi, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_resources_create_or_update_by_id_ResourcesApi, "/{resourceId}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceId", resource_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a resource by ID.

Params:
- resource_id::String (required)
- api_version::String (required)
- parameters::GenericResource (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_create_or_update_by_id(_api::ResourcesApi, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_create_or_update_by_id(_api, resource_id, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_create_or_update_by_id(_api::ResourcesApi, response_stream::Channel, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_create_or_update_by_id(_api, resource_id, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_delete_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_delete(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_delete", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_delete", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_resources_delete_ResourcesApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "parentResourcePath", parent_resource_path)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceType", resource_type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceName", resource_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a resource.

Params:
- resource_group_name::String (required)
- resource_provider_namespace::String (required)
- parent_resource_path::String (required)
- resource_type::String (required)
- resource_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_delete(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_delete(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_delete(_api::ResourcesApi, response_stream::Channel, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_delete(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_delete_by_id_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_delete_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_resources_delete_by_id_ResourcesApi, "/{resourceId}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceId", resource_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a resource by ID.

Params:
- resource_id::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_delete_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_delete_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_delete_by_id(_api::ResourcesApi, response_stream::Channel, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_delete_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_get_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_get(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_get", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_get", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resources_get_ResourcesApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "parentResourcePath", parent_resource_path)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceType", resource_type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceName", resource_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a resource.

Params:
- resource_group_name::String (required)
- resource_provider_namespace::String (required)
- parent_resource_path::String (required)
- resource_type::String (required)
- resource_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_get(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_get(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_get(_api::ResourcesApi, response_stream::Channel, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_get(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_get_by_id_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_get_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resources_get_by_id_ResourcesApi, "/{resourceId}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceId", resource_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a resource by ID.

Params:
- resource_id::String (required)
- api_version::String (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_get_by_id(_api::ResourcesApi, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_get_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_get_by_id(_api::ResourcesApi, response_stream::Channel, resource_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_resources_get_by_id(_api, resource_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_list_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_list(_api::ResourcesApi, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resources_list_ResourcesApi, "/subscriptions/{subscriptionId}/resources", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the resources in a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- expand::String
- top::Int64

Return: ResourceListResult, OpenAPI.Clients.ApiResponse
"""
function resources_list(_api::ResourcesApi, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resources_list(_api, api_version, subscription_id; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_list(_api::ResourcesApi, response_stream::Channel, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resources_list(_api, api_version, subscription_id; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_move_resources_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_move_resources(_api::ResourcesApi, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    OpenAPI.validate_param("source_resource_group_name", "resources_move_resources", :maxLength, source_resource_group_name, 90)
    OpenAPI.validate_param("source_resource_group_name", "resources_move_resources", :minLength, source_resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_resources_move_resources_ResourcesApi, "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/moveResources", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "sourceResourceGroupName", source_resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Moves resources from one resource group to another resource group.

The resources to move must be in the same source resource group. The target resource group may be in a different subscription. When moving resources, both the source group and the target group are locked for the duration of the operation. Write and delete operations are blocked on the groups until the move completes. 

Params:
- source_resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ResourcesMoveInfo (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_move_resources(_api::ResourcesApi, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    _ctx = _oacinternal_resources_move_resources(_api, source_resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_move_resources(_api::ResourcesApi, response_stream::Channel, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    _ctx = _oacinternal_resources_move_resources(_api, source_resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_update_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_update(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_update", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_resources_update_ResourcesApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceProviderNamespace", resource_provider_namespace)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "parentResourcePath", parent_resource_path)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceType", resource_type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceName", resource_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates a resource.

Params:
- resource_group_name::String (required)
- resource_provider_namespace::String (required)
- parent_resource_path::String (required)
- resource_type::String (required)
- resource_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::GenericResource (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_update(_api::ResourcesApi, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_update(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_update(_api::ResourcesApi, response_stream::Channel, resource_group_name::String, resource_provider_namespace::String, parent_resource_path::String, resource_type::String, resource_name::String, api_version::String, subscription_id::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_update(_api, resource_group_name, resource_provider_namespace, parent_resource_path, resource_type, resource_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_update_by_id_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => GenericResource,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_update_by_id(_api::ResourcesApi, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_resources_update_by_id_ResourcesApi, "/{resourceId}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceId", resource_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates a resource by ID.

Params:
- resource_id::String (required)
- api_version::String (required)
- parameters::GenericResource (required)

Return: GenericResource, OpenAPI.Clients.ApiResponse
"""
function resources_update_by_id(_api::ResourcesApi, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_update_by_id(_api, resource_id, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_update_by_id(_api::ResourcesApi, response_stream::Channel, resource_id::String, api_version::String, parameters::GenericResource; _mediaType=nothing)
    _ctx = _oacinternal_resources_update_by_id(_api, resource_id, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_validate_move_resources_ResourcesApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_validate_move_resources(_api::ResourcesApi, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    OpenAPI.validate_param("source_resource_group_name", "resources_validate_move_resources", :maxLength, source_resource_group_name, 90)
    OpenAPI.validate_param("source_resource_group_name", "resources_validate_move_resources", :minLength, source_resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_resources_validate_move_resources_ResourcesApi, "/subscriptions/{subscriptionId}/resourceGroups/{sourceResourceGroupName}/validateMoveResources", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "sourceResourceGroupName", source_resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether resources can be moved from one resource group to another resource group.

This operation checks whether the specified resources can be moved to the target. The resources to move must be in the same source resource group. The target resource group may be in a different subscription. If validation succeeds, it returns HTTP response code 204 (no content). If validation fails, it returns HTTP response code 409 (Conflict) with an error message. Retrieve the URL in the Location header value to check the result of the long-running operation.

Params:
- source_resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ResourcesMoveInfo (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resources_validate_move_resources(_api::ResourcesApi, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    _ctx = _oacinternal_resources_validate_move_resources(_api, source_resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_validate_move_resources(_api::ResourcesApi, response_stream::Channel, source_resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourcesMoveInfo; _mediaType=nothing)
    _ctx = _oacinternal_resources_validate_move_resources(_api, source_resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export resources_check_existence
export resources_check_existence_by_id
export resources_create_or_update
export resources_create_or_update_by_id
export resources_delete
export resources_delete_by_id
export resources_get
export resources_get_by_id
export resources_list
export resources_move_resources
export resources_update
export resources_update_by_id
export resources_validate_move_resources
