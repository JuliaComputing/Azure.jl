# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ResourceGroupsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ResourceGroupsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ResourceGroupsApi }) = "https://management.azure.com"

const _returntypes_resource_groups_check_existence_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_check_existence(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_check_existence", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_check_existence", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resource_groups_check_existence", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_resource_groups_check_existence_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether a resource group exists.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resource_groups_check_existence(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_check_existence(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_check_existence(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_check_existence(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_create_or_update_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceGroup,
    Regex("^" * replace("201", "x"=>".") * "\$") => ResourceGroup,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_create_or_update(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroup; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_create_or_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_create_or_update", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resource_groups_create_or_update", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_resource_groups_create_or_update_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ResourceGroup (required)

Return: ResourceGroup, OpenAPI.Clients.ApiResponse
"""
function resource_groups_create_or_update(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroup; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_create_or_update(_api, resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_create_or_update(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroup; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_create_or_update(_api, resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_delete_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_delete(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; force_deletion_types=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_delete", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_delete", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resource_groups_delete", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_resource_groups_delete_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "forceDeletionTypes", force_deletion_types; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a resource group.

When you delete a resource group, all of its resources are also deleted. Deleting a resource group deletes all of its template deployments and currently stored operations.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- force_deletion_types::String

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function resource_groups_delete(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; force_deletion_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_delete(_api, resource_group_name, api_version, subscription_id; force_deletion_types=force_deletion_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_delete(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; force_deletion_types=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_delete(_api, resource_group_name, api_version, subscription_id; force_deletion_types=force_deletion_types, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_export_template_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceGroupExportResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_export_template(_api::ResourceGroupsApi, subscription_id::String, resource_group_name::String, api_version::String, parameters::ExportTemplateRequest; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_export_template", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_export_template", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_resource_groups_export_template_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/exportTemplate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Captures the specified resource group as a template.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- api_version::String (required)
- parameters::ExportTemplateRequest (required)

Return: ResourceGroupExportResult, OpenAPI.Clients.ApiResponse
"""
function resource_groups_export_template(_api::ResourceGroupsApi, subscription_id::String, resource_group_name::String, api_version::String, parameters::ExportTemplateRequest; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_export_template(_api, subscription_id, resource_group_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_export_template(_api::ResourceGroupsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, api_version::String, parameters::ExportTemplateRequest; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_export_template(_api, subscription_id, resource_group_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_get_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceGroup,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_get(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_get", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_get", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resource_groups_get", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resource_groups_get_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ResourceGroup, OpenAPI.Clients.ApiResponse
"""
function resource_groups_get(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_get(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_get(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_get(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_list_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceGroupListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_list(_api::ResourceGroupsApi, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resource_groups_list_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the resource groups for a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- top::Int64

Return: ResourceGroupListResult, OpenAPI.Clients.ApiResponse
"""
function resource_groups_list(_api::ResourceGroupsApi, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_list(_api, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_list(_api::ResourceGroupsApi, response_stream::Channel, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_list(_api, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resource_groups_update_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceGroup,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_groups_update(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroupPatchable; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resource_groups_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resource_groups_update", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resource_groups_update", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_resource_groups_update_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates a resource group.

Resource groups can be updated through a simple PATCH operation to a group address. The format of the request is the same as that for creating a resource group. If a field is unspecified, the current value is retained.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ResourceGroupPatchable (required)

Return: ResourceGroup, OpenAPI.Clients.ApiResponse
"""
function resource_groups_update(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroupPatchable; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_update(_api, resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_groups_update(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String, parameters::ResourceGroupPatchable; _mediaType=nothing)
    _ctx = _oacinternal_resource_groups_update(_api, resource_group_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_resources_list_by_resource_group_ResourceGroupsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resources_list_by_resource_group(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "resources_list_by_resource_group", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "resources_list_by_resource_group", :minLength, resource_group_name, 1)
        OpenAPI.validate_param("resource_group_name", "resources_list_by_resource_group", :pattern, resource_group_name, r"^[-\w\._\(\)]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resources_list_by_resource_group_ResourceGroupsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the resources for a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- expand::String
- top::Int64

Return: ResourceListResult, OpenAPI.Clients.ApiResponse
"""
function resources_list_by_resource_group(_api::ResourceGroupsApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resources_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resources_list_by_resource_group(_api::ResourceGroupsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, expand=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_resources_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; filter=filter, expand=expand, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export resource_groups_check_existence
export resource_groups_create_or_update
export resource_groups_delete
export resource_groups_export_template
export resource_groups_get
export resource_groups_list
export resource_groups_update
export resources_list_by_resource_group
