# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DeploymentsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DeploymentsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DeploymentsApi }) = "https://management.azure.com"

const _returntypes_deployments_calculate_template_hash_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TemplateHashResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_calculate_template_hash(_api::DeploymentsApi, api_version::String, template::Any; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_calculate_template_hash_DeploymentsApi, "/providers/Microsoft.Resources/calculateTemplateHash", ["azure_auth", ], template)
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Calculate the hash of the given template.

Params:
- api_version::String (required)
- template::Any (required)

Return: TemplateHashResult, OpenAPI.Clients.ApiResponse
"""
function deployments_calculate_template_hash(_api::DeploymentsApi, api_version::String, template::Any; _mediaType=nothing)
    _ctx = _oacinternal_deployments_calculate_template_hash(_api, api_version, template; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_calculate_template_hash(_api::DeploymentsApi, response_stream::Channel, api_version::String, template::Any; _mediaType=nothing)
    _ctx = _oacinternal_deployments_calculate_template_hash(_api, api_version, template; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_cancel_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_cancel(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_cancel", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_cancel", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_cancel", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_cancel", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_cancel_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a currently running template deployment.

You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resource group partially deployed.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_cancel(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_cancel(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_cancel_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_cancel_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_cancel_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_cancel_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_cancel_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a currently running template deployment.

You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_cancel_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_cancel_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_cancel_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_cancel_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_cancel_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a currently running template deployment.

You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_cancel_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_cancel_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_cancel_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_cancel_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_cancel_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a currently running template deployment.

You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_cancel_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_cancel_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_cancel_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_cancel_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_cancel_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_cancel_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}/cancel", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a currently running template deployment.

You can cancel a deployment only if the provisioningState is Accepted or Running. After the deployment is canceled, the provisioningState is set to Canceled. Canceling a template deployment stops the currently running template deployment and leaves the resources partially deployed.

Params:
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_cancel_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_cancel_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_cancel_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_check_existence_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_check_existence(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_check_existence", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_check_existence", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_check_existence", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_deployments_check_existence_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the deployment exists.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_check_existence(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_check_existence(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_check_existence_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_check_existence_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_check_existence_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_check_existence_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_deployments_check_existence_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the deployment exists.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_check_existence_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_check_existence_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_check_existence_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_check_existence_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_deployments_check_existence_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the deployment exists.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_check_existence_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_check_existence_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_check_existence_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_check_existence_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_deployments_check_existence_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the deployment exists.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_check_existence_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_check_existence_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_check_existence_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("404", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_check_existence_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_check_existence_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "HEAD", _returntypes_deployments_check_existence_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the deployment exists.

Params:
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_check_existence_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_check_existence_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_check_existence_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_create_or_update_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("201", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_create_or_update(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_create_or_update", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_create_or_update", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_create_or_update", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_deployments_create_or_update_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Deploys resources to a resource group.

You can provide the template and parameters directly in the request or link to JSON files.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::Deployment (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_create_or_update(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_create_or_update(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_create_or_update_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("201", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_create_or_update_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_create_or_update_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_create_or_update_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_deployments_create_or_update_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Deploys resources at management group scope.

You can provide the template and parameters directly in the request or link to JSON files.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeployment (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_create_or_update_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_create_or_update_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_create_or_update_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("201", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_create_or_update_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_deployments_create_or_update_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Deploys resources at a given scope.

You can provide the template and parameters directly in the request or link to JSON files.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)
- parameters::Deployment (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_create_or_update_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_scope(_api, scope, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_create_or_update_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_scope(_api, scope, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_create_or_update_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("201", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_create_or_update_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_deployments_create_or_update_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Deploys resources at subscription scope.

You can provide the template and parameters directly in the request or link to JSON files.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::Deployment (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_create_or_update_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_create_or_update_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_create_or_update_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("201", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_create_or_update_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_create_or_update_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_deployments_create_or_update_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Deploys resources at tenant scope.

You can provide the template and parameters directly in the request or link to JSON files.

Params:
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeployment (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_create_or_update_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_create_or_update_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_create_or_update_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_delete_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_delete(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_delete", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_delete", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_delete", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_delete", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deployments_delete_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a deployment from the deployment history.

A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. Deleting a template deployment does not affect the state of the resource group. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_delete(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_delete(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_delete_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_delete_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_delete_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_delete_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_delete_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deployments_delete_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a deployment from the deployment history.

A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_delete_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_delete_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_delete_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_delete_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deployments_delete_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a deployment from the deployment history.

A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_delete_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_delete_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_delete_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_delete_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deployments_delete_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a deployment from the deployment history.

A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_delete_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_delete_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_delete_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_delete_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_delete_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_deployments_delete_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a deployment from the deployment history.

A template deployment that is currently running cannot be deleted. Deleting a template deployment removes the associated deployment operations. This is an asynchronous operation that returns a status of 202 until the template deployment is successfully deleted. The Location response header contains the URI that is used to obtain the status of the process. While the process is running, a call to the URI in the Location header returns a status of 202. When the process finishes, the URI in the Location header returns a status of 204 on success. If the asynchronous request failed, the URI in the Location header returns an error-level status code.

Params:
- deployment_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function deployments_delete_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_delete_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_delete_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_export_template_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExportResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_export_template(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_export_template", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_export_template", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_export_template", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_export_template", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_export_template_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Exports the template used for specified deployment.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: DeploymentExportResult, OpenAPI.Clients.ApiResponse
"""
function deployments_export_template(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_export_template(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_export_template_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExportResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_export_template_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_export_template_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_export_template_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_export_template_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Exports the template used for specified deployment.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExportResult, OpenAPI.Clients.ApiResponse
"""
function deployments_export_template_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_export_template_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_export_template_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExportResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_export_template_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_export_template_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Exports the template used for specified deployment.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExportResult, OpenAPI.Clients.ApiResponse
"""
function deployments_export_template_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_export_template_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_export_template_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExportResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_export_template_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_export_template_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Exports the template used for specified deployment.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: DeploymentExportResult, OpenAPI.Clients.ApiResponse
"""
function deployments_export_template_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_export_template_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_export_template_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExportResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_export_template_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_export_template_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_export_template_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}/exportTemplate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Exports the template used for specified deployment.

Params:
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExportResult, OpenAPI.Clients.ApiResponse
"""
function deployments_export_template_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_export_template_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_export_template_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_get_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_get(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_get", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_get", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_get", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_get", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_get_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a deployment.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_get(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_get(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get(_api, resource_group_name, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_get_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_get_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_get_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_get_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_get_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_get_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a deployment.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_get_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_get_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_management_group_scope(_api, group_id, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_get_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_get_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_get_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a deployment.

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_get_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_get_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_scope(_api, scope, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_get_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_get_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_get_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a deployment.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_get_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_get_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_subscription_scope(_api, deployment_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_get_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentExtended,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_get_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_get_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_get_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a deployment.

Params:
- deployment_name::String (required)
- api_version::String (required)

Return: DeploymentExtended, OpenAPI.Clients.ApiResponse
"""
function deployments_get_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_get_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_deployments_get_at_tenant_scope(_api, deployment_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_list_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_list_at_management_group_scope(_api::DeploymentsApi, group_id::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_list_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_list_at_management_group_scope", :minLength, group_id, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_list_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the deployments for a management group.

Params:
- group_id::String (required)
- api_version::String (required)
- filter::String
- top::Int64

Return: DeploymentListResult, OpenAPI.Clients.ApiResponse
"""
function deployments_list_at_management_group_scope(_api::DeploymentsApi, group_id::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_management_group_scope(_api, group_id, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_list_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_management_group_scope(_api, group_id, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_list_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_list_at_scope(_api::DeploymentsApi, scope::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_list_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the deployments at the given scope.

Params:
- scope::String (required)
- api_version::String (required)
- filter::String
- top::Int64

Return: DeploymentListResult, OpenAPI.Clients.ApiResponse
"""
function deployments_list_at_scope(_api::DeploymentsApi, scope::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_scope(_api, scope, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_list_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_scope(_api, scope, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_list_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_list_at_subscription_scope(_api::DeploymentsApi, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_list_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the deployments for a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- top::Int64

Return: DeploymentListResult, OpenAPI.Clients.ApiResponse
"""
function deployments_list_at_subscription_scope(_api::DeploymentsApi, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_subscription_scope(_api, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_list_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_subscription_scope(_api, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_list_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_list_at_tenant_scope(_api::DeploymentsApi, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_list_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the deployments at the tenant scope.

Params:
- api_version::String (required)
- filter::String
- top::Int64

Return: DeploymentListResult, OpenAPI.Clients.ApiResponse
"""
function deployments_list_at_tenant_scope(_api::DeploymentsApi, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_tenant_scope(_api, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_list_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, api_version::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_at_tenant_scope(_api, api_version; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_list_by_resource_group_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_list_by_resource_group(_api::DeploymentsApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_list_by_resource_group", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_list_by_resource_group", :minLength, resource_group_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_deployments_list_by_resource_group_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get all the deployments for a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- top::Int64

Return: DeploymentListResult, OpenAPI.Clients.ApiResponse
"""
function deployments_list_by_resource_group(_api::DeploymentsApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_list_by_resource_group(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, _mediaType=nothing)
    _ctx = _oacinternal_deployments_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; filter=filter, top=top, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_validate_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_validate(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_validate", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_validate", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_validate", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_validate", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_validate_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::Deployment (required)

Return: DeploymentValidateResult, OpenAPI.Clients.ApiResponse
"""
function deployments_validate(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_validate(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_validate_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_validate_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_validate_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_validate_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_validate_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_validate_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeployment (required)

Return: DeploymentValidateResult, OpenAPI.Clients.ApiResponse
"""
function deployments_validate_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_validate_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_validate_at_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_validate_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_validate_at_scope_DeploymentsApi, "/{scope}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "scope", scope)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..

Params:
- scope::String (required)
- deployment_name::String (required)
- api_version::String (required)
- parameters::Deployment (required)

Return: DeploymentValidateResult, OpenAPI.Clients.ApiResponse
"""
function deployments_validate_at_scope(_api::DeploymentsApi, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_scope(_api, scope, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_validate_at_scope(_api::DeploymentsApi, response_stream::Channel, scope::String, deployment_name::String, api_version::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_scope(_api, scope, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_validate_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_validate_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_validate_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::Deployment (required)

Return: DeploymentValidateResult, OpenAPI.Clients.ApiResponse
"""
function deployments_validate_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_validate_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String, parameters::Deployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_validate_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("400", "x"=>".") * "\$") => DeploymentValidateResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_validate_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_validate_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_validate_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}/validate", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validates whether the specified template is syntactically correct and will be accepted by Azure Resource Manager..

Params:
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeployment (required)

Return: DeploymentValidateResult, OpenAPI.Clients.ApiResponse
"""
function deployments_validate_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_validate_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, parameters::ScopedDeployment; _mediaType=nothing)
    _ctx = _oacinternal_deployments_validate_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_what_if_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WhatIfOperationResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_what_if(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    OpenAPI.validate_param("resource_group_name", "deployments_what_if", :maxLength, resource_group_name, 90)
    OpenAPI.validate_param("resource_group_name", "deployments_what_if", :minLength, resource_group_name, 1)

    OpenAPI.validate_param("deployment_name", "deployments_what_if", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_what_if", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_what_if_DeploymentsApi, "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Returns changes that will be made by the deployment if executed at the scope of the resource group.

Params:
- resource_group_name::String (required)
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::DeploymentWhatIf (required)

Return: WhatIfOperationResult, OpenAPI.Clients.ApiResponse
"""
function deployments_what_if(_api::DeploymentsApi, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_what_if(_api::DeploymentsApi, response_stream::Channel, resource_group_name::String, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if(_api, resource_group_name, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_what_if_at_management_group_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WhatIfOperationResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_what_if_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    OpenAPI.validate_param("group_id", "deployments_what_if_at_management_group_scope", :maxLength, group_id, 90)
    OpenAPI.validate_param("group_id", "deployments_what_if_at_management_group_scope", :minLength, group_id, 1)

    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_management_group_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_management_group_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_what_if_at_management_group_scope_DeploymentsApi, "/providers/Microsoft.Management/managementGroups/{groupId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "groupId", group_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Returns changes that will be made by the deployment if executed at the scope of the management group.

Params:
- group_id::String (required)
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeploymentWhatIf (required)

Return: WhatIfOperationResult, OpenAPI.Clients.ApiResponse
"""
function deployments_what_if_at_management_group_scope(_api::DeploymentsApi, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_what_if_at_management_group_scope(_api::DeploymentsApi, response_stream::Channel, group_id::String, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_management_group_scope(_api, group_id, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_what_if_at_subscription_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WhatIfOperationResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_what_if_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_subscription_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_subscription_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_what_if_at_subscription_scope_DeploymentsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Returns changes that will be made by the deployment if executed at the scope of the subscription.

Params:
- deployment_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::DeploymentWhatIf (required)

Return: WhatIfOperationResult, OpenAPI.Clients.ApiResponse
"""
function deployments_what_if_at_subscription_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_what_if_at_subscription_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, subscription_id::String, parameters::DeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_subscription_scope(_api, deployment_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_deployments_what_if_at_tenant_scope_DeploymentsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WhatIfOperationResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_deployments_what_if_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_tenant_scope", :maxLength, deployment_name, 64)
    OpenAPI.validate_param("deployment_name", "deployments_what_if_at_tenant_scope", :minLength, deployment_name, 1)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_deployments_what_if_at_tenant_scope_DeploymentsApi, "/providers/Microsoft.Resources/deployments/{deploymentName}/whatIf", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "deploymentName", deployment_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Returns changes that will be made by the deployment if executed at the scope of the tenant group.

Params:
- deployment_name::String (required)
- api_version::String (required)
- parameters::ScopedDeploymentWhatIf (required)

Return: WhatIfOperationResult, OpenAPI.Clients.ApiResponse
"""
function deployments_what_if_at_tenant_scope(_api::DeploymentsApi, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function deployments_what_if_at_tenant_scope(_api::DeploymentsApi, response_stream::Channel, deployment_name::String, api_version::String, parameters::ScopedDeploymentWhatIf; _mediaType=nothing)
    _ctx = _oacinternal_deployments_what_if_at_tenant_scope(_api, deployment_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export deployments_calculate_template_hash
export deployments_cancel
export deployments_cancel_at_management_group_scope
export deployments_cancel_at_scope
export deployments_cancel_at_subscription_scope
export deployments_cancel_at_tenant_scope
export deployments_check_existence
export deployments_check_existence_at_management_group_scope
export deployments_check_existence_at_scope
export deployments_check_existence_at_subscription_scope
export deployments_check_existence_at_tenant_scope
export deployments_create_or_update
export deployments_create_or_update_at_management_group_scope
export deployments_create_or_update_at_scope
export deployments_create_or_update_at_subscription_scope
export deployments_create_or_update_at_tenant_scope
export deployments_delete
export deployments_delete_at_management_group_scope
export deployments_delete_at_scope
export deployments_delete_at_subscription_scope
export deployments_delete_at_tenant_scope
export deployments_export_template
export deployments_export_template_at_management_group_scope
export deployments_export_template_at_scope
export deployments_export_template_at_subscription_scope
export deployments_export_template_at_tenant_scope
export deployments_get
export deployments_get_at_management_group_scope
export deployments_get_at_scope
export deployments_get_at_subscription_scope
export deployments_get_at_tenant_scope
export deployments_list_at_management_group_scope
export deployments_list_at_scope
export deployments_list_at_subscription_scope
export deployments_list_at_tenant_scope
export deployments_list_by_resource_group
export deployments_validate
export deployments_validate_at_management_group_scope
export deployments_validate_at_scope
export deployments_validate_at_subscription_scope
export deployments_validate_at_tenant_scope
export deployments_what_if
export deployments_what_if_at_management_group_scope
export deployments_what_if_at_subscription_scope
export deployments_what_if_at_tenant_scope
