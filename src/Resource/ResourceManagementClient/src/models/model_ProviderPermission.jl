# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProviderPermission
The provider permission

    ProviderPermission(;
        applicationId=nothing,
        roleDefinition=nothing,
        managedByRoleDefinition=nothing,
        providerAuthorizationConsentState=nothing,
    )

    - applicationId::String : The application id.
    - roleDefinition::RoleDefinition
    - managedByRoleDefinition::RoleDefinition
    - providerAuthorizationConsentState::String : The provider authorization consent state.
"""
Base.@kwdef mutable struct ProviderPermission <: OpenAPI.APIModel
    applicationId::Union{Nothing, String} = nothing
    roleDefinition = nothing # spec type: Union{ Nothing, RoleDefinition }
    managedByRoleDefinition = nothing # spec type: Union{ Nothing, RoleDefinition }
    providerAuthorizationConsentState::Union{Nothing, String} = nothing

    function ProviderPermission(applicationId, roleDefinition, managedByRoleDefinition, providerAuthorizationConsentState, )
        o = new(applicationId, roleDefinition, managedByRoleDefinition, providerAuthorizationConsentState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ProviderPermission

const _property_types_ProviderPermission = Dict{Symbol,String}(Symbol("applicationId")=>"String", Symbol("roleDefinition")=>"RoleDefinition", Symbol("managedByRoleDefinition")=>"RoleDefinition", Symbol("providerAuthorizationConsentState")=>"String", )
OpenAPI.property_type(::Type{ ProviderPermission }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProviderPermission[name]))}

function OpenAPI.check_required(o::ProviderPermission)
    true
end

function OpenAPI.validate_properties(o::ProviderPermission)
    OpenAPI.validate_property(ProviderPermission, Symbol("applicationId"), o.applicationId)
    OpenAPI.validate_property(ProviderPermission, Symbol("roleDefinition"), o.roleDefinition)
    OpenAPI.validate_property(ProviderPermission, Symbol("managedByRoleDefinition"), o.managedByRoleDefinition)
    OpenAPI.validate_property(ProviderPermission, Symbol("providerAuthorizationConsentState"), o.providerAuthorizationConsentState)
end

function OpenAPI.validate_property(::Type{ ProviderPermission }, name::Symbol, val)




    if name === Symbol("providerAuthorizationConsentState")
        OpenAPI.validate_param(name, "ProviderPermission", :enum, val, ["NotSpecified", "Required", "NotRequired", "Consented"])
    end

end
