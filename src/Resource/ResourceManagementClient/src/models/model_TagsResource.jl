# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TagsResource
Wrapper resource for tags API requests and responses.

    TagsResource(;
        id=nothing,
        name=nothing,
        type=nothing,
        properties=nothing,
    )

    - id::String : The ID of the tags wrapper resource.
    - name::String : The name of the tags wrapper resource.
    - type::String : The type of the tags wrapper resource.
    - properties::Tags
"""
Base.@kwdef mutable struct TagsResource <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    properties = nothing # spec type: Union{ Nothing, Tags }

    function TagsResource(id, name, type, properties, )
        o = new(id, name, type, properties, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type TagsResource

const _property_types_TagsResource = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("properties")=>"Tags", )
OpenAPI.property_type(::Type{ TagsResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TagsResource[name]))}

function OpenAPI.check_required(o::TagsResource)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::TagsResource)
    OpenAPI.validate_property(TagsResource, Symbol("id"), o.id)
    OpenAPI.validate_property(TagsResource, Symbol("name"), o.name)
    OpenAPI.validate_property(TagsResource, Symbol("type"), o.type)
    OpenAPI.validate_property(TagsResource, Symbol("properties"), o.properties)
end

function OpenAPI.validate_property(::Type{ TagsResource }, name::Symbol, val)




end
