# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AliasPathMetadata

    AliasPathMetadata(;
        type=nothing,
        attributes=nothing,
    )

    - type::String : The type of the token that the alias path is referring to.
    - attributes::String : The attributes of the token that the alias path is referring to.
"""
Base.@kwdef mutable struct AliasPathMetadata <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    attributes::Union{Nothing, String} = nothing

    function AliasPathMetadata(type, attributes, )
        o = new(type, attributes, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AliasPathMetadata

const _property_types_AliasPathMetadata = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("attributes")=>"String", )
OpenAPI.property_type(::Type{ AliasPathMetadata }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AliasPathMetadata[name]))}

function OpenAPI.check_required(o::AliasPathMetadata)
    true
end

function OpenAPI.validate_properties(o::AliasPathMetadata)
    OpenAPI.validate_property(AliasPathMetadata, Symbol("type"), o.type)
    OpenAPI.validate_property(AliasPathMetadata, Symbol("attributes"), o.attributes)
end

function OpenAPI.validate_property(::Type{ AliasPathMetadata }, name::Symbol, val)

    if name === Symbol("type")
        OpenAPI.validate_param(name, "AliasPathMetadata", :enum, val, ["NotSpecified", "Any", "String", "Object", "Array", "Integer", "Number", "Boolean"])
    end


    if name === Symbol("attributes")
        OpenAPI.validate_param(name, "AliasPathMetadata", :enum, val, ["None", "Modifiable"])
    end

end
