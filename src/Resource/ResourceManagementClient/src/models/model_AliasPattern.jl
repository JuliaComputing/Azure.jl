# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AliasPattern
The type of the pattern for an alias path.

    AliasPattern(;
        phrase=nothing,
        variable=nothing,
        type=nothing,
    )

    - phrase::String : The alias pattern phrase.
    - variable::String : The alias pattern variable.
    - type::String : The type of alias pattern
"""
Base.@kwdef mutable struct AliasPattern <: OpenAPI.APIModel
    phrase::Union{Nothing, String} = nothing
    variable::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function AliasPattern(phrase, variable, type, )
        o = new(phrase, variable, type, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AliasPattern

const _property_types_AliasPattern = Dict{Symbol,String}(Symbol("phrase")=>"String", Symbol("variable")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ AliasPattern }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AliasPattern[name]))}

function OpenAPI.check_required(o::AliasPattern)
    true
end

function OpenAPI.validate_properties(o::AliasPattern)
    OpenAPI.validate_property(AliasPattern, Symbol("phrase"), o.phrase)
    OpenAPI.validate_property(AliasPattern, Symbol("variable"), o.variable)
    OpenAPI.validate_property(AliasPattern, Symbol("type"), o.type)
end

function OpenAPI.validate_property(::Type{ AliasPattern }, name::Symbol, val)



    if name === Symbol("type")
        OpenAPI.validate_param(name, "AliasPattern", :enum, val, ["NotSpecified", "Extract"])
    end

end
