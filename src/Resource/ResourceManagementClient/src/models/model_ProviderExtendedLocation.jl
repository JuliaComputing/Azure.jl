# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProviderExtendedLocation
The provider extended location. 

    ProviderExtendedLocation(;
        location=nothing,
        type=nothing,
        extendedLocations=nothing,
    )

    - location::String : The azure location.
    - type::String : The extended location type.
    - extendedLocations::Vector{String} : The extended locations for the azure location.
"""
Base.@kwdef mutable struct ProviderExtendedLocation <: OpenAPI.APIModel
    location::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    extendedLocations::Union{Nothing, Vector{String}} = nothing

    function ProviderExtendedLocation(location, type, extendedLocations, )
        o = new(location, type, extendedLocations, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ProviderExtendedLocation

const _property_types_ProviderExtendedLocation = Dict{Symbol,String}(Symbol("location")=>"String", Symbol("type")=>"String", Symbol("extendedLocations")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ProviderExtendedLocation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProviderExtendedLocation[name]))}

function OpenAPI.check_required(o::ProviderExtendedLocation)
    true
end

function OpenAPI.validate_properties(o::ProviderExtendedLocation)
    OpenAPI.validate_property(ProviderExtendedLocation, Symbol("location"), o.location)
    OpenAPI.validate_property(ProviderExtendedLocation, Symbol("type"), o.type)
    OpenAPI.validate_property(ProviderExtendedLocation, Symbol("extendedLocations"), o.extendedLocations)
end

function OpenAPI.validate_property(::Type{ ProviderExtendedLocation }, name::Symbol, val)



end
