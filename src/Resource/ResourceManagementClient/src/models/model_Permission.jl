# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Permission
Role definition permissions.

    Permission(;
        actions=nothing,
        notActions=nothing,
        dataActions=nothing,
        notDataActions=nothing,
    )

    - actions::Vector{String} : Allowed actions.
    - notActions::Vector{String} : Denied actions.
    - dataActions::Vector{String} : Allowed Data actions.
    - notDataActions::Vector{String} : Denied Data actions.
"""
Base.@kwdef mutable struct Permission <: OpenAPI.APIModel
    actions::Union{Nothing, Vector{String}} = nothing
    notActions::Union{Nothing, Vector{String}} = nothing
    dataActions::Union{Nothing, Vector{String}} = nothing
    notDataActions::Union{Nothing, Vector{String}} = nothing

    function Permission(actions, notActions, dataActions, notDataActions, )
        o = new(actions, notActions, dataActions, notDataActions, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Permission

const _property_types_Permission = Dict{Symbol,String}(Symbol("actions")=>"Vector{String}", Symbol("notActions")=>"Vector{String}", Symbol("dataActions")=>"Vector{String}", Symbol("notDataActions")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Permission }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Permission[name]))}

function OpenAPI.check_required(o::Permission)
    true
end

function OpenAPI.validate_properties(o::Permission)
    OpenAPI.validate_property(Permission, Symbol("actions"), o.actions)
    OpenAPI.validate_property(Permission, Symbol("notActions"), o.notActions)
    OpenAPI.validate_property(Permission, Symbol("dataActions"), o.dataActions)
    OpenAPI.validate_property(Permission, Symbol("notDataActions"), o.notDataActions)
end

function OpenAPI.validate_property(::Type{ Permission }, name::Symbol, val)




end
