# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WhatIfChange
Information about a single resource change predicted by What-If operation.

    WhatIfChange(;
        resourceId=nothing,
        changeType=nothing,
        before=nothing,
        after=nothing,
        delta=nothing,
    )

    - resourceId::String : Resource ID
    - changeType::String : Type of change that will be made to the resource when the deployment is executed.
    - before::Any : The snapshot of the resource before the deployment is executed.
    - after::Any : The predicted snapshot of the resource after the deployment is executed.
    - delta::Vector{WhatIfPropertyChange} : The predicted changes to resource properties.
"""
Base.@kwdef mutable struct WhatIfChange <: OpenAPI.APIModel
    resourceId::Union{Nothing, String} = nothing
    changeType::Union{Nothing, String} = nothing
    before::Union{Nothing, Any} = nothing
    after::Union{Nothing, Any} = nothing
    delta::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WhatIfPropertyChange} }

    function WhatIfChange(resourceId, changeType, before, after, delta, )
        OpenAPI.validate_property(WhatIfChange, Symbol("resourceId"), resourceId)
        OpenAPI.validate_property(WhatIfChange, Symbol("changeType"), changeType)
        OpenAPI.validate_property(WhatIfChange, Symbol("before"), before)
        OpenAPI.validate_property(WhatIfChange, Symbol("after"), after)
        OpenAPI.validate_property(WhatIfChange, Symbol("delta"), delta)
        return new(resourceId, changeType, before, after, delta, )
    end
end # type WhatIfChange

const _property_types_WhatIfChange = Dict{Symbol,String}(Symbol("resourceId")=>"String", Symbol("changeType")=>"String", Symbol("before")=>"Any", Symbol("after")=>"Any", Symbol("delta")=>"Vector{WhatIfPropertyChange}", )
OpenAPI.property_type(::Type{ WhatIfChange }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WhatIfChange[name]))}

function check_required(o::WhatIfChange)
    o.resourceId === nothing && (return false)
    o.changeType === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ WhatIfChange }, name::Symbol, val)
    if name === Symbol("changeType")
        OpenAPI.validate_param(name, "WhatIfChange", :enum, val, ["Create", "Delete", "Ignore", "Deploy", "NoChange", "Modify"])
    end
end
