# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Alias
The alias type. 

    Alias(;
        name=nothing,
        paths=nothing,
        type=nothing,
        defaultPath=nothing,
        defaultPattern=nothing,
        defaultMetadata=nothing,
    )

    - name::String : The alias name.
    - paths::Vector{AliasPath} : The paths for an alias.
    - type::String : The type of the alias.
    - defaultPath::String : The default path for an alias.
    - defaultPattern::AliasPattern
    - defaultMetadata::AliasPathMetadata
"""
Base.@kwdef mutable struct Alias <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    paths::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AliasPath} }
    type::Union{Nothing, String} = nothing
    defaultPath::Union{Nothing, String} = nothing
    defaultPattern = nothing # spec type: Union{ Nothing, AliasPattern }
    defaultMetadata = nothing # spec type: Union{ Nothing, AliasPathMetadata }

    function Alias(name, paths, type, defaultPath, defaultPattern, defaultMetadata, )
        o = new(name, paths, type, defaultPath, defaultPattern, defaultMetadata, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Alias

const _property_types_Alias = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("paths")=>"Vector{AliasPath}", Symbol("type")=>"String", Symbol("defaultPath")=>"String", Symbol("defaultPattern")=>"AliasPattern", Symbol("defaultMetadata")=>"AliasPathMetadata", )
OpenAPI.property_type(::Type{ Alias }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Alias[name]))}

function OpenAPI.check_required(o::Alias)
    true
end

function OpenAPI.validate_properties(o::Alias)
    OpenAPI.validate_property(Alias, Symbol("name"), o.name)
    OpenAPI.validate_property(Alias, Symbol("paths"), o.paths)
    OpenAPI.validate_property(Alias, Symbol("type"), o.type)
    OpenAPI.validate_property(Alias, Symbol("defaultPath"), o.defaultPath)
    OpenAPI.validate_property(Alias, Symbol("defaultPattern"), o.defaultPattern)
    OpenAPI.validate_property(Alias, Symbol("defaultMetadata"), o.defaultMetadata)
end

function OpenAPI.validate_property(::Type{ Alias }, name::Symbol, val)



    if name === Symbol("type")
        OpenAPI.validate_param(name, "Alias", :enum, val, ["NotSpecified", "PlainText", "Mask"])
    end




end
