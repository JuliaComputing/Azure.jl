# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""WhatIfPropertyChange
The predicted change to the resource property.

    WhatIfPropertyChange(;
        path=nothing,
        propertyChangeType=nothing,
        before=nothing,
        after=nothing,
        children=nothing,
    )

    - path::String : The path of the property.
    - propertyChangeType::String : The type of property change.
    - before::Any : The value of the property before the deployment is executed.
    - after::Any : The value of the property after the deployment is executed.
    - children::Vector{WhatIfPropertyChange} : Nested property changes.
"""
Base.@kwdef mutable struct WhatIfPropertyChange <: OpenAPI.APIModel
    path::Union{Nothing, String} = nothing
    propertyChangeType::Union{Nothing, String} = nothing
    before::Union{Nothing, Any} = nothing
    after::Union{Nothing, Any} = nothing
    children::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{WhatIfPropertyChange} }

    function WhatIfPropertyChange(path, propertyChangeType, before, after, children, )
        OpenAPI.validate_property(WhatIfPropertyChange, Symbol("path"), path)
        OpenAPI.validate_property(WhatIfPropertyChange, Symbol("propertyChangeType"), propertyChangeType)
        OpenAPI.validate_property(WhatIfPropertyChange, Symbol("before"), before)
        OpenAPI.validate_property(WhatIfPropertyChange, Symbol("after"), after)
        OpenAPI.validate_property(WhatIfPropertyChange, Symbol("children"), children)
        return new(path, propertyChangeType, before, after, children, )
    end
end # type WhatIfPropertyChange

const _property_types_WhatIfPropertyChange = Dict{Symbol,String}(Symbol("path")=>"String", Symbol("propertyChangeType")=>"String", Symbol("before")=>"Any", Symbol("after")=>"Any", Symbol("children")=>"Vector{WhatIfPropertyChange}", )
OpenAPI.property_type(::Type{ WhatIfPropertyChange }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_WhatIfPropertyChange[name]))}

function check_required(o::WhatIfPropertyChange)
    o.path === nothing && (return false)
    o.propertyChangeType === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ WhatIfPropertyChange }, name::Symbol, val)
    if name === Symbol("propertyChangeType")
        OpenAPI.validate_param(name, "WhatIfPropertyChange", :enum, val, ["Create", "Delete", "Modify", "Array"])
    end
end
