# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Plan
Plan for the resource.

    Plan(;
        name=nothing,
        publisher=nothing,
        product=nothing,
        promotionCode=nothing,
        version=nothing,
    )

    - name::String : The plan ID.
    - publisher::String : The publisher ID.
    - product::String : The offer ID.
    - promotionCode::String : The promotion code.
    - version::String : The plan&#39;s version.
"""
Base.@kwdef mutable struct Plan <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    publisher::Union{Nothing, String} = nothing
    product::Union{Nothing, String} = nothing
    promotionCode::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing

    function Plan(name, publisher, product, promotionCode, version, )
        o = new(name, publisher, product, promotionCode, version, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Plan

const _property_types_Plan = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("publisher")=>"String", Symbol("product")=>"String", Symbol("promotionCode")=>"String", Symbol("version")=>"String", )
OpenAPI.property_type(::Type{ Plan }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Plan[name]))}

function OpenAPI.check_required(o::Plan)
    true
end

function OpenAPI.validate_properties(o::Plan)
    OpenAPI.validate_property(Plan, Symbol("name"), o.name)
    OpenAPI.validate_property(Plan, Symbol("publisher"), o.publisher)
    OpenAPI.validate_property(Plan, Symbol("product"), o.product)
    OpenAPI.validate_property(Plan, Symbol("promotionCode"), o.promotionCode)
    OpenAPI.validate_property(Plan, Symbol("version"), o.version)
end

function OpenAPI.validate_property(::Type{ Plan }, name::Symbol, val)





end
