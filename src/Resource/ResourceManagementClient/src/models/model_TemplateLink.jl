# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TemplateLink
Entity representing the reference to the template.

    TemplateLink(;
        uri=nothing,
        id=nothing,
        relativePath=nothing,
        contentVersion=nothing,
    )

    - uri::String : The URI of the template to deploy. Use either the uri or id property, but not both.
    - id::String : The resource id of a Template Spec. Use either the id or uri property, but not both.
    - relativePath::String : Applicable only if this template link references a Template Spec. This relativePath property can optionally be used to reference a Template Spec artifact by path.
    - contentVersion::String : If included, must match the ContentVersion in the template.
"""
Base.@kwdef mutable struct TemplateLink <: OpenAPI.APIModel
    uri::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    relativePath::Union{Nothing, String} = nothing
    contentVersion::Union{Nothing, String} = nothing

    function TemplateLink(uri, id, relativePath, contentVersion, )
        OpenAPI.validate_property(TemplateLink, Symbol("uri"), uri)
        OpenAPI.validate_property(TemplateLink, Symbol("id"), id)
        OpenAPI.validate_property(TemplateLink, Symbol("relativePath"), relativePath)
        OpenAPI.validate_property(TemplateLink, Symbol("contentVersion"), contentVersion)
        return new(uri, id, relativePath, contentVersion, )
    end
end # type TemplateLink

const _property_types_TemplateLink = Dict{Symbol,String}(Symbol("uri")=>"String", Symbol("id")=>"String", Symbol("relativePath")=>"String", Symbol("contentVersion")=>"String", )
OpenAPI.property_type(::Type{ TemplateLink }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TemplateLink[name]))}

function check_required(o::TemplateLink)
    true
end

function OpenAPI.validate_property(::Type{ TemplateLink }, name::Symbol, val)
end
