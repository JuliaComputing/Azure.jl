# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GenericResource
Resource information.

    GenericResource(;
        plan=nothing,
        properties=nothing,
        kind=nothing,
        managedBy=nothing,
        sku=nothing,
        identity=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        location=nothing,
        extendedLocation=nothing,
        tags=nothing,
    )

    - plan::Plan
    - properties::Any : The resource properties.
    - kind::String : The kind of the resource.
    - managedBy::String : ID of the resource that manages this resource.
    - sku::Sku
    - identity::Identity
    - id::String : Resource ID
    - name::String : Resource name
    - type::String : Resource type
    - location::String : Resource location
    - extendedLocation::ExtendedLocation
    - tags::Dict{String, String} : Resource tags
"""
Base.@kwdef mutable struct GenericResource <: OpenAPI.APIModel
    plan = nothing # spec type: Union{ Nothing, Plan }
    properties::Union{Nothing, Any} = nothing
    kind::Union{Nothing, String} = nothing
    managedBy::Union{Nothing, String} = nothing
    sku = nothing # spec type: Union{ Nothing, Sku }
    identity = nothing # spec type: Union{ Nothing, Identity }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    extendedLocation = nothing # spec type: Union{ Nothing, ExtendedLocation }
    tags::Union{Nothing, Dict{String, String}} = nothing

    function GenericResource(plan, properties, kind, managedBy, sku, identity, id, name, type, location, extendedLocation, tags, )
        o = new(plan, properties, kind, managedBy, sku, identity, id, name, type, location, extendedLocation, tags, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type GenericResource

const _property_types_GenericResource = Dict{Symbol,String}(Symbol("plan")=>"Plan", Symbol("properties")=>"Any", Symbol("kind")=>"String", Symbol("managedBy")=>"String", Symbol("sku")=>"Sku", Symbol("identity")=>"Identity", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("extendedLocation")=>"ExtendedLocation", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ GenericResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GenericResource[name]))}

function OpenAPI.check_required(o::GenericResource)
    true
end

function OpenAPI.validate_properties(o::GenericResource)
    OpenAPI.validate_property(GenericResource, Symbol("plan"), o.plan)
    OpenAPI.validate_property(GenericResource, Symbol("properties"), o.properties)
    OpenAPI.validate_property(GenericResource, Symbol("kind"), o.kind)
    OpenAPI.validate_property(GenericResource, Symbol("managedBy"), o.managedBy)
    OpenAPI.validate_property(GenericResource, Symbol("sku"), o.sku)
    OpenAPI.validate_property(GenericResource, Symbol("identity"), o.identity)
    OpenAPI.validate_property(GenericResource, Symbol("id"), o.id)
    OpenAPI.validate_property(GenericResource, Symbol("name"), o.name)
    OpenAPI.validate_property(GenericResource, Symbol("type"), o.type)
    OpenAPI.validate_property(GenericResource, Symbol("location"), o.location)
    OpenAPI.validate_property(GenericResource, Symbol("extendedLocation"), o.extendedLocation)
    OpenAPI.validate_property(GenericResource, Symbol("tags"), o.tags)
end

function OpenAPI.validate_property(::Type{ GenericResource }, name::Symbol, val)



    if name === Symbol("kind")
        OpenAPI.validate_param(name, "GenericResource", :pattern, val, r"^[-\w\._,\(\)]+$")
    end









end
