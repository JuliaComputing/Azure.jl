# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TagsPatchResource
Wrapper resource for tags patch API request only.

    TagsPatchResource(;
        operation=nothing,
        properties=nothing,
    )

    - operation::String : The operation type for the patch API.
    - properties::Tags
"""
Base.@kwdef mutable struct TagsPatchResource <: OpenAPI.APIModel
    operation::Union{Nothing, String} = nothing
    properties = nothing # spec type: Union{ Nothing, Tags }

    function TagsPatchResource(operation, properties, )
        o = new(operation, properties, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type TagsPatchResource

const _property_types_TagsPatchResource = Dict{Symbol,String}(Symbol("operation")=>"String", Symbol("properties")=>"Tags", )
OpenAPI.property_type(::Type{ TagsPatchResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TagsPatchResource[name]))}

function OpenAPI.check_required(o::TagsPatchResource)
    true
end

function OpenAPI.validate_properties(o::TagsPatchResource)
    OpenAPI.validate_property(TagsPatchResource, Symbol("operation"), o.operation)
    OpenAPI.validate_property(TagsPatchResource, Symbol("properties"), o.properties)
end

function OpenAPI.validate_property(::Type{ TagsPatchResource }, name::Symbol, val)

    if name === Symbol("operation")
        OpenAPI.validate_param(name, "TagsPatchResource", :enum, val, ["Replace", "Merge", "Delete"])
    end


end
