# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OnErrorDeployment
Deployment on error behavior.

    OnErrorDeployment(;
        type=nothing,
        deploymentName=nothing,
    )

    - type::String : The deployment on error behavior type. Possible values are LastSuccessful and SpecificDeployment.
    - deploymentName::String : The deployment to be used on error case.
"""
Base.@kwdef mutable struct OnErrorDeployment <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    deploymentName::Union{Nothing, String} = nothing

    function OnErrorDeployment(type, deploymentName, )
        OpenAPI.validate_property(OnErrorDeployment, Symbol("type"), type)
        OpenAPI.validate_property(OnErrorDeployment, Symbol("deploymentName"), deploymentName)
        return new(type, deploymentName, )
    end
end # type OnErrorDeployment

const _property_types_OnErrorDeployment = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("deploymentName")=>"String", )
OpenAPI.property_type(::Type{ OnErrorDeployment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OnErrorDeployment[name]))}

function check_required(o::OnErrorDeployment)
    true
end

function OpenAPI.validate_property(::Type{ OnErrorDeployment }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "OnErrorDeployment", :enum, val, ["LastSuccessful", "SpecificDeployment"])
    end
end
