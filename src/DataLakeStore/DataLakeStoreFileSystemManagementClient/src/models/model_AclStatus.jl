# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AclStatus
Data Lake Store file or directory Access Control List information.

    AclStatus(;
        entries=nothing,
        group=nothing,
        owner=nothing,
        permission=nothing,
        stickyBit=nothing,
    )

    - entries::Vector{String} : the list of ACLSpec entries on a file or directory.
    - group::String : the group owner, an AAD Object ID.
    - owner::String : the user owner, an AAD Object ID.
    - permission::String : The octal representation of the unnamed user, mask and other permissions.
    - stickyBit::Bool : the indicator of whether the sticky bit is on or off.
"""
Base.@kwdef mutable struct AclStatus <: OpenAPI.APIModel
    entries::Union{Nothing, Vector{String}} = nothing
    group::Union{Nothing, String} = nothing
    owner::Union{Nothing, String} = nothing
    permission::Union{Nothing, String} = nothing
    stickyBit::Union{Nothing, Bool} = nothing

    function AclStatus(entries, group, owner, permission, stickyBit, )
        OpenAPI.validate_property(AclStatus, Symbol("entries"), entries)
        OpenAPI.validate_property(AclStatus, Symbol("group"), group)
        OpenAPI.validate_property(AclStatus, Symbol("owner"), owner)
        OpenAPI.validate_property(AclStatus, Symbol("permission"), permission)
        OpenAPI.validate_property(AclStatus, Symbol("stickyBit"), stickyBit)
        return new(entries, group, owner, permission, stickyBit, )
    end
end # type AclStatus

const _property_types_AclStatus = Dict{Symbol,String}(Symbol("entries")=>"Vector{String}", Symbol("group")=>"String", Symbol("owner")=>"String", Symbol("permission")=>"String", Symbol("stickyBit")=>"Bool", )
OpenAPI.property_type(::Type{ AclStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AclStatus[name]))}

function check_required(o::AclStatus)
    true
end

function OpenAPI.validate_property(::Type{ AclStatus }, name::Symbol, val)
end
