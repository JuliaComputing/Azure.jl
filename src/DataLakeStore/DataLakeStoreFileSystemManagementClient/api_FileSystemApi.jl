# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct FileSystemApi <: SwaggerApi
    client::Swagger.Client
end

"""

Checks if the specified access is available at the given path.
Param: path::String (required)
Param: fsaction::String (required)
Param: op::String (required)
Param: api_version::String (required)
Return: Nothing
"""
function _swaggerinternal_fileSystemCheckAccess(_api::FileSystemApi, path::String, fsaction::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", Nothing, "/webhdfs/v1/{path}", [])
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "fsaction", fsaction)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function fileSystemCheckAccess(_api::FileSystemApi, path::String, fsaction::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemCheckAccess(_api, path, fsaction, op, api_version; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function fileSystemCheckAccess(_api::FileSystemApi, response_stream::Channel, path::String, fsaction::String, op::String, api_version::String; _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemCheckAccess(_api, path, fsaction, op, api_version; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Appends to the specified file, optionally first creating the file if it does not yet exist. This method supports multiple concurrent appends to the file. NOTE: The target must not contain data added by Create or normal (serial) Append. ConcurrentAppend and Append cannot be used interchangeably; once a target file has been modified using either of these append options, the other append option cannot be used on the target file. ConcurrentAppend does not guarantee order and can result in duplicated data landing in the target file.
Param: path::String (required)
Param: streamContents::Any (required)
Param: op::String (required)
Param: Transfer_Encoding::String (required)
Param: api_version::String (required)
Param: appendMode::String
Param: syncFlag::String
Return: Nothing
"""
function _swaggerinternal_fileSystemConcurrentAppend(_api::FileSystemApi, path::String, streamContents, op::String, Transfer_Encoding::String, api_version::String; appendMode=nothing, syncFlag=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/WebHdfsExt/{path}", [], streamContents)
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "appendMode", appendMode)  # type String
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "syncFlag", syncFlag)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.header, "Transfer-Encoding", Transfer_Encoding)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream"] : [_mediaType])
    return _ctx
end

function fileSystemConcurrentAppend(_api::FileSystemApi, path::String, streamContents, op::String, Transfer_Encoding::String, api_version::String; appendMode=nothing, syncFlag=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemConcurrentAppend(_api, path, streamContents, op, Transfer_Encoding, api_version; appendMode=appendMode, syncFlag=syncFlag, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function fileSystemConcurrentAppend(_api::FileSystemApi, response_stream::Channel, path::String, streamContents, op::String, Transfer_Encoding::String, api_version::String; appendMode=nothing, syncFlag=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemConcurrentAppend(_api, path, streamContents, op, Transfer_Encoding, api_version; appendMode=appendMode, syncFlag=syncFlag, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Sets or removes the expiration time on the specified file. This operation can only be executed against files. Folders are not supported.
Param: path::String (required)
Param: expiryOption::String (required)
Param: op::String (required)
Param: api_version::String (required)
Param: expireTime::Int64
Return: Nothing
"""
function _swaggerinternal_fileSystemSetFileExpiry(_api::FileSystemApi, path::String, expiryOption::String, op::String, api_version::String; expireTime=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", Nothing, "/WebHdfsExt/{path}", [])
    Swagger.set_param(_ctx.path, "path", path)  # type String
    Swagger.set_param(_ctx.query, "expiryOption", expiryOption)  # type String
    Swagger.set_param(_ctx.query, "expireTime", expireTime)  # type Int64
    Swagger.set_param(_ctx.query, "op", op)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function fileSystemSetFileExpiry(_api::FileSystemApi, path::String, expiryOption::String, op::String, api_version::String; expireTime=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemSetFileExpiry(_api, path, expiryOption, op, api_version; expireTime=expireTime, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function fileSystemSetFileExpiry(_api::FileSystemApi, response_stream::Channel, path::String, expiryOption::String, op::String, api_version::String; expireTime=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_fileSystemSetFileExpiry(_api, path, expiryOption, op, api_version; expireTime=expireTime, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export fileSystemCheckAccess, fileSystemConcurrentAppend, fileSystemSetFileExpiry
