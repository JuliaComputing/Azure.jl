# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateDataLakeStoreAccountProperties

    CreateDataLakeStoreAccountProperties(;
        defaultGroup=nothing,
        encryptionConfig=nothing,
        encryptionState=nothing,
        firewallRules=nothing,
        virtualNetworkRules=nothing,
        firewallState=nothing,
        firewallAllowAzureIps=nothing,
        trustedIdProviders=nothing,
        trustedIdProviderState=nothing,
        newTier=nothing,
    )

    - defaultGroup::String : The default owner group for all new folders and files created in the Data Lake Store account.
    - encryptionConfig::EncryptionConfig
    - encryptionState::String : The current state of encryption for this Data Lake Store account.
    - firewallRules::Vector{CreateFirewallRuleWithAccountParameters} : The list of firewall rules associated with this Data Lake Store account.
    - virtualNetworkRules::Vector{CreateVirtualNetworkRuleWithAccountParameters} : The list of virtual network rules associated with this Data Lake Store account.
    - firewallState::String : The current state of the IP address firewall for this Data Lake Store account.
    - firewallAllowAzureIps::String : The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
    - trustedIdProviders::Vector{CreateTrustedIdProviderWithAccountParameters} : The list of trusted identity providers associated with this Data Lake Store account.
    - trustedIdProviderState::String : The current state of the trusted identity provider feature for this Data Lake Store account.
    - newTier::String : The commitment tier to use for next month.
"""
Base.@kwdef mutable struct CreateDataLakeStoreAccountProperties <: OpenAPI.APIModel
    defaultGroup::Union{Nothing, String} = nothing
    encryptionConfig = nothing # spec type: Union{ Nothing, EncryptionConfig }
    encryptionState::Union{Nothing, String} = nothing
    firewallRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateFirewallRuleWithAccountParameters} }
    virtualNetworkRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateVirtualNetworkRuleWithAccountParameters} }
    firewallState::Union{Nothing, String} = nothing
    firewallAllowAzureIps::Union{Nothing, String} = nothing
    trustedIdProviders::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateTrustedIdProviderWithAccountParameters} }
    trustedIdProviderState::Union{Nothing, String} = nothing
    newTier::Union{Nothing, String} = nothing

    function CreateDataLakeStoreAccountProperties(defaultGroup, encryptionConfig, encryptionState, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, )
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("defaultGroup"), defaultGroup)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("encryptionConfig"), encryptionConfig)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("encryptionState"), encryptionState)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallRules"), firewallRules)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("virtualNetworkRules"), virtualNetworkRules)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallState"), firewallState)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("trustedIdProviders"), trustedIdProviders)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("trustedIdProviderState"), trustedIdProviderState)
        OpenAPI.validate_property(CreateDataLakeStoreAccountProperties, Symbol("newTier"), newTier)
        return new(defaultGroup, encryptionConfig, encryptionState, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, )
    end
end # type CreateDataLakeStoreAccountProperties

const _property_types_CreateDataLakeStoreAccountProperties = Dict{Symbol,String}(Symbol("defaultGroup")=>"String", Symbol("encryptionConfig")=>"EncryptionConfig", Symbol("encryptionState")=>"String", Symbol("firewallRules")=>"Vector{CreateFirewallRuleWithAccountParameters}", Symbol("virtualNetworkRules")=>"Vector{CreateVirtualNetworkRuleWithAccountParameters}", Symbol("firewallState")=>"String", Symbol("firewallAllowAzureIps")=>"String", Symbol("trustedIdProviders")=>"Vector{CreateTrustedIdProviderWithAccountParameters}", Symbol("trustedIdProviderState")=>"String", Symbol("newTier")=>"String", )
OpenAPI.property_type(::Type{ CreateDataLakeStoreAccountProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateDataLakeStoreAccountProperties[name]))}

function check_required(o::CreateDataLakeStoreAccountProperties)
    true
end

function OpenAPI.validate_property(::Type{ CreateDataLakeStoreAccountProperties }, name::Symbol, val)
    if name === Symbol("encryptionState")
        OpenAPI.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("firewallState")
        OpenAPI.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("firewallAllowAzureIps")
        OpenAPI.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("trustedIdProviderState")
        OpenAPI.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("newTier")
        OpenAPI.validate_param(name, "CreateDataLakeStoreAccountProperties", :enum, val, ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"])
    end
end
