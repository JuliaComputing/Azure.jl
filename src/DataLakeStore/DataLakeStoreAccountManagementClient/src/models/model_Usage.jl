# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Usage
Describes the Resource Usage.

    Usage(;
        unit=nothing,
        id=nothing,
        currentValue=nothing,
        limit=nothing,
        name=nothing,
    )

    - unit::String : Gets the unit of measurement.
    - id::String : Resource identifier.
    - currentValue::Int64 : Gets the current count of the allocated resources in the subscription.
    - limit::Int64 : Gets the maximum count of the resources that can be allocated in the subscription.
    - name::UsageName
"""
Base.@kwdef mutable struct Usage <: OpenAPI.APIModel
    unit::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    currentValue::Union{Nothing, Int64} = nothing
    limit::Union{Nothing, Int64} = nothing
    name = nothing # spec type: Union{ Nothing, UsageName }

    function Usage(unit, id, currentValue, limit, name, )
        o = new(unit, id, currentValue, limit, name, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Usage

const _property_types_Usage = Dict{Symbol,String}(Symbol("unit")=>"String", Symbol("id")=>"String", Symbol("currentValue")=>"Int64", Symbol("limit")=>"Int64", Symbol("name")=>"UsageName", )
OpenAPI.property_type(::Type{ Usage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Usage[name]))}

function OpenAPI.check_required(o::Usage)
    true
end

function OpenAPI.validate_properties(o::Usage)
    OpenAPI.validate_property(Usage, Symbol("unit"), o.unit)
    OpenAPI.validate_property(Usage, Symbol("id"), o.id)
    OpenAPI.validate_property(Usage, Symbol("currentValue"), o.currentValue)
    OpenAPI.validate_property(Usage, Symbol("limit"), o.limit)
    OpenAPI.validate_property(Usage, Symbol("name"), o.name)
end

function OpenAPI.validate_property(::Type{ Usage }, name::Symbol, val)

    if name === Symbol("unit")
        OpenAPI.validate_param(name, "Usage", :enum, val, ["Count", "Bytes", "Seconds", "Percent", "CountsPerSecond", "BytesPerSecond"])
    end



    if name === Symbol("currentValue")
        OpenAPI.validate_param(name, "Usage", :format, val, "int32")
    end

    if name === Symbol("limit")
        OpenAPI.validate_param(name, "Usage", :format, val, "int32")
    end

end
