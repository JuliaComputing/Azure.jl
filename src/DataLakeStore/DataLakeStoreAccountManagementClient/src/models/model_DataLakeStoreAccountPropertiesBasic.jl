# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DataLakeStoreAccountPropertiesBasic
The basic account specific properties that are associated with an underlying Data Lake Store account.

    DataLakeStoreAccountPropertiesBasic(;
        accountId=nothing,
        provisioningState=nothing,
        state=nothing,
        creationTime=nothing,
        lastModifiedTime=nothing,
        endpoint=nothing,
    )

    - accountId::String : The unique identifier associated with this Data Lake Store account.
    - provisioningState::String : The provisioning status of the Data Lake Store account.
    - state::String : The state of the Data Lake Store account.
    - creationTime::ZonedDateTime : The account creation time.
    - lastModifiedTime::ZonedDateTime : The account last modified time.
    - endpoint::String : The full CName endpoint for this account.
"""
Base.@kwdef mutable struct DataLakeStoreAccountPropertiesBasic <: OpenAPI.APIModel
    accountId::Union{Nothing, String} = nothing
    provisioningState::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    creationTime::Union{Nothing, ZonedDateTime} = nothing
    lastModifiedTime::Union{Nothing, ZonedDateTime} = nothing
    endpoint::Union{Nothing, String} = nothing

    function DataLakeStoreAccountPropertiesBasic(accountId, provisioningState, state, creationTime, lastModifiedTime, endpoint, )
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("accountId"), accountId)
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("state"), state)
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("creationTime"), creationTime)
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("lastModifiedTime"), lastModifiedTime)
        OpenAPI.validate_property(DataLakeStoreAccountPropertiesBasic, Symbol("endpoint"), endpoint)
        return new(accountId, provisioningState, state, creationTime, lastModifiedTime, endpoint, )
    end
end # type DataLakeStoreAccountPropertiesBasic

const _property_types_DataLakeStoreAccountPropertiesBasic = Dict{Symbol,String}(Symbol("accountId")=>"String", Symbol("provisioningState")=>"String", Symbol("state")=>"String", Symbol("creationTime")=>"ZonedDateTime", Symbol("lastModifiedTime")=>"ZonedDateTime", Symbol("endpoint")=>"String", )
OpenAPI.property_type(::Type{ DataLakeStoreAccountPropertiesBasic }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataLakeStoreAccountPropertiesBasic[name]))}

function check_required(o::DataLakeStoreAccountPropertiesBasic)
    true
end

function OpenAPI.validate_property(::Type{ DataLakeStoreAccountPropertiesBasic }, name::Symbol, val)
    if name === Symbol("accountId")
        OpenAPI.validate_param(name, "DataLakeStoreAccountPropertiesBasic", :format, val, "uuid")
    end
    if name === Symbol("provisioningState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountPropertiesBasic", :enum, val, ["Failed", "Creating", "Running", "Succeeded", "Patching", "Suspending", "Resuming", "Deleting", "Deleted", "Undeleting", "Canceled"])
    end
    if name === Symbol("state")
        OpenAPI.validate_param(name, "DataLakeStoreAccountPropertiesBasic", :enum, val, ["Active", "Suspended"])
    end
    if name === Symbol("creationTime")
        OpenAPI.validate_param(name, "DataLakeStoreAccountPropertiesBasic", :format, val, "date-time")
    end
    if name === Symbol("lastModifiedTime")
        OpenAPI.validate_param(name, "DataLakeStoreAccountPropertiesBasic", :format, val, "date-time")
    end
end
