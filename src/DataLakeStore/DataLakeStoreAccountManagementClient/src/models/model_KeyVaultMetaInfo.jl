# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""KeyVaultMetaInfo
Metadata information used by account encryption.

    KeyVaultMetaInfo(;
        keyVaultResourceId=nothing,
        encryptionKeyName=nothing,
        encryptionKeyVersion=nothing,
    )

    - keyVaultResourceId::String : The resource identifier for the user managed Key Vault being used to encrypt.
    - encryptionKeyName::String : The name of the user managed encryption key.
    - encryptionKeyVersion::String : The version of the user managed encryption key.
"""
Base.@kwdef mutable struct KeyVaultMetaInfo <: OpenAPI.APIModel
    keyVaultResourceId::Union{Nothing, String} = nothing
    encryptionKeyName::Union{Nothing, String} = nothing
    encryptionKeyVersion::Union{Nothing, String} = nothing

    function KeyVaultMetaInfo(keyVaultResourceId, encryptionKeyName, encryptionKeyVersion, )
        OpenAPI.validate_property(KeyVaultMetaInfo, Symbol("keyVaultResourceId"), keyVaultResourceId)
        OpenAPI.validate_property(KeyVaultMetaInfo, Symbol("encryptionKeyName"), encryptionKeyName)
        OpenAPI.validate_property(KeyVaultMetaInfo, Symbol("encryptionKeyVersion"), encryptionKeyVersion)
        return new(keyVaultResourceId, encryptionKeyName, encryptionKeyVersion, )
    end
end # type KeyVaultMetaInfo

const _property_types_KeyVaultMetaInfo = Dict{Symbol,String}(Symbol("keyVaultResourceId")=>"String", Symbol("encryptionKeyName")=>"String", Symbol("encryptionKeyVersion")=>"String", )
OpenAPI.property_type(::Type{ KeyVaultMetaInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_KeyVaultMetaInfo[name]))}

function check_required(o::KeyVaultMetaInfo)
    o.keyVaultResourceId === nothing && (return false)
    o.encryptionKeyName === nothing && (return false)
    o.encryptionKeyVersion === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ KeyVaultMetaInfo }, name::Symbol, val)
end
