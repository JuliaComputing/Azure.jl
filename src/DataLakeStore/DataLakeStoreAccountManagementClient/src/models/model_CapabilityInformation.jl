# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CapabilityInformation
Subscription-level properties and limits for Data Lake Store.

    CapabilityInformation(;
        subscriptionId=nothing,
        state=nothing,
        maxAccountCount=nothing,
        accountCount=nothing,
        migrationState=nothing,
    )

    - subscriptionId::String : The subscription credentials that uniquely identifies the subscription.
    - state::String : The subscription state.
    - maxAccountCount::Int64 : The maximum supported number of accounts under this subscription.
    - accountCount::Int64 : The current number of accounts under this subscription.
    - migrationState::Bool : The Boolean value of true or false to indicate the maintenance state.
"""
Base.@kwdef mutable struct CapabilityInformation <: OpenAPI.APIModel
    subscriptionId::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    maxAccountCount::Union{Nothing, Int64} = nothing
    accountCount::Union{Nothing, Int64} = nothing
    migrationState::Union{Nothing, Bool} = nothing

    function CapabilityInformation(subscriptionId, state, maxAccountCount, accountCount, migrationState, )
        o = new(subscriptionId, state, maxAccountCount, accountCount, migrationState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type CapabilityInformation

const _property_types_CapabilityInformation = Dict{Symbol,String}(Symbol("subscriptionId")=>"String", Symbol("state")=>"String", Symbol("maxAccountCount")=>"Int64", Symbol("accountCount")=>"Int64", Symbol("migrationState")=>"Bool", )
OpenAPI.property_type(::Type{ CapabilityInformation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CapabilityInformation[name]))}

function OpenAPI.check_required(o::CapabilityInformation)
    true
end

function OpenAPI.validate_properties(o::CapabilityInformation)
    OpenAPI.validate_property(CapabilityInformation, Symbol("subscriptionId"), o.subscriptionId)
    OpenAPI.validate_property(CapabilityInformation, Symbol("state"), o.state)
    OpenAPI.validate_property(CapabilityInformation, Symbol("maxAccountCount"), o.maxAccountCount)
    OpenAPI.validate_property(CapabilityInformation, Symbol("accountCount"), o.accountCount)
    OpenAPI.validate_property(CapabilityInformation, Symbol("migrationState"), o.migrationState)
end

function OpenAPI.validate_property(::Type{ CapabilityInformation }, name::Symbol, val)

    if name === Symbol("subscriptionId")
        OpenAPI.validate_param(name, "CapabilityInformation", :format, val, "uuid")
    end

    if name === Symbol("state")
        OpenAPI.validate_param(name, "CapabilityInformation", :enum, val, ["Registered", "Suspended", "Deleted", "Unregistered", "Warned"])
    end


    if name === Symbol("maxAccountCount")
        OpenAPI.validate_param(name, "CapabilityInformation", :format, val, "int32")
    end

    if name === Symbol("accountCount")
        OpenAPI.validate_param(name, "CapabilityInformation", :format, val, "int32")
    end

end
