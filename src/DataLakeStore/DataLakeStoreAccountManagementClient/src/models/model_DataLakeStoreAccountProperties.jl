# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DataLakeStoreAccountProperties
Data Lake Store account properties information.

    DataLakeStoreAccountProperties(;
        defaultGroup=nothing,
        encryptionConfig=nothing,
        encryptionState=nothing,
        encryptionProvisioningState=nothing,
        firewallRules=nothing,
        virtualNetworkRules=nothing,
        firewallState=nothing,
        firewallAllowAzureIps=nothing,
        trustedIdProviders=nothing,
        trustedIdProviderState=nothing,
        newTier=nothing,
        currentTier=nothing,
        accountId=nothing,
        provisioningState=nothing,
        state=nothing,
        creationTime=nothing,
        lastModifiedTime=nothing,
        endpoint=nothing,
    )

    - defaultGroup::String : The default owner group for all new folders and files created in the Data Lake Store account.
    - encryptionConfig::EncryptionConfig
    - encryptionState::String : The current state of encryption for this Data Lake Store account.
    - encryptionProvisioningState::String : The current state of encryption provisioning for this Data Lake Store account.
    - firewallRules::Vector{FirewallRule} : The list of firewall rules associated with this Data Lake Store account.
    - virtualNetworkRules::Vector{VirtualNetworkRule} : The list of virtual network rules associated with this Data Lake Store account.
    - firewallState::String : The current state of the IP address firewall for this Data Lake Store account.
    - firewallAllowAzureIps::String : The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
    - trustedIdProviders::Vector{TrustedIdProvider} : The list of trusted identity providers associated with this Data Lake Store account.
    - trustedIdProviderState::String : The current state of the trusted identity provider feature for this Data Lake Store account.
    - newTier::String : The commitment tier to use for next month.
    - currentTier::String : The commitment tier in use for the current month.
    - accountId::String : The unique identifier associated with this Data Lake Store account.
    - provisioningState::String : The provisioning status of the Data Lake Store account.
    - state::String : The state of the Data Lake Store account.
    - creationTime::ZonedDateTime : The account creation time.
    - lastModifiedTime::ZonedDateTime : The account last modified time.
    - endpoint::String : The full CName endpoint for this account.
"""
Base.@kwdef mutable struct DataLakeStoreAccountProperties <: OpenAPI.APIModel
    defaultGroup::Union{Nothing, String} = nothing
    encryptionConfig = nothing # spec type: Union{ Nothing, EncryptionConfig }
    encryptionState::Union{Nothing, String} = nothing
    encryptionProvisioningState::Union{Nothing, String} = nothing
    firewallRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FirewallRule} }
    virtualNetworkRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkRule} }
    firewallState::Union{Nothing, String} = nothing
    firewallAllowAzureIps::Union{Nothing, String} = nothing
    trustedIdProviders::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TrustedIdProvider} }
    trustedIdProviderState::Union{Nothing, String} = nothing
    newTier::Union{Nothing, String} = nothing
    currentTier::Union{Nothing, String} = nothing
    accountId::Union{Nothing, String} = nothing
    provisioningState::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    creationTime::Union{Nothing, ZonedDateTime} = nothing
    lastModifiedTime::Union{Nothing, ZonedDateTime} = nothing
    endpoint::Union{Nothing, String} = nothing

    function DataLakeStoreAccountProperties(defaultGroup, encryptionConfig, encryptionState, encryptionProvisioningState, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, currentTier, accountId, provisioningState, state, creationTime, lastModifiedTime, endpoint, )
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("defaultGroup"), defaultGroup)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("encryptionConfig"), encryptionConfig)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("encryptionState"), encryptionState)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("encryptionProvisioningState"), encryptionProvisioningState)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("firewallRules"), firewallRules)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("virtualNetworkRules"), virtualNetworkRules)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("firewallState"), firewallState)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("trustedIdProviders"), trustedIdProviders)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("trustedIdProviderState"), trustedIdProviderState)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("newTier"), newTier)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("currentTier"), currentTier)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("accountId"), accountId)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("state"), state)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("creationTime"), creationTime)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("lastModifiedTime"), lastModifiedTime)
        OpenAPI.validate_property(DataLakeStoreAccountProperties, Symbol("endpoint"), endpoint)
        return new(defaultGroup, encryptionConfig, encryptionState, encryptionProvisioningState, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, currentTier, accountId, provisioningState, state, creationTime, lastModifiedTime, endpoint, )
    end
end # type DataLakeStoreAccountProperties

const _property_types_DataLakeStoreAccountProperties = Dict{Symbol,String}(Symbol("defaultGroup")=>"String", Symbol("encryptionConfig")=>"EncryptionConfig", Symbol("encryptionState")=>"String", Symbol("encryptionProvisioningState")=>"String", Symbol("firewallRules")=>"Vector{FirewallRule}", Symbol("virtualNetworkRules")=>"Vector{VirtualNetworkRule}", Symbol("firewallState")=>"String", Symbol("firewallAllowAzureIps")=>"String", Symbol("trustedIdProviders")=>"Vector{TrustedIdProvider}", Symbol("trustedIdProviderState")=>"String", Symbol("newTier")=>"String", Symbol("currentTier")=>"String", Symbol("accountId")=>"String", Symbol("provisioningState")=>"String", Symbol("state")=>"String", Symbol("creationTime")=>"ZonedDateTime", Symbol("lastModifiedTime")=>"ZonedDateTime", Symbol("endpoint")=>"String", )
OpenAPI.property_type(::Type{ DataLakeStoreAccountProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DataLakeStoreAccountProperties[name]))}

function check_required(o::DataLakeStoreAccountProperties)
    true
end

function OpenAPI.validate_property(::Type{ DataLakeStoreAccountProperties }, name::Symbol, val)
    if name === Symbol("encryptionState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("encryptionProvisioningState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Creating", "Succeeded"])
    end
    if name === Symbol("firewallState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("firewallAllowAzureIps")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("trustedIdProviderState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("newTier")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"])
    end
    if name === Symbol("currentTier")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"])
    end
    if name === Symbol("accountId")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :format, val, "uuid")
    end
    if name === Symbol("provisioningState")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Failed", "Creating", "Running", "Succeeded", "Patching", "Suspending", "Resuming", "Deleting", "Deleted", "Undeleting", "Canceled"])
    end
    if name === Symbol("state")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :enum, val, ["Active", "Suspended"])
    end
    if name === Symbol("creationTime")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :format, val, "date-time")
    end
    if name === Symbol("lastModifiedTime")
        OpenAPI.validate_param(name, "DataLakeStoreAccountProperties", :format, val, "date-time")
    end
end
