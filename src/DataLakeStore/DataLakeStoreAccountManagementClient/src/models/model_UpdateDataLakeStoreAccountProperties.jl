# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UpdateDataLakeStoreAccountProperties
Data Lake Store account properties information to be updated.

    UpdateDataLakeStoreAccountProperties(;
        defaultGroup=nothing,
        encryptionConfig=nothing,
        firewallRules=nothing,
        virtualNetworkRules=nothing,
        firewallState=nothing,
        firewallAllowAzureIps=nothing,
        trustedIdProviders=nothing,
        trustedIdProviderState=nothing,
        newTier=nothing,
    )

    - defaultGroup::String : The default owner group for all new folders and files created in the Data Lake Store account.
    - encryptionConfig::UpdateEncryptionConfig
    - firewallRules::Vector{UpdateFirewallRuleWithAccountParameters} : The list of firewall rules associated with this Data Lake Store account.
    - virtualNetworkRules::Vector{UpdateVirtualNetworkRuleWithAccountParameters} : The list of virtual network rules associated with this Data Lake Store account.
    - firewallState::String : The current state of the IP address firewall for this Data Lake Store account. Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
    - firewallAllowAzureIps::String : The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall is disabled, this is not enforced.
    - trustedIdProviders::Vector{UpdateTrustedIdProviderWithAccountParameters} : The list of trusted identity providers associated with this Data Lake Store account.
    - trustedIdProviderState::String : The current state of the trusted identity provider feature for this Data Lake Store account. Disabling trusted identity provider functionality does not remove the providers, they will just be ignored until this feature is re-enabled.
    - newTier::String : The commitment tier to use for next month.
"""
Base.@kwdef mutable struct UpdateDataLakeStoreAccountProperties <: OpenAPI.APIModel
    defaultGroup::Union{Nothing, String} = nothing
    encryptionConfig = nothing # spec type: Union{ Nothing, UpdateEncryptionConfig }
    firewallRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UpdateFirewallRuleWithAccountParameters} }
    virtualNetworkRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UpdateVirtualNetworkRuleWithAccountParameters} }
    firewallState::Union{Nothing, String} = nothing
    firewallAllowAzureIps::Union{Nothing, String} = nothing
    trustedIdProviders::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{UpdateTrustedIdProviderWithAccountParameters} }
    trustedIdProviderState::Union{Nothing, String} = nothing
    newTier::Union{Nothing, String} = nothing

    function UpdateDataLakeStoreAccountProperties(defaultGroup, encryptionConfig, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, )
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("defaultGroup"), defaultGroup)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("encryptionConfig"), encryptionConfig)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("firewallRules"), firewallRules)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("virtualNetworkRules"), virtualNetworkRules)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("firewallState"), firewallState)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("trustedIdProviders"), trustedIdProviders)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("trustedIdProviderState"), trustedIdProviderState)
        OpenAPI.validate_property(UpdateDataLakeStoreAccountProperties, Symbol("newTier"), newTier)
        return new(defaultGroup, encryptionConfig, firewallRules, virtualNetworkRules, firewallState, firewallAllowAzureIps, trustedIdProviders, trustedIdProviderState, newTier, )
    end
end # type UpdateDataLakeStoreAccountProperties

const _property_types_UpdateDataLakeStoreAccountProperties = Dict{Symbol,String}(Symbol("defaultGroup")=>"String", Symbol("encryptionConfig")=>"UpdateEncryptionConfig", Symbol("firewallRules")=>"Vector{UpdateFirewallRuleWithAccountParameters}", Symbol("virtualNetworkRules")=>"Vector{UpdateVirtualNetworkRuleWithAccountParameters}", Symbol("firewallState")=>"String", Symbol("firewallAllowAzureIps")=>"String", Symbol("trustedIdProviders")=>"Vector{UpdateTrustedIdProviderWithAccountParameters}", Symbol("trustedIdProviderState")=>"String", Symbol("newTier")=>"String", )
OpenAPI.property_type(::Type{ UpdateDataLakeStoreAccountProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateDataLakeStoreAccountProperties[name]))}

function check_required(o::UpdateDataLakeStoreAccountProperties)
    true
end

function OpenAPI.validate_property(::Type{ UpdateDataLakeStoreAccountProperties }, name::Symbol, val)
    if name === Symbol("firewallState")
        OpenAPI.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("firewallAllowAzureIps")
        OpenAPI.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("trustedIdProviderState")
        OpenAPI.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("newTier")
        OpenAPI.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"])
    end
end
