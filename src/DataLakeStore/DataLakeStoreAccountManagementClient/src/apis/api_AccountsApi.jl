# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AccountsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AccountsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AccountsApi }) = "https://management.azure.com"

const _returntypes_accounts_check_name_availability_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NameAvailabilityInformation,
)

function _oacinternal_accounts_check_name_availability(_api::AccountsApi, subscription_id::String, location::String, api_version::String, parameters::CheckNameAvailabilityParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_accounts_check_name_availability_AccountsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/locations/{location}/checkNameAvailability", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether the specified account name is available or taken.

Params:
- subscription_id::String (required)
- location::String (required)
- api_version::String (required)
- parameters::CheckNameAvailabilityParameters (required)

Return: NameAvailabilityInformation, OpenAPI.Clients.ApiResponse
"""
function accounts_check_name_availability(_api::AccountsApi, subscription_id::String, location::String, api_version::String, parameters::CheckNameAvailabilityParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_check_name_availability(_api, subscription_id, location, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_check_name_availability(_api::AccountsApi, response_stream::Channel, subscription_id::String, location::String, api_version::String, parameters::CheckNameAvailabilityParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_check_name_availability(_api, subscription_id, location, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_create_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataLakeStoreAccount,
    Regex("^" * replace("201", "x"=>".") * "\$") => DataLakeStoreAccount,
)

function _oacinternal_accounts_create(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::CreateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_accounts_create_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates the specified Data Lake Store account.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- parameters::CreateDataLakeStoreAccountParameters (required)

Return: DataLakeStoreAccount, OpenAPI.Clients.ApiResponse
"""
function accounts_create(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::CreateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_create(_api, subscription_id, resource_group_name, account_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_create(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::CreateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_create(_api, subscription_id, resource_group_name, account_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_delete_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_accounts_delete(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_accounts_delete_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified Data Lake Store account.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function accounts_delete(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_delete(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_delete(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_delete(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_enable_key_vault_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_accounts_enable_key_vault(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_accounts_enable_key_vault_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}/enableKeyVault", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Attempts to enable a user managed Key Vault for encryption of the specified Data Lake Store account.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function accounts_enable_key_vault(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_enable_key_vault(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_enable_key_vault(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_enable_key_vault(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_get_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataLakeStoreAccount,
)

function _oacinternal_accounts_get(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_accounts_get_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified Data Lake Store account.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)

Return: DataLakeStoreAccount, OpenAPI.Clients.ApiResponse
"""
function accounts_get(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_get(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_get(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, account_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_accounts_get(_api, subscription_id, resource_group_name, account_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_list_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataLakeStoreAccountListResult,
)

function _oacinternal_accounts_list(_api::AccountsApi, subscription_id::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    OpenAPI.validate_param("top", "accounts_list", :minimum, top, 1, false)

    OpenAPI.validate_param("skip", "accounts_list", :minimum, skip, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_accounts_list_AccountsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.DataLakeStore/accounts", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$skip", skip)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$select", select)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$orderby", orderby)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$count", count)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists the Data Lake Store accounts within the subscription. The response includes a link to the next page of results, if any.

Params:
- subscription_id::String (required)
- api_version::String (required)
- filter::String
- top::Int64
- skip::Int64
- select::String
- orderby::String
- count::Bool

Return: DataLakeStoreAccountListResult, OpenAPI.Clients.ApiResponse
"""
function accounts_list(_api::AccountsApi, subscription_id::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    _ctx = _oacinternal_accounts_list(_api, subscription_id, api_version; filter=filter, top=top, skip=skip, select=select, orderby=orderby, count=count, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_list(_api::AccountsApi, response_stream::Channel, subscription_id::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    _ctx = _oacinternal_accounts_list(_api, subscription_id, api_version; filter=filter, top=top, skip=skip, select=select, orderby=orderby, count=count, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_list_by_resource_group_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataLakeStoreAccountListResult,
)

function _oacinternal_accounts_list_by_resource_group(_api::AccountsApi, subscription_id::String, resource_group_name::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    OpenAPI.validate_param("top", "accounts_list_by_resource_group", :minimum, top, 1, false)

    OpenAPI.validate_param("skip", "accounts_list_by_resource_group", :minimum, skip, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_accounts_list_by_resource_group_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$skip", skip)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$select", select)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$orderby", orderby)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$count", count)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists the Data Lake Store accounts within a specific resource group. The response includes a link to the next page of results, if any.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- api_version::String (required)
- filter::String
- top::Int64
- skip::Int64
- select::String
- orderby::String
- count::Bool

Return: DataLakeStoreAccountListResult, OpenAPI.Clients.ApiResponse
"""
function accounts_list_by_resource_group(_api::AccountsApi, subscription_id::String, resource_group_name::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    _ctx = _oacinternal_accounts_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; filter=filter, top=top, skip=skip, select=select, orderby=orderby, count=count, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_list_by_resource_group(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, api_version::String; filter=nothing, top=nothing, skip=nothing, select=nothing, orderby=nothing, count=nothing, _mediaType=nothing)
    _ctx = _oacinternal_accounts_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; filter=filter, top=top, skip=skip, select=select, orderby=orderby, count=count, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_accounts_update_AccountsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DataLakeStoreAccount,
    Regex("^" * replace("201", "x"=>".") * "\$") => DataLakeStoreAccount,
    Regex("^" * replace("202", "x"=>".") * "\$") => DataLakeStoreAccount,
)

function _oacinternal_accounts_update(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::UpdateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_accounts_update_AccountsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeStore/accounts/{accountName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "accountName", account_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates the specified Data Lake Store account information.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- account_name::String (required)
- api_version::String (required)
- parameters::UpdateDataLakeStoreAccountParameters (required)

Return: DataLakeStoreAccount, OpenAPI.Clients.ApiResponse
"""
function accounts_update(_api::AccountsApi, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::UpdateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_update(_api, subscription_id, resource_group_name, account_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function accounts_update(_api::AccountsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, account_name::String, api_version::String, parameters::UpdateDataLakeStoreAccountParameters; _mediaType=nothing)
    _ctx = _oacinternal_accounts_update(_api, subscription_id, resource_group_name, account_name, api_version, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export accounts_check_name_availability
export accounts_create
export accounts_delete
export accounts_enable_key_vault
export accounts_get
export accounts_list
export accounts_list_by_resource_group
export accounts_update
