# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExpressRouteCircuitPropertiesFormat
Properties of ExpressRouteCircuit.

    ExpressRouteCircuitPropertiesFormat(;
        allowClassicOperations=nothing,
        circuitProvisioningState=nothing,
        serviceProviderProvisioningState=nothing,
        authorizations=nothing,
        peerings=nothing,
        serviceKey=nothing,
        serviceProviderNotes=nothing,
        serviceProviderProperties=nothing,
        expressRoutePort=nothing,
        bandwidthInGbps=nothing,
        stag=nothing,
        provisioningState=nothing,
        gatewayManagerEtag=nothing,
        globalReachEnabled=nothing,
    )

    - allowClassicOperations::Bool : Allow classic operations.
    - circuitProvisioningState::String : The CircuitProvisioningState state of the resource.
    - serviceProviderProvisioningState::ServiceProviderProvisioningState
    - authorizations::Vector{ExpressRouteCircuitAuthorization} : The list of authorizations.
    - peerings::Vector{ExpressRouteCircuitPeering} : The list of peerings.
    - serviceKey::String : The ServiceKey.
    - serviceProviderNotes::String : The ServiceProviderNotes.
    - serviceProviderProperties::ExpressRouteCircuitServiceProviderProperties
    - expressRoutePort::SubResource
    - bandwidthInGbps::Float64 : The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
    - stag::Int64 : The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
    - provisioningState::ProvisioningState
    - gatewayManagerEtag::String : The GatewayManager Etag.
    - globalReachEnabled::Bool : Flag denoting global reach status.
"""
Base.@kwdef mutable struct ExpressRouteCircuitPropertiesFormat <: OpenAPI.APIModel
    allowClassicOperations::Union{Nothing, Bool} = nothing
    circuitProvisioningState::Union{Nothing, String} = nothing
    serviceProviderProvisioningState = nothing # spec type: Union{ Nothing, ServiceProviderProvisioningState }
    authorizations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteCircuitAuthorization} }
    peerings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteCircuitPeering} }
    serviceKey::Union{Nothing, String} = nothing
    serviceProviderNotes::Union{Nothing, String} = nothing
    serviceProviderProperties = nothing # spec type: Union{ Nothing, ExpressRouteCircuitServiceProviderProperties }
    expressRoutePort = nothing # spec type: Union{ Nothing, SubResource }
    bandwidthInGbps::Union{Nothing, Float64} = nothing
    stag::Union{Nothing, Int64} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    gatewayManagerEtag::Union{Nothing, String} = nothing
    globalReachEnabled::Union{Nothing, Bool} = nothing

    function ExpressRouteCircuitPropertiesFormat(allowClassicOperations, circuitProvisioningState, serviceProviderProvisioningState, authorizations, peerings, serviceKey, serviceProviderNotes, serviceProviderProperties, expressRoutePort, bandwidthInGbps, stag, provisioningState, gatewayManagerEtag, globalReachEnabled, )
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("allowClassicOperations"), allowClassicOperations)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("circuitProvisioningState"), circuitProvisioningState)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("serviceProviderProvisioningState"), serviceProviderProvisioningState)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("authorizations"), authorizations)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("peerings"), peerings)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("serviceKey"), serviceKey)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("serviceProviderNotes"), serviceProviderNotes)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("serviceProviderProperties"), serviceProviderProperties)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("expressRoutePort"), expressRoutePort)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("bandwidthInGbps"), bandwidthInGbps)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("stag"), stag)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("gatewayManagerEtag"), gatewayManagerEtag)
        OpenAPI.validate_property(ExpressRouteCircuitPropertiesFormat, Symbol("globalReachEnabled"), globalReachEnabled)
        return new(allowClassicOperations, circuitProvisioningState, serviceProviderProvisioningState, authorizations, peerings, serviceKey, serviceProviderNotes, serviceProviderProperties, expressRoutePort, bandwidthInGbps, stag, provisioningState, gatewayManagerEtag, globalReachEnabled, )
    end
end # type ExpressRouteCircuitPropertiesFormat

const _property_types_ExpressRouteCircuitPropertiesFormat = Dict{Symbol,String}(Symbol("allowClassicOperations")=>"Bool", Symbol("circuitProvisioningState")=>"String", Symbol("serviceProviderProvisioningState")=>"ServiceProviderProvisioningState", Symbol("authorizations")=>"Vector{ExpressRouteCircuitAuthorization}", Symbol("peerings")=>"Vector{ExpressRouteCircuitPeering}", Symbol("serviceKey")=>"String", Symbol("serviceProviderNotes")=>"String", Symbol("serviceProviderProperties")=>"ExpressRouteCircuitServiceProviderProperties", Symbol("expressRoutePort")=>"SubResource", Symbol("bandwidthInGbps")=>"Float64", Symbol("stag")=>"Int64", Symbol("provisioningState")=>"ProvisioningState", Symbol("gatewayManagerEtag")=>"String", Symbol("globalReachEnabled")=>"Bool", )
OpenAPI.property_type(::Type{ ExpressRouteCircuitPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExpressRouteCircuitPropertiesFormat[name]))}

function check_required(o::ExpressRouteCircuitPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ ExpressRouteCircuitPropertiesFormat }, name::Symbol, val)
    if name === Symbol("stag")
        OpenAPI.validate_param(name, "ExpressRouteCircuitPropertiesFormat", :format, val, "int32")
    end
end
