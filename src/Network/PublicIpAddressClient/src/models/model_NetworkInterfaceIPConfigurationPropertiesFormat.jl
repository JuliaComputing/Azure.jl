# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NetworkInterfaceIPConfigurationPropertiesFormat
Properties of IP configuration.

    NetworkInterfaceIPConfigurationPropertiesFormat(;
        virtualNetworkTaps=nothing,
        applicationGatewayBackendAddressPools=nothing,
        loadBalancerBackendAddressPools=nothing,
        loadBalancerInboundNatRules=nothing,
        privateIPAddress=nothing,
        privateIPAllocationMethod=nothing,
        privateIPAddressVersion=nothing,
        subnet=nothing,
        primary=nothing,
        publicIPAddress=nothing,
        applicationSecurityGroups=nothing,
        provisioningState=nothing,
        privateLinkConnectionProperties=nothing,
    )

    - virtualNetworkTaps::Vector{VirtualNetworkTap} : The reference to Virtual Network Taps.
    - applicationGatewayBackendAddressPools::Vector{ApplicationGatewayBackendAddressPool} : The reference to ApplicationGatewayBackendAddressPool resource.
    - loadBalancerBackendAddressPools::Vector{BackendAddressPool} : The reference to LoadBalancerBackendAddressPool resource.
    - loadBalancerInboundNatRules::Vector{InboundNatRule} : A list of references of LoadBalancerInboundNatRules.
    - privateIPAddress::String : Private IP address of the IP configuration.
    - privateIPAllocationMethod::IPAllocationMethod
    - privateIPAddressVersion::IPVersion
    - subnet::Subnet
    - primary::Bool : Whether this is a primary customer address on the network interface.
    - publicIPAddress::PublicIPAddress2
    - applicationSecurityGroups::Vector{ApplicationSecurityGroup} : Application security groups in which the IP configuration is included.
    - provisioningState::ProvisioningState
    - privateLinkConnectionProperties::NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties
"""
Base.@kwdef mutable struct NetworkInterfaceIPConfigurationPropertiesFormat <: OpenAPI.APIModel
    virtualNetworkTaps::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkTap} }
    applicationGatewayBackendAddressPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayBackendAddressPool} }
    loadBalancerBackendAddressPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{BackendAddressPool} }
    loadBalancerInboundNatRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InboundNatRule} }
    privateIPAddress::Union{Nothing, String} = nothing
    privateIPAllocationMethod = nothing # spec type: Union{ Nothing, IPAllocationMethod }
    privateIPAddressVersion = nothing # spec type: Union{ Nothing, IPVersion }
    subnet = nothing # spec type: Union{ Nothing, Subnet }
    primary::Union{Nothing, Bool} = nothing
    publicIPAddress = nothing # spec type: Union{ Nothing, PublicIPAddress2 }
    applicationSecurityGroups::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationSecurityGroup} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    privateLinkConnectionProperties = nothing # spec type: Union{ Nothing, NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties }

    function NetworkInterfaceIPConfigurationPropertiesFormat(virtualNetworkTaps, applicationGatewayBackendAddressPools, loadBalancerBackendAddressPools, loadBalancerInboundNatRules, privateIPAddress, privateIPAllocationMethod, privateIPAddressVersion, subnet, primary, publicIPAddress, applicationSecurityGroups, provisioningState, privateLinkConnectionProperties, )
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("virtualNetworkTaps"), virtualNetworkTaps)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("applicationGatewayBackendAddressPools"), applicationGatewayBackendAddressPools)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("loadBalancerBackendAddressPools"), loadBalancerBackendAddressPools)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("loadBalancerInboundNatRules"), loadBalancerInboundNatRules)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("privateIPAddress"), privateIPAddress)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("privateIPAddressVersion"), privateIPAddressVersion)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("subnet"), subnet)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("primary"), primary)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("publicIPAddress"), publicIPAddress)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("applicationSecurityGroups"), applicationSecurityGroups)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(NetworkInterfaceIPConfigurationPropertiesFormat, Symbol("privateLinkConnectionProperties"), privateLinkConnectionProperties)
        return new(virtualNetworkTaps, applicationGatewayBackendAddressPools, loadBalancerBackendAddressPools, loadBalancerInboundNatRules, privateIPAddress, privateIPAllocationMethod, privateIPAddressVersion, subnet, primary, publicIPAddress, applicationSecurityGroups, provisioningState, privateLinkConnectionProperties, )
    end
end # type NetworkInterfaceIPConfigurationPropertiesFormat

const _property_types_NetworkInterfaceIPConfigurationPropertiesFormat = Dict{Symbol,String}(Symbol("virtualNetworkTaps")=>"Vector{VirtualNetworkTap}", Symbol("applicationGatewayBackendAddressPools")=>"Vector{ApplicationGatewayBackendAddressPool}", Symbol("loadBalancerBackendAddressPools")=>"Vector{BackendAddressPool}", Symbol("loadBalancerInboundNatRules")=>"Vector{InboundNatRule}", Symbol("privateIPAddress")=>"String", Symbol("privateIPAllocationMethod")=>"IPAllocationMethod", Symbol("privateIPAddressVersion")=>"IPVersion", Symbol("subnet")=>"Subnet", Symbol("primary")=>"Bool", Symbol("publicIPAddress")=>"PublicIPAddress2", Symbol("applicationSecurityGroups")=>"Vector{ApplicationSecurityGroup}", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateLinkConnectionProperties")=>"NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties", )
OpenAPI.property_type(::Type{ NetworkInterfaceIPConfigurationPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkInterfaceIPConfigurationPropertiesFormat[name]))}

function check_required(o::NetworkInterfaceIPConfigurationPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ NetworkInterfaceIPConfigurationPropertiesFormat }, name::Symbol, val)
end
