# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct VirtualNetworkTapPropertiesFormat <: SwaggerModel
    networkInterfaceTapConfigurations::Any # spec type: Union{ Nothing, Vector{NetworkInterfaceTapConfiguration2} } # spec name: networkInterfaceTapConfigurations
    resourceGuid::Any # spec type: Union{ Nothing, String } # spec name: resourceGuid
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState
    destinationNetworkInterfaceIPConfiguration::Any # spec type: Union{ Nothing, NetworkInterfaceIPConfiguration2 } # spec name: destinationNetworkInterfaceIPConfiguration
    destinationLoadBalancerFrontEndIPConfiguration::Any # spec type: Union{ Nothing, FrontendIPConfiguration } # spec name: destinationLoadBalancerFrontEndIPConfiguration
    destinationPort::Any # spec type: Union{ Nothing, Int32 } # spec name: destinationPort

    function VirtualNetworkTapPropertiesFormat(;networkInterfaceTapConfigurations=nothing, resourceGuid=nothing, provisioningState=nothing, destinationNetworkInterfaceIPConfiguration=nothing, destinationLoadBalancerFrontEndIPConfiguration=nothing, destinationPort=nothing)
        o = new()
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("networkInterfaceTapConfigurations"), networkInterfaceTapConfigurations)
        setfield!(o, Symbol("networkInterfaceTapConfigurations"), networkInterfaceTapConfigurations)
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("resourceGuid"), resourceGuid)
        setfield!(o, Symbol("resourceGuid"), resourceGuid)
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationNetworkInterfaceIPConfiguration"), destinationNetworkInterfaceIPConfiguration)
        setfield!(o, Symbol("destinationNetworkInterfaceIPConfiguration"), destinationNetworkInterfaceIPConfiguration)
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationLoadBalancerFrontEndIPConfiguration"), destinationLoadBalancerFrontEndIPConfiguration)
        setfield!(o, Symbol("destinationLoadBalancerFrontEndIPConfiguration"), destinationLoadBalancerFrontEndIPConfiguration)
        validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationPort"), destinationPort)
        setfield!(o, Symbol("destinationPort"), destinationPort)
        o
    end
end # type VirtualNetworkTapPropertiesFormat

const _property_map_VirtualNetworkTapPropertiesFormat = Dict{Symbol,Symbol}(Symbol("networkInterfaceTapConfigurations")=>Symbol("networkInterfaceTapConfigurations"), Symbol("resourceGuid")=>Symbol("resourceGuid"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("destinationNetworkInterfaceIPConfiguration")=>Symbol("destinationNetworkInterfaceIPConfiguration"), Symbol("destinationLoadBalancerFrontEndIPConfiguration")=>Symbol("destinationLoadBalancerFrontEndIPConfiguration"), Symbol("destinationPort")=>Symbol("destinationPort"))
const _property_types_VirtualNetworkTapPropertiesFormat = Dict{Symbol,String}(Symbol("networkInterfaceTapConfigurations")=>"Vector{NetworkInterfaceTapConfiguration2}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("destinationNetworkInterfaceIPConfiguration")=>"NetworkInterfaceIPConfiguration2", Symbol("destinationLoadBalancerFrontEndIPConfiguration")=>"FrontendIPConfiguration", Symbol("destinationPort")=>"Int32")
Base.propertynames(::Type{ VirtualNetworkTapPropertiesFormat }) = collect(keys(_property_map_VirtualNetworkTapPropertiesFormat))
Swagger.property_type(::Type{ VirtualNetworkTapPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkTapPropertiesFormat[name]))}
Swagger.field_name(::Type{ VirtualNetworkTapPropertiesFormat }, property_name::Symbol) =  _property_map_VirtualNetworkTapPropertiesFormat[property_name]

function check_required(o::VirtualNetworkTapPropertiesFormat)
    true
end

function validate_property(::Type{ VirtualNetworkTapPropertiesFormat }, name::Symbol, val)
end
