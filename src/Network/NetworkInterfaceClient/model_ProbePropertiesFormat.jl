# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct ProbePropertiesFormat <: SwaggerModel
    loadBalancingRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: loadBalancingRules
    protocol::Any # spec type: Union{ Nothing, String } # spec name: protocol
    port::Any # spec type: Union{ Nothing, Int32 } # spec name: port
    intervalInSeconds::Any # spec type: Union{ Nothing, Int32 } # spec name: intervalInSeconds
    numberOfProbes::Any # spec type: Union{ Nothing, Int32 } # spec name: numberOfProbes
    requestPath::Any # spec type: Union{ Nothing, String } # spec name: requestPath
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function ProbePropertiesFormat(;loadBalancingRules=nothing, protocol=nothing, port=nothing, intervalInSeconds=nothing, numberOfProbes=nothing, requestPath=nothing, provisioningState=nothing)
        o = new()
        validate_property(ProbePropertiesFormat, Symbol("loadBalancingRules"), loadBalancingRules)
        setfield!(o, Symbol("loadBalancingRules"), loadBalancingRules)
        validate_property(ProbePropertiesFormat, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(ProbePropertiesFormat, Symbol("port"), port)
        setfield!(o, Symbol("port"), port)
        validate_property(ProbePropertiesFormat, Symbol("intervalInSeconds"), intervalInSeconds)
        setfield!(o, Symbol("intervalInSeconds"), intervalInSeconds)
        validate_property(ProbePropertiesFormat, Symbol("numberOfProbes"), numberOfProbes)
        setfield!(o, Symbol("numberOfProbes"), numberOfProbes)
        validate_property(ProbePropertiesFormat, Symbol("requestPath"), requestPath)
        setfield!(o, Symbol("requestPath"), requestPath)
        validate_property(ProbePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type ProbePropertiesFormat

const _property_map_ProbePropertiesFormat = Dict{Symbol,Symbol}(Symbol("loadBalancingRules")=>Symbol("loadBalancingRules"), Symbol("protocol")=>Symbol("protocol"), Symbol("port")=>Symbol("port"), Symbol("intervalInSeconds")=>Symbol("intervalInSeconds"), Symbol("numberOfProbes")=>Symbol("numberOfProbes"), Symbol("requestPath")=>Symbol("requestPath"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_ProbePropertiesFormat = Dict{Symbol,String}(Symbol("loadBalancingRules")=>"Vector{SubResource}", Symbol("protocol")=>"String", Symbol("port")=>"Int32", Symbol("intervalInSeconds")=>"Int32", Symbol("numberOfProbes")=>"Int32", Symbol("requestPath")=>"String", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ ProbePropertiesFormat }) = collect(keys(_property_map_ProbePropertiesFormat))
Swagger.property_type(::Type{ ProbePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProbePropertiesFormat[name]))}
Swagger.field_name(::Type{ ProbePropertiesFormat }, property_name::Symbol) =  _property_map_ProbePropertiesFormat[property_name]

const _allowed_ProbePropertiesFormat_protocol = ["Http", "Tcp", "Https"]

function check_required(o::ProbePropertiesFormat)
    (getproperty(o, Symbol("port")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ProbePropertiesFormat }, name::Symbol, val)
    if name === Symbol("protocol")
        Swagger.validate_param(name, "ProbePropertiesFormat", :enum, val, _allowed_ProbePropertiesFormat_protocol)
    end
end
