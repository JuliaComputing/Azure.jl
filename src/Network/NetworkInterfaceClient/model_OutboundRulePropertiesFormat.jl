# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct OutboundRulePropertiesFormat <: SwaggerModel
    allocatedOutboundPorts::Any # spec type: Union{ Nothing, Int32 } # spec name: allocatedOutboundPorts
    frontendIPConfigurations::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: frontendIPConfigurations
    backendAddressPool::Any # spec type: Union{ Nothing, SubResource } # spec name: backendAddressPool
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState
    protocol::Any # spec type: Union{ Nothing, String } # spec name: protocol
    enableTcpReset::Any # spec type: Union{ Nothing, Bool } # spec name: enableTcpReset
    idleTimeoutInMinutes::Any # spec type: Union{ Nothing, Int32 } # spec name: idleTimeoutInMinutes

    function OutboundRulePropertiesFormat(;allocatedOutboundPorts=nothing, frontendIPConfigurations=nothing, backendAddressPool=nothing, provisioningState=nothing, protocol=nothing, enableTcpReset=nothing, idleTimeoutInMinutes=nothing)
        o = new()
        validate_property(OutboundRulePropertiesFormat, Symbol("allocatedOutboundPorts"), allocatedOutboundPorts)
        setfield!(o, Symbol("allocatedOutboundPorts"), allocatedOutboundPorts)
        validate_property(OutboundRulePropertiesFormat, Symbol("frontendIPConfigurations"), frontendIPConfigurations)
        setfield!(o, Symbol("frontendIPConfigurations"), frontendIPConfigurations)
        validate_property(OutboundRulePropertiesFormat, Symbol("backendAddressPool"), backendAddressPool)
        setfield!(o, Symbol("backendAddressPool"), backendAddressPool)
        validate_property(OutboundRulePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(OutboundRulePropertiesFormat, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(OutboundRulePropertiesFormat, Symbol("enableTcpReset"), enableTcpReset)
        setfield!(o, Symbol("enableTcpReset"), enableTcpReset)
        validate_property(OutboundRulePropertiesFormat, Symbol("idleTimeoutInMinutes"), idleTimeoutInMinutes)
        setfield!(o, Symbol("idleTimeoutInMinutes"), idleTimeoutInMinutes)
        o
    end
end # type OutboundRulePropertiesFormat

const _property_map_OutboundRulePropertiesFormat = Dict{Symbol,Symbol}(Symbol("allocatedOutboundPorts")=>Symbol("allocatedOutboundPorts"), Symbol("frontendIPConfigurations")=>Symbol("frontendIPConfigurations"), Symbol("backendAddressPool")=>Symbol("backendAddressPool"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("protocol")=>Symbol("protocol"), Symbol("enableTcpReset")=>Symbol("enableTcpReset"), Symbol("idleTimeoutInMinutes")=>Symbol("idleTimeoutInMinutes"))
const _property_types_OutboundRulePropertiesFormat = Dict{Symbol,String}(Symbol("allocatedOutboundPorts")=>"Int32", Symbol("frontendIPConfigurations")=>"Vector{SubResource}", Symbol("backendAddressPool")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState", Symbol("protocol")=>"String", Symbol("enableTcpReset")=>"Bool", Symbol("idleTimeoutInMinutes")=>"Int32")
Base.propertynames(::Type{ OutboundRulePropertiesFormat }) = collect(keys(_property_map_OutboundRulePropertiesFormat))
Swagger.property_type(::Type{ OutboundRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OutboundRulePropertiesFormat[name]))}
Swagger.field_name(::Type{ OutboundRulePropertiesFormat }, property_name::Symbol) =  _property_map_OutboundRulePropertiesFormat[property_name]

const _allowed_OutboundRulePropertiesFormat_protocol = ["Tcp", "Udp", "All"]

function check_required(o::OutboundRulePropertiesFormat)
    (getproperty(o, Symbol("frontendIPConfigurations")) === nothing) && (return false)
    (getproperty(o, Symbol("backendAddressPool")) === nothing) && (return false)
    true
end

function validate_property(::Type{ OutboundRulePropertiesFormat }, name::Symbol, val)
    if name === Symbol("protocol")
        Swagger.validate_param(name, "OutboundRulePropertiesFormat", :enum, val, _allowed_OutboundRulePropertiesFormat_protocol)
    end
end
