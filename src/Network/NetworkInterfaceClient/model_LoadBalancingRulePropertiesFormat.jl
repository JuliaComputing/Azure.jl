# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct LoadBalancingRulePropertiesFormat <: SwaggerModel
    frontendIPConfiguration::Any # spec type: Union{ Nothing, SubResource } # spec name: frontendIPConfiguration
    backendAddressPool::Any # spec type: Union{ Nothing, SubResource } # spec name: backendAddressPool
    probe::Any # spec type: Union{ Nothing, SubResource } # spec name: probe
    protocol::Any # spec type: Union{ Nothing, TransportProtocol } # spec name: protocol
    loadDistribution::Any # spec type: Union{ Nothing, String } # spec name: loadDistribution
    frontendPort::Any # spec type: Union{ Nothing, Int32 } # spec name: frontendPort
    backendPort::Any # spec type: Union{ Nothing, Int32 } # spec name: backendPort
    idleTimeoutInMinutes::Any # spec type: Union{ Nothing, Int32 } # spec name: idleTimeoutInMinutes
    enableFloatingIP::Any # spec type: Union{ Nothing, Bool } # spec name: enableFloatingIP
    enableTcpReset::Any # spec type: Union{ Nothing, Bool } # spec name: enableTcpReset
    disableOutboundSnat::Any # spec type: Union{ Nothing, Bool } # spec name: disableOutboundSnat
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function LoadBalancingRulePropertiesFormat(;frontendIPConfiguration=nothing, backendAddressPool=nothing, probe=nothing, protocol=nothing, loadDistribution=nothing, frontendPort=nothing, backendPort=nothing, idleTimeoutInMinutes=nothing, enableFloatingIP=nothing, enableTcpReset=nothing, disableOutboundSnat=nothing, provisioningState=nothing)
        o = new()
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("frontendIPConfiguration"), frontendIPConfiguration)
        setfield!(o, Symbol("frontendIPConfiguration"), frontendIPConfiguration)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("backendAddressPool"), backendAddressPool)
        setfield!(o, Symbol("backendAddressPool"), backendAddressPool)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("probe"), probe)
        setfield!(o, Symbol("probe"), probe)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("loadDistribution"), loadDistribution)
        setfield!(o, Symbol("loadDistribution"), loadDistribution)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("frontendPort"), frontendPort)
        setfield!(o, Symbol("frontendPort"), frontendPort)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("backendPort"), backendPort)
        setfield!(o, Symbol("backendPort"), backendPort)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("idleTimeoutInMinutes"), idleTimeoutInMinutes)
        setfield!(o, Symbol("idleTimeoutInMinutes"), idleTimeoutInMinutes)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("enableFloatingIP"), enableFloatingIP)
        setfield!(o, Symbol("enableFloatingIP"), enableFloatingIP)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("enableTcpReset"), enableTcpReset)
        setfield!(o, Symbol("enableTcpReset"), enableTcpReset)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("disableOutboundSnat"), disableOutboundSnat)
        setfield!(o, Symbol("disableOutboundSnat"), disableOutboundSnat)
        validate_property(LoadBalancingRulePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type LoadBalancingRulePropertiesFormat

const _property_map_LoadBalancingRulePropertiesFormat = Dict{Symbol,Symbol}(Symbol("frontendIPConfiguration")=>Symbol("frontendIPConfiguration"), Symbol("backendAddressPool")=>Symbol("backendAddressPool"), Symbol("probe")=>Symbol("probe"), Symbol("protocol")=>Symbol("protocol"), Symbol("loadDistribution")=>Symbol("loadDistribution"), Symbol("frontendPort")=>Symbol("frontendPort"), Symbol("backendPort")=>Symbol("backendPort"), Symbol("idleTimeoutInMinutes")=>Symbol("idleTimeoutInMinutes"), Symbol("enableFloatingIP")=>Symbol("enableFloatingIP"), Symbol("enableTcpReset")=>Symbol("enableTcpReset"), Symbol("disableOutboundSnat")=>Symbol("disableOutboundSnat"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_LoadBalancingRulePropertiesFormat = Dict{Symbol,String}(Symbol("frontendIPConfiguration")=>"SubResource", Symbol("backendAddressPool")=>"SubResource", Symbol("probe")=>"SubResource", Symbol("protocol")=>"TransportProtocol", Symbol("loadDistribution")=>"String", Symbol("frontendPort")=>"Int32", Symbol("backendPort")=>"Int32", Symbol("idleTimeoutInMinutes")=>"Int32", Symbol("enableFloatingIP")=>"Bool", Symbol("enableTcpReset")=>"Bool", Symbol("disableOutboundSnat")=>"Bool", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ LoadBalancingRulePropertiesFormat }) = collect(keys(_property_map_LoadBalancingRulePropertiesFormat))
Swagger.property_type(::Type{ LoadBalancingRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LoadBalancingRulePropertiesFormat[name]))}
Swagger.field_name(::Type{ LoadBalancingRulePropertiesFormat }, property_name::Symbol) =  _property_map_LoadBalancingRulePropertiesFormat[property_name]

const _allowed_LoadBalancingRulePropertiesFormat_loadDistribution = ["Default", "SourceIP", "SourceIPProtocol"]

function check_required(o::LoadBalancingRulePropertiesFormat)
    (getproperty(o, Symbol("protocol")) === nothing) && (return false)
    (getproperty(o, Symbol("frontendPort")) === nothing) && (return false)
    true
end

function validate_property(::Type{ LoadBalancingRulePropertiesFormat }, name::Symbol, val)
    if name === Symbol("loadDistribution")
        Swagger.validate_param(name, "LoadBalancingRulePropertiesFormat", :enum, val, _allowed_LoadBalancingRulePropertiesFormat_loadDistribution)
    end
end
