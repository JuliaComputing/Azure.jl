# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct IPConfigurationPropertiesFormat2 <: SwaggerModel
    privateIPAddress::Any # spec type: Union{ Nothing, String } # spec name: privateIPAddress
    privateIPAllocationMethod::Any # spec type: Union{ Nothing, IPAllocationMethod } # spec name: privateIPAllocationMethod
    subnet::Any # spec type: Union{ Nothing, Subnet } # spec name: subnet
    publicIPAddress::Any # spec type: Union{ Nothing, PublicIPAddress } # spec name: publicIPAddress
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function IPConfigurationPropertiesFormat2(;privateIPAddress=nothing, privateIPAllocationMethod=nothing, subnet=nothing, publicIPAddress=nothing, provisioningState=nothing)
        o = new()
        validate_property(IPConfigurationPropertiesFormat2, Symbol("privateIPAddress"), privateIPAddress)
        setfield!(o, Symbol("privateIPAddress"), privateIPAddress)
        validate_property(IPConfigurationPropertiesFormat2, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        setfield!(o, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        validate_property(IPConfigurationPropertiesFormat2, Symbol("subnet"), subnet)
        setfield!(o, Symbol("subnet"), subnet)
        validate_property(IPConfigurationPropertiesFormat2, Symbol("publicIPAddress"), publicIPAddress)
        setfield!(o, Symbol("publicIPAddress"), publicIPAddress)
        validate_property(IPConfigurationPropertiesFormat2, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type IPConfigurationPropertiesFormat2

const _property_map_IPConfigurationPropertiesFormat2 = Dict{Symbol,Symbol}(Symbol("privateIPAddress")=>Symbol("privateIPAddress"), Symbol("privateIPAllocationMethod")=>Symbol("privateIPAllocationMethod"), Symbol("subnet")=>Symbol("subnet"), Symbol("publicIPAddress")=>Symbol("publicIPAddress"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_IPConfigurationPropertiesFormat2 = Dict{Symbol,String}(Symbol("privateIPAddress")=>"String", Symbol("privateIPAllocationMethod")=>"IPAllocationMethod", Symbol("subnet")=>"Subnet", Symbol("publicIPAddress")=>"PublicIPAddress", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ IPConfigurationPropertiesFormat2 }) = collect(keys(_property_map_IPConfigurationPropertiesFormat2))
Swagger.property_type(::Type{ IPConfigurationPropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IPConfigurationPropertiesFormat2[name]))}
Swagger.field_name(::Type{ IPConfigurationPropertiesFormat2 }, property_name::Symbol) =  _property_map_IPConfigurationPropertiesFormat2[property_name]

function check_required(o::IPConfigurationPropertiesFormat2)
    true
end

function validate_property(::Type{ IPConfigurationPropertiesFormat2 }, name::Symbol, val)
end
