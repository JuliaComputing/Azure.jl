# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LoadBalancer
LoadBalancer resource.

    LoadBalancer(;
        sku=nothing,
        properties=nothing,
        etag=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        location=nothing,
        tags=nothing,
    )

    - sku::LoadBalancerSku
    - properties::LoadBalancerPropertiesFormat
    - etag::String : A unique read-only string that changes whenever the resource is updated.
    - id::String : Resource ID.
    - name::String : Resource name.
    - type::String : Resource type.
    - location::String : Resource location.
    - tags::Dict{String, String} : Resource tags.
"""
Base.@kwdef mutable struct LoadBalancer <: OpenAPI.APIModel
    sku = nothing # spec type: Union{ Nothing, LoadBalancerSku }
    properties = nothing # spec type: Union{ Nothing, LoadBalancerPropertiesFormat }
    etag::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    tags::Union{Nothing, Dict{String, String}} = nothing

    function LoadBalancer(sku, properties, etag, id, name, type, location, tags, )
        OpenAPI.validate_property(LoadBalancer, Symbol("sku"), sku)
        OpenAPI.validate_property(LoadBalancer, Symbol("properties"), properties)
        OpenAPI.validate_property(LoadBalancer, Symbol("etag"), etag)
        OpenAPI.validate_property(LoadBalancer, Symbol("id"), id)
        OpenAPI.validate_property(LoadBalancer, Symbol("name"), name)
        OpenAPI.validate_property(LoadBalancer, Symbol("type"), type)
        OpenAPI.validate_property(LoadBalancer, Symbol("location"), location)
        OpenAPI.validate_property(LoadBalancer, Symbol("tags"), tags)
        return new(sku, properties, etag, id, name, type, location, tags, )
    end
end # type LoadBalancer

const _property_types_LoadBalancer = Dict{Symbol,String}(Symbol("sku")=>"LoadBalancerSku", Symbol("properties")=>"LoadBalancerPropertiesFormat", Symbol("etag")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ LoadBalancer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LoadBalancer[name]))}

function check_required(o::LoadBalancer)
    true
end

function OpenAPI.validate_property(::Type{ LoadBalancer }, name::Symbol, val)
end
