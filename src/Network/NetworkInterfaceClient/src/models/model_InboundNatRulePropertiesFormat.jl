# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InboundNatRulePropertiesFormat
Properties of the inbound NAT rule.

    InboundNatRulePropertiesFormat(;
        frontendIPConfiguration=nothing,
        backendIPConfiguration=nothing,
        protocol=nothing,
        frontendPort=nothing,
        backendPort=nothing,
        idleTimeoutInMinutes=nothing,
        enableFloatingIP=nothing,
        enableTcpReset=nothing,
        provisioningState=nothing,
    )

    - frontendIPConfiguration::SubResource
    - backendIPConfiguration::NetworkInterfaceIPConfiguration2
    - protocol::TransportProtocol
    - frontendPort::Int64 : The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
    - backendPort::Int64 : The port used for the internal endpoint. Acceptable values range from 1 to 65535.
    - idleTimeoutInMinutes::Int64 : The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
    - enableFloatingIP::Bool : Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint.
    - enableTcpReset::Bool : Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct InboundNatRulePropertiesFormat <: OpenAPI.APIModel
    frontendIPConfiguration = nothing # spec type: Union{ Nothing, SubResource }
    backendIPConfiguration = nothing # spec type: Union{ Nothing, NetworkInterfaceIPConfiguration2 }
    protocol = nothing # spec type: Union{ Nothing, TransportProtocol }
    frontendPort::Union{Nothing, Int64} = nothing
    backendPort::Union{Nothing, Int64} = nothing
    idleTimeoutInMinutes::Union{Nothing, Int64} = nothing
    enableFloatingIP::Union{Nothing, Bool} = nothing
    enableTcpReset::Union{Nothing, Bool} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function InboundNatRulePropertiesFormat(frontendIPConfiguration, backendIPConfiguration, protocol, frontendPort, backendPort, idleTimeoutInMinutes, enableFloatingIP, enableTcpReset, provisioningState, )
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("frontendIPConfiguration"), frontendIPConfiguration)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("backendIPConfiguration"), backendIPConfiguration)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("protocol"), protocol)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("frontendPort"), frontendPort)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("backendPort"), backendPort)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("idleTimeoutInMinutes"), idleTimeoutInMinutes)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("enableFloatingIP"), enableFloatingIP)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("enableTcpReset"), enableTcpReset)
        OpenAPI.validate_property(InboundNatRulePropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(frontendIPConfiguration, backendIPConfiguration, protocol, frontendPort, backendPort, idleTimeoutInMinutes, enableFloatingIP, enableTcpReset, provisioningState, )
    end
end # type InboundNatRulePropertiesFormat

const _property_types_InboundNatRulePropertiesFormat = Dict{Symbol,String}(Symbol("frontendIPConfiguration")=>"SubResource", Symbol("backendIPConfiguration")=>"NetworkInterfaceIPConfiguration2", Symbol("protocol")=>"TransportProtocol", Symbol("frontendPort")=>"Int64", Symbol("backendPort")=>"Int64", Symbol("idleTimeoutInMinutes")=>"Int64", Symbol("enableFloatingIP")=>"Bool", Symbol("enableTcpReset")=>"Bool", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ InboundNatRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InboundNatRulePropertiesFormat[name]))}

function check_required(o::InboundNatRulePropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ InboundNatRulePropertiesFormat }, name::Symbol, val)
    if name === Symbol("frontendPort")
        OpenAPI.validate_param(name, "InboundNatRulePropertiesFormat", :format, val, "int32")
    end
    if name === Symbol("backendPort")
        OpenAPI.validate_param(name, "InboundNatRulePropertiesFormat", :format, val, "int32")
    end
    if name === Symbol("idleTimeoutInMinutes")
        OpenAPI.validate_param(name, "InboundNatRulePropertiesFormat", :format, val, "int32")
    end
end
