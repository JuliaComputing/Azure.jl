# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NetworkInterfacePropertiesFormat_2
NetworkInterface properties.

    NetworkInterfacePropertiesFormat2(;
        virtualMachine=nothing,
        networkSecurityGroup=nothing,
        privateEndpoint=nothing,
        ipConfigurations=nothing,
        tapConfigurations=nothing,
        dnsSettings=nothing,
        macAddress=nothing,
        primary=nothing,
        enableAcceleratedNetworking=nothing,
        enableIPForwarding=nothing,
        hostedWorkloads=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
    )

    - virtualMachine::SubResource
    - networkSecurityGroup::NetworkSecurityGroup
    - privateEndpoint::PrivateEndpoint
    - ipConfigurations::Vector{NetworkInterfaceIPConfiguration2} : A list of IPConfigurations of the network interface.
    - tapConfigurations::Vector{NetworkInterfaceTapConfiguration2} : A list of TapConfigurations of the network interface.
    - dnsSettings::NetworkInterfaceDnsSettings2
    - macAddress::String : The MAC address of the network interface.
    - primary::Bool : Whether this is a primary network interface on a virtual machine.
    - enableAcceleratedNetworking::Bool : If the network interface is accelerated networking enabled.
    - enableIPForwarding::Bool : Indicates whether IP forwarding is enabled on this network interface.
    - hostedWorkloads::Vector{String} : A list of references to linked BareMetal resources.
    - resourceGuid::String : The resource GUID property of the network interface resource.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct NetworkInterfacePropertiesFormat2 <: OpenAPI.APIModel
    virtualMachine = nothing # spec type: Union{ Nothing, SubResource }
    networkSecurityGroup = nothing # spec type: Union{ Nothing, NetworkSecurityGroup }
    privateEndpoint = nothing # spec type: Union{ Nothing, PrivateEndpoint }
    ipConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceIPConfiguration2} }
    tapConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceTapConfiguration2} }
    dnsSettings = nothing # spec type: Union{ Nothing, NetworkInterfaceDnsSettings2 }
    macAddress::Union{Nothing, String} = nothing
    primary::Union{Nothing, Bool} = nothing
    enableAcceleratedNetworking::Union{Nothing, Bool} = nothing
    enableIPForwarding::Union{Nothing, Bool} = nothing
    hostedWorkloads::Union{Nothing, Vector{String}} = nothing
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function NetworkInterfacePropertiesFormat2(virtualMachine, networkSecurityGroup, privateEndpoint, ipConfigurations, tapConfigurations, dnsSettings, macAddress, primary, enableAcceleratedNetworking, enableIPForwarding, hostedWorkloads, resourceGuid, provisioningState, )
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("virtualMachine"), virtualMachine)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("networkSecurityGroup"), networkSecurityGroup)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("privateEndpoint"), privateEndpoint)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("ipConfigurations"), ipConfigurations)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("tapConfigurations"), tapConfigurations)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("dnsSettings"), dnsSettings)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("macAddress"), macAddress)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("primary"), primary)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("enableAcceleratedNetworking"), enableAcceleratedNetworking)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("enableIPForwarding"), enableIPForwarding)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("hostedWorkloads"), hostedWorkloads)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("resourceGuid"), resourceGuid)
        OpenAPI.validate_property(NetworkInterfacePropertiesFormat2, Symbol("provisioningState"), provisioningState)
        return new(virtualMachine, networkSecurityGroup, privateEndpoint, ipConfigurations, tapConfigurations, dnsSettings, macAddress, primary, enableAcceleratedNetworking, enableIPForwarding, hostedWorkloads, resourceGuid, provisioningState, )
    end
end # type NetworkInterfacePropertiesFormat2

const _property_types_NetworkInterfacePropertiesFormat2 = Dict{Symbol,String}(Symbol("virtualMachine")=>"SubResource", Symbol("networkSecurityGroup")=>"NetworkSecurityGroup", Symbol("privateEndpoint")=>"PrivateEndpoint", Symbol("ipConfigurations")=>"Vector{NetworkInterfaceIPConfiguration2}", Symbol("tapConfigurations")=>"Vector{NetworkInterfaceTapConfiguration2}", Symbol("dnsSettings")=>"NetworkInterfaceDnsSettings2", Symbol("macAddress")=>"String", Symbol("primary")=>"Bool", Symbol("enableAcceleratedNetworking")=>"Bool", Symbol("enableIPForwarding")=>"Bool", Symbol("hostedWorkloads")=>"Vector{String}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ NetworkInterfacePropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkInterfacePropertiesFormat2[name]))}

function check_required(o::NetworkInterfacePropertiesFormat2)
    true
end

function OpenAPI.validate_property(::Type{ NetworkInterfacePropertiesFormat2 }, name::Symbol, val)
end
