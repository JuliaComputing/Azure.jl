# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PrivateLinkServiceProperties
Properties of the private link service.

    PrivateLinkServiceProperties(;
        loadBalancerFrontendIpConfigurations=nothing,
        ipConfigurations=nothing,
        destinationIPAddress=nothing,
        networkInterfaces=nothing,
        provisioningState=nothing,
        privateEndpointConnections=nothing,
        visibility=nothing,
        autoApproval=nothing,
        fqdns=nothing,
        alias=nothing,
        enableProxyProtocol=nothing,
    )

    - loadBalancerFrontendIpConfigurations::Vector{FrontendIPConfiguration} : An array of references to the load balancer IP configurations.
    - ipConfigurations::Vector{PrivateLinkServiceIpConfiguration} : An array of private link service IP configurations.
    - destinationIPAddress::String : The destination IP address of the private link service.
    - networkInterfaces::Vector{NetworkInterface2} : An array of references to the network interfaces created for this private link service.
    - provisioningState::ProvisioningState
    - privateEndpointConnections::Vector{PrivateEndpointConnection} : An array of list about connections to the private endpoint.
    - visibility::ResourceSet : The visibility list of the private link service.
    - autoApproval::ResourceSet : The auto-approval list of the private link service.
    - fqdns::Vector{String} : The list of Fqdn.
    - alias::String : The alias of the private link service.
    - enableProxyProtocol::Bool : Whether the private link service is enabled for proxy protocol or not.
"""
Base.@kwdef mutable struct PrivateLinkServiceProperties <: OpenAPI.APIModel
    loadBalancerFrontendIpConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FrontendIPConfiguration} }
    ipConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PrivateLinkServiceIpConfiguration} }
    destinationIPAddress::Union{Nothing, String} = nothing
    networkInterfaces::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterface2} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    privateEndpointConnections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PrivateEndpointConnection} }
    visibility = nothing # spec type: Union{ Nothing, ResourceSet }
    autoApproval = nothing # spec type: Union{ Nothing, ResourceSet }
    fqdns::Union{Nothing, Vector{String}} = nothing
    alias::Union{Nothing, String} = nothing
    enableProxyProtocol::Union{Nothing, Bool} = nothing

    function PrivateLinkServiceProperties(loadBalancerFrontendIpConfigurations, ipConfigurations, destinationIPAddress, networkInterfaces, provisioningState, privateEndpointConnections, visibility, autoApproval, fqdns, alias, enableProxyProtocol, )
        o = new(loadBalancerFrontendIpConfigurations, ipConfigurations, destinationIPAddress, networkInterfaces, provisioningState, privateEndpointConnections, visibility, autoApproval, fqdns, alias, enableProxyProtocol, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PrivateLinkServiceProperties

const _property_types_PrivateLinkServiceProperties = Dict{Symbol,String}(Symbol("loadBalancerFrontendIpConfigurations")=>"Vector{FrontendIPConfiguration}", Symbol("ipConfigurations")=>"Vector{PrivateLinkServiceIpConfiguration}", Symbol("destinationIPAddress")=>"String", Symbol("networkInterfaces")=>"Vector{NetworkInterface2}", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateEndpointConnections")=>"Vector{PrivateEndpointConnection}", Symbol("visibility")=>"ResourceSet", Symbol("autoApproval")=>"ResourceSet", Symbol("fqdns")=>"Vector{String}", Symbol("alias")=>"String", Symbol("enableProxyProtocol")=>"Bool", )
OpenAPI.property_type(::Type{ PrivateLinkServiceProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrivateLinkServiceProperties[name]))}

function OpenAPI.check_required(o::PrivateLinkServiceProperties)
    true
end

function OpenAPI.validate_properties(o::PrivateLinkServiceProperties)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("loadBalancerFrontendIpConfigurations"), o.loadBalancerFrontendIpConfigurations)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("ipConfigurations"), o.ipConfigurations)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("destinationIPAddress"), o.destinationIPAddress)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("networkInterfaces"), o.networkInterfaces)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("privateEndpointConnections"), o.privateEndpointConnections)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("visibility"), o.visibility)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("autoApproval"), o.autoApproval)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("fqdns"), o.fqdns)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("alias"), o.alias)
    OpenAPI.validate_property(PrivateLinkServiceProperties, Symbol("enableProxyProtocol"), o.enableProxyProtocol)
end

function OpenAPI.validate_property(::Type{ PrivateLinkServiceProperties }, name::Symbol, val)











end
