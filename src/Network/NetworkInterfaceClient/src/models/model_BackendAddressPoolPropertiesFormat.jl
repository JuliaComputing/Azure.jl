# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BackendAddressPoolPropertiesFormat
Properties of the backend address pool.

    BackendAddressPoolPropertiesFormat(;
        backendIPConfigurations=nothing,
        loadBalancerBackendAddresses=nothing,
        loadBalancingRules=nothing,
        outboundRule=nothing,
        outboundRules=nothing,
        provisioningState=nothing,
    )

    - backendIPConfigurations::Vector{NetworkInterfaceIPConfiguration2} : An array of references to IP addresses defined in network interfaces.
    - loadBalancerBackendAddresses::Vector{LoadBalancerBackendAddress} : An array of backend addresses.
    - loadBalancingRules::Vector{SubResource} : An array of references to load balancing rules that use this backend address pool.
    - outboundRule::SubResource
    - outboundRules::Vector{SubResource} : An array of references to outbound rules that use this backend address pool.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct BackendAddressPoolPropertiesFormat <: OpenAPI.APIModel
    backendIPConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceIPConfiguration2} }
    loadBalancerBackendAddresses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LoadBalancerBackendAddress} }
    loadBalancingRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    outboundRule = nothing # spec type: Union{ Nothing, SubResource }
    outboundRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function BackendAddressPoolPropertiesFormat(backendIPConfigurations, loadBalancerBackendAddresses, loadBalancingRules, outboundRule, outboundRules, provisioningState, )
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("backendIPConfigurations"), backendIPConfigurations)
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("loadBalancerBackendAddresses"), loadBalancerBackendAddresses)
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("loadBalancingRules"), loadBalancingRules)
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("outboundRule"), outboundRule)
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("outboundRules"), outboundRules)
        OpenAPI.validate_property(BackendAddressPoolPropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(backendIPConfigurations, loadBalancerBackendAddresses, loadBalancingRules, outboundRule, outboundRules, provisioningState, )
    end
end # type BackendAddressPoolPropertiesFormat

const _property_types_BackendAddressPoolPropertiesFormat = Dict{Symbol,String}(Symbol("backendIPConfigurations")=>"Vector{NetworkInterfaceIPConfiguration2}", Symbol("loadBalancerBackendAddresses")=>"Vector{LoadBalancerBackendAddress}", Symbol("loadBalancingRules")=>"Vector{SubResource}", Symbol("outboundRule")=>"SubResource", Symbol("outboundRules")=>"Vector{SubResource}", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ BackendAddressPoolPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BackendAddressPoolPropertiesFormat[name]))}

function check_required(o::BackendAddressPoolPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ BackendAddressPoolPropertiesFormat }, name::Symbol, val)
end
