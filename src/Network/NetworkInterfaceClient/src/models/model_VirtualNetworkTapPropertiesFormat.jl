# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkTapPropertiesFormat
Virtual Network Tap properties.

    VirtualNetworkTapPropertiesFormat(;
        networkInterfaceTapConfigurations=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
        destinationNetworkInterfaceIPConfiguration=nothing,
        destinationLoadBalancerFrontEndIPConfiguration=nothing,
        destinationPort=nothing,
    )

    - networkInterfaceTapConfigurations::Vector{NetworkInterfaceTapConfiguration2} : Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
    - resourceGuid::String : The resource GUID property of the virtual network tap resource.
    - provisioningState::ProvisioningState
    - destinationNetworkInterfaceIPConfiguration::NetworkInterfaceIPConfiguration2
    - destinationLoadBalancerFrontEndIPConfiguration::FrontendIPConfiguration
    - destinationPort::Int64 : The VXLAN destination port that will receive the tapped traffic.
"""
Base.@kwdef mutable struct VirtualNetworkTapPropertiesFormat <: OpenAPI.APIModel
    networkInterfaceTapConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceTapConfiguration2} }
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    destinationNetworkInterfaceIPConfiguration = nothing # spec type: Union{ Nothing, NetworkInterfaceIPConfiguration2 }
    destinationLoadBalancerFrontEndIPConfiguration = nothing # spec type: Union{ Nothing, FrontendIPConfiguration }
    destinationPort::Union{Nothing, Int64} = nothing

    function VirtualNetworkTapPropertiesFormat(networkInterfaceTapConfigurations, resourceGuid, provisioningState, destinationNetworkInterfaceIPConfiguration, destinationLoadBalancerFrontEndIPConfiguration, destinationPort, )
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("networkInterfaceTapConfigurations"), networkInterfaceTapConfigurations)
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("resourceGuid"), resourceGuid)
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationNetworkInterfaceIPConfiguration"), destinationNetworkInterfaceIPConfiguration)
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationLoadBalancerFrontEndIPConfiguration"), destinationLoadBalancerFrontEndIPConfiguration)
        OpenAPI.validate_property(VirtualNetworkTapPropertiesFormat, Symbol("destinationPort"), destinationPort)
        return new(networkInterfaceTapConfigurations, resourceGuid, provisioningState, destinationNetworkInterfaceIPConfiguration, destinationLoadBalancerFrontEndIPConfiguration, destinationPort, )
    end
end # type VirtualNetworkTapPropertiesFormat

const _property_types_VirtualNetworkTapPropertiesFormat = Dict{Symbol,String}(Symbol("networkInterfaceTapConfigurations")=>"Vector{NetworkInterfaceTapConfiguration2}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("destinationNetworkInterfaceIPConfiguration")=>"NetworkInterfaceIPConfiguration2", Symbol("destinationLoadBalancerFrontEndIPConfiguration")=>"FrontendIPConfiguration", Symbol("destinationPort")=>"Int64", )
OpenAPI.property_type(::Type{ VirtualNetworkTapPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkTapPropertiesFormat[name]))}

function check_required(o::VirtualNetworkTapPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ VirtualNetworkTapPropertiesFormat }, name::Symbol, val)
end
