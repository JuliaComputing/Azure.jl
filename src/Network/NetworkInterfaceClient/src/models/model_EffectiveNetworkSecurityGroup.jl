# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EffectiveNetworkSecurityGroup
Effective network security group.

    EffectiveNetworkSecurityGroup(;
        networkSecurityGroup=nothing,
        association=nothing,
        effectiveSecurityRules=nothing,
        tagMap=nothing,
    )

    - networkSecurityGroup::SubResource
    - association::EffectiveNetworkSecurityGroupAssociation
    - effectiveSecurityRules::Vector{EffectiveNetworkSecurityRule} : A collection of effective security rules.
    - tagMap::String : Mapping of tags to list of IP Addresses included within the tag.
"""
Base.@kwdef mutable struct EffectiveNetworkSecurityGroup <: OpenAPI.APIModel
    networkSecurityGroup = nothing # spec type: Union{ Nothing, SubResource }
    association = nothing # spec type: Union{ Nothing, EffectiveNetworkSecurityGroupAssociation }
    effectiveSecurityRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EffectiveNetworkSecurityRule} }
    tagMap::Union{Nothing, String} = nothing

    function EffectiveNetworkSecurityGroup(networkSecurityGroup, association, effectiveSecurityRules, tagMap, )
        OpenAPI.validate_property(EffectiveNetworkSecurityGroup, Symbol("networkSecurityGroup"), networkSecurityGroup)
        OpenAPI.validate_property(EffectiveNetworkSecurityGroup, Symbol("association"), association)
        OpenAPI.validate_property(EffectiveNetworkSecurityGroup, Symbol("effectiveSecurityRules"), effectiveSecurityRules)
        OpenAPI.validate_property(EffectiveNetworkSecurityGroup, Symbol("tagMap"), tagMap)
        return new(networkSecurityGroup, association, effectiveSecurityRules, tagMap, )
    end
end # type EffectiveNetworkSecurityGroup

const _property_types_EffectiveNetworkSecurityGroup = Dict{Symbol,String}(Symbol("networkSecurityGroup")=>"SubResource", Symbol("association")=>"EffectiveNetworkSecurityGroupAssociation", Symbol("effectiveSecurityRules")=>"Vector{EffectiveNetworkSecurityRule}", Symbol("tagMap")=>"String", )
OpenAPI.property_type(::Type{ EffectiveNetworkSecurityGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EffectiveNetworkSecurityGroup[name]))}

function check_required(o::EffectiveNetworkSecurityGroup)
    true
end

function OpenAPI.validate_property(::Type{ EffectiveNetworkSecurityGroup }, name::Symbol, val)
end
