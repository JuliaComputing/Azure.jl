# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PrivateEndpointProperties
Properties of the private endpoint.

    PrivateEndpointProperties(;
        subnet=nothing,
        networkInterfaces=nothing,
        provisioningState=nothing,
        privateLinkServiceConnections=nothing,
        manualPrivateLinkServiceConnections=nothing,
        customDnsConfigs=nothing,
    )

    - subnet::Subnet
    - networkInterfaces::Vector{NetworkInterface} : An array of references to the network interfaces created for this private endpoint.
    - provisioningState::ProvisioningState
    - privateLinkServiceConnections::Vector{PrivateLinkServiceConnection} : A grouping of information about the connection to the remote resource.
    - manualPrivateLinkServiceConnections::Vector{PrivateLinkServiceConnection} : A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
    - customDnsConfigs::Vector{CustomDnsConfigPropertiesFormat} : An array of custom dns configurations.
"""
Base.@kwdef mutable struct PrivateEndpointProperties <: OpenAPI.APIModel
    subnet = nothing # spec type: Union{ Nothing, Subnet }
    networkInterfaces::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterface} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    privateLinkServiceConnections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PrivateLinkServiceConnection} }
    manualPrivateLinkServiceConnections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PrivateLinkServiceConnection} }
    customDnsConfigs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CustomDnsConfigPropertiesFormat} }

    function PrivateEndpointProperties(subnet, networkInterfaces, provisioningState, privateLinkServiceConnections, manualPrivateLinkServiceConnections, customDnsConfigs, )
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("subnet"), subnet)
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("networkInterfaces"), networkInterfaces)
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("privateLinkServiceConnections"), privateLinkServiceConnections)
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("manualPrivateLinkServiceConnections"), manualPrivateLinkServiceConnections)
        OpenAPI.validate_property(PrivateEndpointProperties, Symbol("customDnsConfigs"), customDnsConfigs)
        return new(subnet, networkInterfaces, provisioningState, privateLinkServiceConnections, manualPrivateLinkServiceConnections, customDnsConfigs, )
    end
end # type PrivateEndpointProperties

const _property_types_PrivateEndpointProperties = Dict{Symbol,String}(Symbol("subnet")=>"Subnet", Symbol("networkInterfaces")=>"Vector{NetworkInterface}", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateLinkServiceConnections")=>"Vector{PrivateLinkServiceConnection}", Symbol("manualPrivateLinkServiceConnections")=>"Vector{PrivateLinkServiceConnection}", Symbol("customDnsConfigs")=>"Vector{CustomDnsConfigPropertiesFormat}", )
OpenAPI.property_type(::Type{ PrivateEndpointProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrivateEndpointProperties[name]))}

function check_required(o::PrivateEndpointProperties)
    true
end

function OpenAPI.validate_property(::Type{ PrivateEndpointProperties }, name::Symbol, val)
end
