# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct LoadBalancerBackendAddress <: SwaggerModel
    properties::Any # spec type: Union{ Nothing, LoadBalancerBackendAddressPropertiesFormat } # spec name: properties
    name::Any # spec type: Union{ Nothing, String } # spec name: name

    function LoadBalancerBackendAddress(;properties=nothing, name=nothing)
        o = new()
        validate_property(LoadBalancerBackendAddress, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        validate_property(LoadBalancerBackendAddress, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        o
    end
end # type LoadBalancerBackendAddress

const _property_map_LoadBalancerBackendAddress = Dict{Symbol,Symbol}(Symbol("properties")=>Symbol("properties"), Symbol("name")=>Symbol("name"))
const _property_types_LoadBalancerBackendAddress = Dict{Symbol,String}(Symbol("properties")=>"LoadBalancerBackendAddressPropertiesFormat", Symbol("name")=>"String")
Base.propertynames(::Type{ LoadBalancerBackendAddress }) = collect(keys(_property_map_LoadBalancerBackendAddress))
Swagger.property_type(::Type{ LoadBalancerBackendAddress }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LoadBalancerBackendAddress[name]))}
Swagger.field_name(::Type{ LoadBalancerBackendAddress }, property_name::Symbol) =  _property_map_LoadBalancerBackendAddress[property_name]

function check_required(o::LoadBalancerBackendAddress)
    true
end

function validate_property(::Type{ LoadBalancerBackendAddress }, name::Symbol, val)
end
