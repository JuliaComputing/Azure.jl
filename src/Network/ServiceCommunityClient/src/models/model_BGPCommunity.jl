# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BGPCommunity
Contains bgp community information offered in Service Community resources.

    BGPCommunity(;
        serviceSupportedRegion=nothing,
        communityName=nothing,
        communityValue=nothing,
        communityPrefixes=nothing,
        isAuthorizedToUse=nothing,
        serviceGroup=nothing,
    )

    - serviceSupportedRegion::String : The region which the service support. e.g. For O365, region is Global.
    - communityName::String : The name of the bgp community. e.g. Skype.
    - communityValue::String : The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
    - communityPrefixes::Vector{String} : The prefixes that the bgp community contains.
    - isAuthorizedToUse::Bool : Customer is authorized to use bgp community or not.
    - serviceGroup::String : The service group of the bgp community contains.
"""
Base.@kwdef mutable struct BGPCommunity <: OpenAPI.APIModel
    serviceSupportedRegion::Union{Nothing, String} = nothing
    communityName::Union{Nothing, String} = nothing
    communityValue::Union{Nothing, String} = nothing
    communityPrefixes::Union{Nothing, Vector{String}} = nothing
    isAuthorizedToUse::Union{Nothing, Bool} = nothing
    serviceGroup::Union{Nothing, String} = nothing

    function BGPCommunity(serviceSupportedRegion, communityName, communityValue, communityPrefixes, isAuthorizedToUse, serviceGroup, )
        o = new(serviceSupportedRegion, communityName, communityValue, communityPrefixes, isAuthorizedToUse, serviceGroup, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type BGPCommunity

const _property_types_BGPCommunity = Dict{Symbol,String}(Symbol("serviceSupportedRegion")=>"String", Symbol("communityName")=>"String", Symbol("communityValue")=>"String", Symbol("communityPrefixes")=>"Vector{String}", Symbol("isAuthorizedToUse")=>"Bool", Symbol("serviceGroup")=>"String", )
OpenAPI.property_type(::Type{ BGPCommunity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BGPCommunity[name]))}

function OpenAPI.check_required(o::BGPCommunity)
    true
end

function OpenAPI.validate_properties(o::BGPCommunity)
    OpenAPI.validate_property(BGPCommunity, Symbol("serviceSupportedRegion"), o.serviceSupportedRegion)
    OpenAPI.validate_property(BGPCommunity, Symbol("communityName"), o.communityName)
    OpenAPI.validate_property(BGPCommunity, Symbol("communityValue"), o.communityValue)
    OpenAPI.validate_property(BGPCommunity, Symbol("communityPrefixes"), o.communityPrefixes)
    OpenAPI.validate_property(BGPCommunity, Symbol("isAuthorizedToUse"), o.isAuthorizedToUse)
    OpenAPI.validate_property(BGPCommunity, Symbol("serviceGroup"), o.serviceGroup)
end

function OpenAPI.validate_property(::Type{ BGPCommunity }, name::Symbol, val)






end
