# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct IPConfigurationProfilePropertiesFormat <: SwaggerModel
    subnet::Any # spec type: Union{ Nothing, Subnet2 } # spec name: subnet
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function IPConfigurationProfilePropertiesFormat(;subnet=nothing, provisioningState=nothing)
        o = new()
        validate_property(IPConfigurationProfilePropertiesFormat, Symbol("subnet"), subnet)
        setfield!(o, Symbol("subnet"), subnet)
        validate_property(IPConfigurationProfilePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type IPConfigurationProfilePropertiesFormat

const _property_map_IPConfigurationProfilePropertiesFormat = Dict{Symbol,Symbol}(Symbol("subnet")=>Symbol("subnet"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_IPConfigurationProfilePropertiesFormat = Dict{Symbol,String}(Symbol("subnet")=>"Subnet2", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ IPConfigurationProfilePropertiesFormat }) = collect(keys(_property_map_IPConfigurationProfilePropertiesFormat))
Swagger.property_type(::Type{ IPConfigurationProfilePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IPConfigurationProfilePropertiesFormat[name]))}
Swagger.field_name(::Type{ IPConfigurationProfilePropertiesFormat }, property_name::Symbol) =  _property_map_IPConfigurationProfilePropertiesFormat[property_name]

function check_required(o::IPConfigurationProfilePropertiesFormat)
    true
end

function validate_property(::Type{ IPConfigurationProfilePropertiesFormat }, name::Symbol, val)
end
