# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkEncryption
Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet.

    VirtualNetworkEncryption(;
        enabled=nothing,
        enforcement=nothing,
    )

    - enabled::Bool : Indicates if encryption is enabled on the virtual network.
    - enforcement::String : If the encrypted VNet allows VM that does not support encryption. This field is for future support, AllowUnencrypted is the only supported value at general availability.
"""
Base.@kwdef mutable struct VirtualNetworkEncryption <: OpenAPI.APIModel
    enabled::Union{Nothing, Bool} = nothing
    enforcement::Union{Nothing, String} = nothing

    function VirtualNetworkEncryption(enabled, enforcement, )
        o = new(enabled, enforcement, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualNetworkEncryption

const _property_types_VirtualNetworkEncryption = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("enforcement")=>"String", )
OpenAPI.property_type(::Type{ VirtualNetworkEncryption }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkEncryption[name]))}

function OpenAPI.check_required(o::VirtualNetworkEncryption)
    o.enabled === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::VirtualNetworkEncryption)
    OpenAPI.validate_property(VirtualNetworkEncryption, Symbol("enabled"), o.enabled)
    OpenAPI.validate_property(VirtualNetworkEncryption, Symbol("enforcement"), o.enforcement)
end

function OpenAPI.validate_property(::Type{ VirtualNetworkEncryption }, name::Symbol, val)


    if name === Symbol("enforcement")
        OpenAPI.validate_param(name, "VirtualNetworkEncryption", :enum, val, ["DropUnencrypted", "AllowUnencrypted"])
    end

end
