# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ServiceEndpointPropertiesFormat_2
The service endpoint properties.

    ServiceEndpointPropertiesFormat2(;
        service=nothing,
        locations=nothing,
        provisioningState=nothing,
    )

    - service::String : The type of the endpoint service.
    - locations::Vector{String} : A list of locations.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ServiceEndpointPropertiesFormat2 <: OpenAPI.APIModel
    service::Union{Nothing, String} = nothing
    locations::Union{Nothing, Vector{String}} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ServiceEndpointPropertiesFormat2(service, locations, provisioningState, )
        OpenAPI.validate_property(ServiceEndpointPropertiesFormat2, Symbol("service"), service)
        OpenAPI.validate_property(ServiceEndpointPropertiesFormat2, Symbol("locations"), locations)
        OpenAPI.validate_property(ServiceEndpointPropertiesFormat2, Symbol("provisioningState"), provisioningState)
        return new(service, locations, provisioningState, )
    end
end # type ServiceEndpointPropertiesFormat2

const _property_types_ServiceEndpointPropertiesFormat2 = Dict{Symbol,String}(Symbol("service")=>"String", Symbol("locations")=>"Vector{String}", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ServiceEndpointPropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ServiceEndpointPropertiesFormat2[name]))}

function check_required(o::ServiceEndpointPropertiesFormat2)
    true
end

function OpenAPI.validate_property(::Type{ ServiceEndpointPropertiesFormat2 }, name::Symbol, val)
end
