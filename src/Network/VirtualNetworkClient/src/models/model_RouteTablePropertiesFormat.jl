# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RouteTablePropertiesFormat
Route Table resource.

    RouteTablePropertiesFormat(;
        routes=nothing,
        subnets=nothing,
        disableBgpRoutePropagation=nothing,
        provisioningState=nothing,
    )

    - routes::Vector{Route} : Collection of routes contained within a route table.
    - subnets::Vector{Subnet2} : A collection of references to subnets.
    - disableBgpRoutePropagation::Bool : Whether to disable the routes learned by BGP on that route table. True means disable.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct RouteTablePropertiesFormat <: OpenAPI.APIModel
    routes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Route} }
    subnets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Subnet2} }
    disableBgpRoutePropagation::Union{Nothing, Bool} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function RouteTablePropertiesFormat(routes, subnets, disableBgpRoutePropagation, provisioningState, )
        OpenAPI.validate_property(RouteTablePropertiesFormat, Symbol("routes"), routes)
        OpenAPI.validate_property(RouteTablePropertiesFormat, Symbol("subnets"), subnets)
        OpenAPI.validate_property(RouteTablePropertiesFormat, Symbol("disableBgpRoutePropagation"), disableBgpRoutePropagation)
        OpenAPI.validate_property(RouteTablePropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(routes, subnets, disableBgpRoutePropagation, provisioningState, )
    end
end # type RouteTablePropertiesFormat

const _property_types_RouteTablePropertiesFormat = Dict{Symbol,String}(Symbol("routes")=>"Vector{Route}", Symbol("subnets")=>"Vector{Subnet2}", Symbol("disableBgpRoutePropagation")=>"Bool", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ RouteTablePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RouteTablePropertiesFormat[name]))}

function check_required(o::RouteTablePropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ RouteTablePropertiesFormat }, name::Symbol, val)
end
