# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DdosSettings
Contains the DDoS protection settings of the public IP.

    DdosSettings(;
        ddosCustomPolicy=nothing,
        protectionCoverage=nothing,
        protectedIP=nothing,
    )

    - ddosCustomPolicy::SubResource
    - protectionCoverage::String : The DDoS protection policy customizability of the public IP. Only standard coverage will have the ability to be customized.
    - protectedIP::Bool : Enables DDoS protection on the public IP.
"""
Base.@kwdef mutable struct DdosSettings <: OpenAPI.APIModel
    ddosCustomPolicy = nothing # spec type: Union{ Nothing, SubResource }
    protectionCoverage::Union{Nothing, String} = nothing
    protectedIP::Union{Nothing, Bool} = nothing

    function DdosSettings(ddosCustomPolicy, protectionCoverage, protectedIP, )
        OpenAPI.validate_property(DdosSettings, Symbol("ddosCustomPolicy"), ddosCustomPolicy)
        OpenAPI.validate_property(DdosSettings, Symbol("protectionCoverage"), protectionCoverage)
        OpenAPI.validate_property(DdosSettings, Symbol("protectedIP"), protectedIP)
        return new(ddosCustomPolicy, protectionCoverage, protectedIP, )
    end
end # type DdosSettings

const _property_types_DdosSettings = Dict{Symbol,String}(Symbol("ddosCustomPolicy")=>"SubResource", Symbol("protectionCoverage")=>"String", Symbol("protectedIP")=>"Bool", )
OpenAPI.property_type(::Type{ DdosSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DdosSettings[name]))}

function check_required(o::DdosSettings)
    true
end

function OpenAPI.validate_property(::Type{ DdosSettings }, name::Symbol, val)
    if name === Symbol("protectionCoverage")
        OpenAPI.validate_param(name, "DdosSettings", :enum, val, ["Basic", "Standard"])
    end
end
