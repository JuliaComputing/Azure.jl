# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NatRulePortMapping
Individual port mappings for inbound NAT rule created for backend pool.

    NatRulePortMapping(;
        inboundNatRuleName=nothing,
        frontendPort=nothing,
        backendPort=nothing,
    )

    - inboundNatRuleName::String : Name of inbound NAT rule.
    - frontendPort::Int64 : Frontend port.
    - backendPort::Int64 : Backend port.
"""
Base.@kwdef mutable struct NatRulePortMapping <: OpenAPI.APIModel
    inboundNatRuleName::Union{Nothing, String} = nothing
    frontendPort::Union{Nothing, Int64} = nothing
    backendPort::Union{Nothing, Int64} = nothing

    function NatRulePortMapping(inboundNatRuleName, frontendPort, backendPort, )
        o = new(inboundNatRuleName, frontendPort, backendPort, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type NatRulePortMapping

const _property_types_NatRulePortMapping = Dict{Symbol,String}(Symbol("inboundNatRuleName")=>"String", Symbol("frontendPort")=>"Int64", Symbol("backendPort")=>"Int64", )
OpenAPI.property_type(::Type{ NatRulePortMapping }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NatRulePortMapping[name]))}

function OpenAPI.check_required(o::NatRulePortMapping)
    true
end

function OpenAPI.validate_properties(o::NatRulePortMapping)
    OpenAPI.validate_property(NatRulePortMapping, Symbol("inboundNatRuleName"), o.inboundNatRuleName)
    OpenAPI.validate_property(NatRulePortMapping, Symbol("frontendPort"), o.frontendPort)
    OpenAPI.validate_property(NatRulePortMapping, Symbol("backendPort"), o.backendPort)
end

function OpenAPI.validate_property(::Type{ NatRulePortMapping }, name::Symbol, val)


    if name === Symbol("frontendPort")
        OpenAPI.validate_param(name, "NatRulePortMapping", :format, val, "int32")
    end

    if name === Symbol("backendPort")
        OpenAPI.validate_param(name, "NatRulePortMapping", :format, val, "int32")
    end
end
