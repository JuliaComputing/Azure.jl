# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkPeeringPropertiesFormat
Properties of the virtual network peering.

    VirtualNetworkPeeringPropertiesFormat(;
        allowVirtualNetworkAccess=nothing,
        allowForwardedTraffic=nothing,
        allowGatewayTransit=nothing,
        useRemoteGateways=nothing,
        remoteVirtualNetwork=nothing,
        remoteAddressSpace=nothing,
        peeringState=nothing,
        provisioningState=nothing,
    )

    - allowVirtualNetworkAccess::Bool : Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
    - allowForwardedTraffic::Bool : Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
    - allowGatewayTransit::Bool : If gateway links can be used in remote virtual networking to link to this virtual network.
    - useRemoteGateways::Bool : If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
    - remoteVirtualNetwork::SubResource
    - remoteAddressSpace::AddressSpace
    - peeringState::String : The status of the virtual network peering.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct VirtualNetworkPeeringPropertiesFormat <: OpenAPI.APIModel
    allowVirtualNetworkAccess::Union{Nothing, Bool} = nothing
    allowForwardedTraffic::Union{Nothing, Bool} = nothing
    allowGatewayTransit::Union{Nothing, Bool} = nothing
    useRemoteGateways::Union{Nothing, Bool} = nothing
    remoteVirtualNetwork = nothing # spec type: Union{ Nothing, SubResource }
    remoteAddressSpace = nothing # spec type: Union{ Nothing, AddressSpace }
    peeringState::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function VirtualNetworkPeeringPropertiesFormat(allowVirtualNetworkAccess, allowForwardedTraffic, allowGatewayTransit, useRemoteGateways, remoteVirtualNetwork, remoteAddressSpace, peeringState, provisioningState, )
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("allowVirtualNetworkAccess"), allowVirtualNetworkAccess)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("allowForwardedTraffic"), allowForwardedTraffic)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("allowGatewayTransit"), allowGatewayTransit)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("useRemoteGateways"), useRemoteGateways)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("remoteVirtualNetwork"), remoteVirtualNetwork)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("remoteAddressSpace"), remoteAddressSpace)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("peeringState"), peeringState)
        OpenAPI.validate_property(VirtualNetworkPeeringPropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(allowVirtualNetworkAccess, allowForwardedTraffic, allowGatewayTransit, useRemoteGateways, remoteVirtualNetwork, remoteAddressSpace, peeringState, provisioningState, )
    end
end # type VirtualNetworkPeeringPropertiesFormat

const _property_types_VirtualNetworkPeeringPropertiesFormat = Dict{Symbol,String}(Symbol("allowVirtualNetworkAccess")=>"Bool", Symbol("allowForwardedTraffic")=>"Bool", Symbol("allowGatewayTransit")=>"Bool", Symbol("useRemoteGateways")=>"Bool", Symbol("remoteVirtualNetwork")=>"SubResource", Symbol("remoteAddressSpace")=>"AddressSpace", Symbol("peeringState")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ VirtualNetworkPeeringPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkPeeringPropertiesFormat[name]))}

function check_required(o::VirtualNetworkPeeringPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ VirtualNetworkPeeringPropertiesFormat }, name::Symbol, val)
    if name === Symbol("peeringState")
        OpenAPI.validate_param(name, "VirtualNetworkPeeringPropertiesFormat", :enum, val, ["Initiated", "Connected", "Disconnected"])
    end
end
