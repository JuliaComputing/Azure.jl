# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkUsage
Usage details for subnet.

    VirtualNetworkUsage(;
        currentValue=nothing,
        id=nothing,
        limit=nothing,
        name=nothing,
        unit=nothing,
    )

    - currentValue::Float64 : Indicates number of IPs used from the Subnet.
    - id::String : Subnet identifier.
    - limit::Float64 : Indicates the size of the subnet.
    - name::VirtualNetworkUsageName
    - unit::String : Usage units. Returns &#39;Count&#39;.
"""
Base.@kwdef mutable struct VirtualNetworkUsage <: OpenAPI.APIModel
    currentValue::Union{Nothing, Float64} = nothing
    id::Union{Nothing, String} = nothing
    limit::Union{Nothing, Float64} = nothing
    name = nothing # spec type: Union{ Nothing, VirtualNetworkUsageName }
    unit::Union{Nothing, String} = nothing

    function VirtualNetworkUsage(currentValue, id, limit, name, unit, )
        OpenAPI.validate_property(VirtualNetworkUsage, Symbol("currentValue"), currentValue)
        OpenAPI.validate_property(VirtualNetworkUsage, Symbol("id"), id)
        OpenAPI.validate_property(VirtualNetworkUsage, Symbol("limit"), limit)
        OpenAPI.validate_property(VirtualNetworkUsage, Symbol("name"), name)
        OpenAPI.validate_property(VirtualNetworkUsage, Symbol("unit"), unit)
        return new(currentValue, id, limit, name, unit, )
    end
end # type VirtualNetworkUsage

const _property_types_VirtualNetworkUsage = Dict{Symbol,String}(Symbol("currentValue")=>"Float64", Symbol("id")=>"String", Symbol("limit")=>"Float64", Symbol("name")=>"VirtualNetworkUsageName", Symbol("unit")=>"String", )
OpenAPI.property_type(::Type{ VirtualNetworkUsage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkUsage[name]))}

function check_required(o::VirtualNetworkUsage)
    true
end

function OpenAPI.validate_property(::Type{ VirtualNetworkUsage }, name::Symbol, val)
    if name === Symbol("currentValue")
        OpenAPI.validate_param(name, "VirtualNetworkUsage", :format, val, "double")
    end
    if name === Symbol("limit")
        OpenAPI.validate_param(name, "VirtualNetworkUsage", :format, val, "double")
    end
end
