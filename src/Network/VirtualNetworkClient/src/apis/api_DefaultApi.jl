# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DefaultApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DefaultApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DefaultApi }) = "https://management.azure.com"

const _returntypes_resource_navigation_links_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ResourceNavigationLinksListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_resource_navigation_links_list(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_resource_navigation_links_list_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/ResourceNavigationLinks", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a list of resource navigation links for a subnet.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ResourceNavigationLinksListResult, OpenAPI.Clients.ApiResponse
"""
function resource_navigation_links_list(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_navigation_links_list(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function resource_navigation_links_list(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_resource_navigation_links_list(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_service_association_links_list_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ServiceAssociationLinksListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_service_association_links_list(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_service_association_links_list_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/ServiceAssociationLinks", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a list of service association links for a subnet.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ServiceAssociationLinksListResult, OpenAPI.Clients.ApiResponse
"""
function service_association_links_list(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_service_association_links_list(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function service_association_links_list(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_service_association_links_list(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subnets_prepare_network_policies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_prepare_network_policies(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, prepare_network_policies_request_parameters::PrepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_subnets_prepare_network_policies_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/PrepareNetworkPolicies", ["azure_auth", ], prepare_network_policies_request_parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Prepares a subnet by applying network intent policies.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- prepare_network_policies_request_parameters::PrepareNetworkPoliciesRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function subnets_prepare_network_policies(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, prepare_network_policies_request_parameters::PrepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = _oacinternal_subnets_prepare_network_policies(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, prepare_network_policies_request_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_prepare_network_policies(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, prepare_network_policies_request_parameters::PrepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = _oacinternal_subnets_prepare_network_policies(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, prepare_network_policies_request_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subnets_unprepare_network_policies_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_unprepare_network_policies(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, unprepare_network_policies_request_parameters::UnprepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_subnets_unprepare_network_policies_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}/UnprepareNetworkPolicies", ["azure_auth", ], unprepare_network_policies_request_parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Unprepares a subnet by removing network intent policies.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- unprepare_network_policies_request_parameters::UnprepareNetworkPoliciesRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function subnets_unprepare_network_policies(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, unprepare_network_policies_request_parameters::UnprepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = _oacinternal_subnets_unprepare_network_policies(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, unprepare_network_policies_request_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_unprepare_network_policies(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, unprepare_network_policies_request_parameters::UnprepareNetworkPoliciesRequest; _mediaType=nothing)
    _ctx = _oacinternal_subnets_unprepare_network_policies(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, unprepare_network_policies_request_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_networks_check_i_p_address_availability_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => IPAddressAvailabilityResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_networks_check_i_p_address_availability(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, ip_address::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_networks_check_i_p_address_availability_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/CheckIPAddressAvailability", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "ipAddress", ip_address)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Checks whether a private IP address is available for use.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- ip_address::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: IPAddressAvailabilityResult, OpenAPI.Clients.ApiResponse
"""
function virtual_networks_check_i_p_address_availability(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, ip_address::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_networks_check_i_p_address_availability(_api, resource_group_name, virtual_network_name, ip_address, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_networks_check_i_p_address_availability(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, ip_address::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_networks_check_i_p_address_availability(_api, resource_group_name, virtual_network_name, ip_address, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_networks_list_usage_DefaultApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualNetworkListUsageResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_networks_list_usage(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_networks_list_usage_DefaultApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/usages", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists usage stats.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualNetworkListUsageResult, OpenAPI.Clients.ApiResponse
"""
function virtual_networks_list_usage(_api::DefaultApi, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_networks_list_usage(_api, resource_group_name, virtual_network_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_networks_list_usage(_api::DefaultApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_networks_list_usage(_api, resource_group_name, virtual_network_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export resource_navigation_links_list
export service_association_links_list
export subnets_prepare_network_policies
export subnets_unprepare_network_policies
export virtual_networks_check_i_p_address_availability
export virtual_networks_list_usage
