# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct SubnetsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `SubnetsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ SubnetsApi }) = "https://management.azure.com"

const _returntypes_subnets_create_or_update_SubnetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Subnet,
    Regex("^" * replace("201", "x"=>".") * "\$") => Subnet,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_create_or_update(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, subnet_parameters::Subnet; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_subnets_create_or_update_SubnetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}", ["azure_auth", ], subnet_parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a subnet in the specified virtual network.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- subnet_parameters::Subnet (required)

Return: Subnet, OpenAPI.Clients.ApiResponse
"""
function subnets_create_or_update(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, subnet_parameters::Subnet; _mediaType=nothing)
    _ctx = _oacinternal_subnets_create_or_update(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, subnet_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_create_or_update(_api::SubnetsApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String, subnet_parameters::Subnet; _mediaType=nothing)
    _ctx = _oacinternal_subnets_create_or_update(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id, subnet_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subnets_delete_SubnetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_delete(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_subnets_delete_SubnetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified subnet.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function subnets_delete(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_subnets_delete(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_delete(_api::SubnetsApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_subnets_delete(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subnets_get_SubnetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Subnet,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_get(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_subnets_get_SubnetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subnetName", subnet_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified subnet by virtual network and resource group.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- subnet_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: Subnet, OpenAPI.Clients.ApiResponse
"""
function subnets_get(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subnets_get(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_get(_api::SubnetsApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, subnet_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_subnets_get(_api, resource_group_name, virtual_network_name, subnet_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_subnets_list_SubnetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SubnetListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_subnets_list(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_subnets_list_SubnetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "virtualNetworkName", virtual_network_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all subnets in a virtual network.

Params:
- resource_group_name::String (required)
- virtual_network_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: SubnetListResult, OpenAPI.Clients.ApiResponse
"""
function subnets_list(_api::SubnetsApi, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_subnets_list(_api, resource_group_name, virtual_network_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function subnets_list(_api::SubnetsApi, response_stream::Channel, resource_group_name::String, virtual_network_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_subnets_list(_api, resource_group_name, virtual_network_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export subnets_create_or_update
export subnets_delete
export subnets_get
export subnets_list
