# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectivityParameters
Parameters that determine how the connectivity check will be performed.

    ConnectivityParameters(;
        source=nothing,
        destination=nothing,
        protocol=nothing,
        protocolConfiguration=nothing,
        preferredIPVersion=nothing,
    )

    - source::ConnectivitySource
    - destination::ConnectivityDestination
    - protocol::String : Network protocol.
    - protocolConfiguration::ProtocolConfiguration
    - preferredIPVersion::IPVersion
"""
Base.@kwdef mutable struct ConnectivityParameters <: OpenAPI.APIModel
    source = nothing # spec type: Union{ Nothing, ConnectivitySource }
    destination = nothing # spec type: Union{ Nothing, ConnectivityDestination }
    protocol::Union{Nothing, String} = nothing
    protocolConfiguration = nothing # spec type: Union{ Nothing, ProtocolConfiguration }
    preferredIPVersion = nothing # spec type: Union{ Nothing, IPVersion }

    function ConnectivityParameters(source, destination, protocol, protocolConfiguration, preferredIPVersion, )
        OpenAPI.validate_property(ConnectivityParameters, Symbol("source"), source)
        OpenAPI.validate_property(ConnectivityParameters, Symbol("destination"), destination)
        OpenAPI.validate_property(ConnectivityParameters, Symbol("protocol"), protocol)
        OpenAPI.validate_property(ConnectivityParameters, Symbol("protocolConfiguration"), protocolConfiguration)
        OpenAPI.validate_property(ConnectivityParameters, Symbol("preferredIPVersion"), preferredIPVersion)
        return new(source, destination, protocol, protocolConfiguration, preferredIPVersion, )
    end
end # type ConnectivityParameters

const _property_types_ConnectivityParameters = Dict{Symbol,String}(Symbol("source")=>"ConnectivitySource", Symbol("destination")=>"ConnectivityDestination", Symbol("protocol")=>"String", Symbol("protocolConfiguration")=>"ProtocolConfiguration", Symbol("preferredIPVersion")=>"IPVersion", )
OpenAPI.property_type(::Type{ ConnectivityParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectivityParameters[name]))}

function check_required(o::ConnectivityParameters)
    o.source === nothing && (return false)
    o.destination === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ConnectivityParameters }, name::Symbol, val)
    if name === Symbol("protocol")
        OpenAPI.validate_param(name, "ConnectivityParameters", :enum, val, ["Tcp", "Http", "Https", "Icmp"])
    end
end
