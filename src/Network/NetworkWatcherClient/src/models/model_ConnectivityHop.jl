# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectivityHop
Information about a hop between the source and the destination.

    ConnectivityHop(;
        type=nothing,
        id=nothing,
        address=nothing,
        resourceId=nothing,
        nextHopIds=nothing,
        previousHopIds=nothing,
        links=nothing,
        previousLinks=nothing,
        issues=nothing,
    )

    - type::String : The type of the hop.
    - id::String : The ID of the hop.
    - address::String : The IP address of the hop.
    - resourceId::String : The ID of the resource corresponding to this hop.
    - nextHopIds::Vector{String} : List of next hop identifiers.
    - previousHopIds::Vector{String} : List of previous hop identifiers.
    - links::Vector{HopLink} : List of hop links.
    - previousLinks::Vector{HopLink} : List of previous hop links.
    - issues::Vector{ConnectivityIssue} : List of issues.
"""
Base.@kwdef mutable struct ConnectivityHop <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    address::Union{Nothing, String} = nothing
    resourceId::Union{Nothing, String} = nothing
    nextHopIds::Union{Nothing, Vector{String}} = nothing
    previousHopIds::Union{Nothing, Vector{String}} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{HopLink} }
    previousLinks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{HopLink} }
    issues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ConnectivityIssue} }

    function ConnectivityHop(type, id, address, resourceId, nextHopIds, previousHopIds, links, previousLinks, issues, )
        o = new(type, id, address, resourceId, nextHopIds, previousHopIds, links, previousLinks, issues, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ConnectivityHop

const _property_types_ConnectivityHop = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("id")=>"String", Symbol("address")=>"String", Symbol("resourceId")=>"String", Symbol("nextHopIds")=>"Vector{String}", Symbol("previousHopIds")=>"Vector{String}", Symbol("links")=>"Vector{HopLink}", Symbol("previousLinks")=>"Vector{HopLink}", Symbol("issues")=>"Vector{ConnectivityIssue}", )
OpenAPI.property_type(::Type{ ConnectivityHop }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectivityHop[name]))}

function OpenAPI.check_required(o::ConnectivityHop)
    true
end

function OpenAPI.validate_properties(o::ConnectivityHop)
    OpenAPI.validate_property(ConnectivityHop, Symbol("type"), o.type)
    OpenAPI.validate_property(ConnectivityHop, Symbol("id"), o.id)
    OpenAPI.validate_property(ConnectivityHop, Symbol("address"), o.address)
    OpenAPI.validate_property(ConnectivityHop, Symbol("resourceId"), o.resourceId)
    OpenAPI.validate_property(ConnectivityHop, Symbol("nextHopIds"), o.nextHopIds)
    OpenAPI.validate_property(ConnectivityHop, Symbol("previousHopIds"), o.previousHopIds)
    OpenAPI.validate_property(ConnectivityHop, Symbol("links"), o.links)
    OpenAPI.validate_property(ConnectivityHop, Symbol("previousLinks"), o.previousLinks)
    OpenAPI.validate_property(ConnectivityHop, Symbol("issues"), o.issues)
end

function OpenAPI.validate_property(::Type{ ConnectivityHop }, name::Symbol, val)









end
