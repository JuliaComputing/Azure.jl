# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PacketCaptureMachineScope
A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.

    PacketCaptureMachineScope(;
        include=nothing,
        exclude=nothing,
    )

    - include::Vector{String} : List of AzureVMSS instances to run packet capture on.
    - exclude::Vector{String} : List of AzureVMSS instances which has to be excluded from the AzureVMSS from running packet capture.
"""
Base.@kwdef mutable struct PacketCaptureMachineScope <: OpenAPI.APIModel
    include::Union{Nothing, Vector{String}} = nothing
    exclude::Union{Nothing, Vector{String}} = nothing

    function PacketCaptureMachineScope(include, exclude, )
        o = new(include, exclude, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PacketCaptureMachineScope

const _property_types_PacketCaptureMachineScope = Dict{Symbol,String}(Symbol("include")=>"Vector{String}", Symbol("exclude")=>"Vector{String}", )
OpenAPI.property_type(::Type{ PacketCaptureMachineScope }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PacketCaptureMachineScope[name]))}

function OpenAPI.check_required(o::PacketCaptureMachineScope)
    true
end

function OpenAPI.validate_properties(o::PacketCaptureMachineScope)
    OpenAPI.validate_property(PacketCaptureMachineScope, Symbol("include"), o.include)
    OpenAPI.validate_property(PacketCaptureMachineScope, Symbol("exclude"), o.exclude)
end

function OpenAPI.validate_property(::Type{ PacketCaptureMachineScope }, name::Symbol, val)


end
