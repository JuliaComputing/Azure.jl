# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AvailableProvidersListParameters
Constraints that determine the list of available Internet service providers.

    AvailableProvidersListParameters(;
        azureLocations=nothing,
        country=nothing,
        state=nothing,
        city=nothing,
    )

    - azureLocations::Vector{String} : A list of Azure regions.
    - country::String : The country for available providers list.
    - state::String : The state for available providers list.
    - city::String : The city or town for available providers list.
"""
Base.@kwdef mutable struct AvailableProvidersListParameters <: OpenAPI.APIModel
    azureLocations::Union{Nothing, Vector{String}} = nothing
    country::Union{Nothing, String} = nothing
    state::Union{Nothing, String} = nothing
    city::Union{Nothing, String} = nothing

    function AvailableProvidersListParameters(azureLocations, country, state, city, )
        OpenAPI.validate_property(AvailableProvidersListParameters, Symbol("azureLocations"), azureLocations)
        OpenAPI.validate_property(AvailableProvidersListParameters, Symbol("country"), country)
        OpenAPI.validate_property(AvailableProvidersListParameters, Symbol("state"), state)
        OpenAPI.validate_property(AvailableProvidersListParameters, Symbol("city"), city)
        return new(azureLocations, country, state, city, )
    end
end # type AvailableProvidersListParameters

const _property_types_AvailableProvidersListParameters = Dict{Symbol,String}(Symbol("azureLocations")=>"Vector{String}", Symbol("country")=>"String", Symbol("state")=>"String", Symbol("city")=>"String", )
OpenAPI.property_type(::Type{ AvailableProvidersListParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersListParameters[name]))}

function check_required(o::AvailableProvidersListParameters)
    true
end

function OpenAPI.validate_property(::Type{ AvailableProvidersListParameters }, name::Symbol, val)
end
