# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AvailableProvidersListCountry
Country details.

    AvailableProvidersListCountry(;
        countryName=nothing,
        providers=nothing,
        states=nothing,
    )

    - countryName::String : The country name.
    - providers::Vector{String} : A list of Internet service providers.
    - states::Vector{AvailableProvidersListState} : List of available states in the country.
"""
Base.@kwdef mutable struct AvailableProvidersListCountry <: OpenAPI.APIModel
    countryName::Union{Nothing, String} = nothing
    providers::Union{Nothing, Vector{String}} = nothing
    states::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AvailableProvidersListState} }

    function AvailableProvidersListCountry(countryName, providers, states, )
        o = new(countryName, providers, states, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AvailableProvidersListCountry

const _property_types_AvailableProvidersListCountry = Dict{Symbol,String}(Symbol("countryName")=>"String", Symbol("providers")=>"Vector{String}", Symbol("states")=>"Vector{AvailableProvidersListState}", )
OpenAPI.property_type(::Type{ AvailableProvidersListCountry }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersListCountry[name]))}

function OpenAPI.check_required(o::AvailableProvidersListCountry)
    true
end

function OpenAPI.validate_properties(o::AvailableProvidersListCountry)
    OpenAPI.validate_property(AvailableProvidersListCountry, Symbol("countryName"), o.countryName)
    OpenAPI.validate_property(AvailableProvidersListCountry, Symbol("providers"), o.providers)
    OpenAPI.validate_property(AvailableProvidersListCountry, Symbol("states"), o.states)
end

function OpenAPI.validate_property(::Type{ AvailableProvidersListCountry }, name::Symbol, val)



end
