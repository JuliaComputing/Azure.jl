# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PacketCaptureResultProperties
The properties of a packet capture session.

    PacketCaptureResultProperties(;
        provisioningState=nothing,
        target=nothing,
        bytesToCapturePerPacket=nothing,
        totalBytesPerSession=nothing,
        timeLimitInSeconds=nothing,
        storageLocation=nothing,
        filters=nothing,
    )

    - provisioningState::Any
    - target::String : The ID of the targeted resource, only VM is currently supported.
    - bytesToCapturePerPacket::Int64 : Number of bytes captured per packet, the remaining bytes are truncated.
    - totalBytesPerSession::Int64 : Maximum size of the capture output.
    - timeLimitInSeconds::Int64 : Maximum duration of the capture session in seconds.
    - storageLocation::PacketCaptureStorageLocation
    - filters::Vector{PacketCaptureFilter} : A list of packet capture filters.
"""
Base.@kwdef mutable struct PacketCaptureResultProperties <: OpenAPI.APIModel
    provisioningState::Union{Nothing, Any} = nothing
    target::Union{Nothing, String} = nothing
    bytesToCapturePerPacket::Union{Nothing, Int64} = nothing
    totalBytesPerSession::Union{Nothing, Int64} = nothing
    timeLimitInSeconds::Union{Nothing, Int64} = nothing
    storageLocation = nothing # spec type: Union{ Nothing, PacketCaptureStorageLocation }
    filters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PacketCaptureFilter} }

    function PacketCaptureResultProperties(provisioningState, target, bytesToCapturePerPacket, totalBytesPerSession, timeLimitInSeconds, storageLocation, filters, )
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("target"), target)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("bytesToCapturePerPacket"), bytesToCapturePerPacket)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("totalBytesPerSession"), totalBytesPerSession)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("timeLimitInSeconds"), timeLimitInSeconds)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("storageLocation"), storageLocation)
        OpenAPI.validate_property(PacketCaptureResultProperties, Symbol("filters"), filters)
        return new(provisioningState, target, bytesToCapturePerPacket, totalBytesPerSession, timeLimitInSeconds, storageLocation, filters, )
    end
end # type PacketCaptureResultProperties

const _property_types_PacketCaptureResultProperties = Dict{Symbol,String}(Symbol("provisioningState")=>"Any", Symbol("target")=>"String", Symbol("bytesToCapturePerPacket")=>"Int64", Symbol("totalBytesPerSession")=>"Int64", Symbol("timeLimitInSeconds")=>"Int64", Symbol("storageLocation")=>"PacketCaptureStorageLocation", Symbol("filters")=>"Vector{PacketCaptureFilter}", )
OpenAPI.property_type(::Type{ PacketCaptureResultProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PacketCaptureResultProperties[name]))}

function check_required(o::PacketCaptureResultProperties)
    o.target === nothing && (return false)
    o.storageLocation === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ PacketCaptureResultProperties }, name::Symbol, val)
end
