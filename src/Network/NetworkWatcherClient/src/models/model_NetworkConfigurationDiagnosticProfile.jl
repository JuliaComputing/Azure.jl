# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NetworkConfigurationDiagnosticProfile
Parameters to compare with network configuration.

    NetworkConfigurationDiagnosticProfile(;
        direction=nothing,
        protocol=nothing,
        source=nothing,
        destination=nothing,
        destinationPort=nothing,
    )

    - direction::Direction
    - protocol::String : Protocol to be verified on. Accepted values are &#39;*&#39;, TCP, UDP.
    - source::String : Traffic source. Accepted values are &#39;*&#39;, IP Address/CIDR, Service Tag.
    - destination::String : Traffic destination. Accepted values are: &#39;*&#39;, IP Address/CIDR, Service Tag.
    - destinationPort::String : Traffic destination port. Accepted values are &#39;*&#39; and a single port in the range (0 - 65535).
"""
Base.@kwdef mutable struct NetworkConfigurationDiagnosticProfile <: OpenAPI.APIModel
    direction = nothing # spec type: Union{ Nothing, Direction }
    protocol::Union{Nothing, String} = nothing
    source::Union{Nothing, String} = nothing
    destination::Union{Nothing, String} = nothing
    destinationPort::Union{Nothing, String} = nothing

    function NetworkConfigurationDiagnosticProfile(direction, protocol, source, destination, destinationPort, )
        o = new(direction, protocol, source, destination, destinationPort, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type NetworkConfigurationDiagnosticProfile

const _property_types_NetworkConfigurationDiagnosticProfile = Dict{Symbol,String}(Symbol("direction")=>"Direction", Symbol("protocol")=>"String", Symbol("source")=>"String", Symbol("destination")=>"String", Symbol("destinationPort")=>"String", )
OpenAPI.property_type(::Type{ NetworkConfigurationDiagnosticProfile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkConfigurationDiagnosticProfile[name]))}

function OpenAPI.check_required(o::NetworkConfigurationDiagnosticProfile)
    o.direction === nothing && (return false)
    o.protocol === nothing && (return false)
    o.source === nothing && (return false)
    o.destination === nothing && (return false)
    o.destinationPort === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::NetworkConfigurationDiagnosticProfile)
    OpenAPI.validate_property(NetworkConfigurationDiagnosticProfile, Symbol("direction"), o.direction)
    OpenAPI.validate_property(NetworkConfigurationDiagnosticProfile, Symbol("protocol"), o.protocol)
    OpenAPI.validate_property(NetworkConfigurationDiagnosticProfile, Symbol("source"), o.source)
    OpenAPI.validate_property(NetworkConfigurationDiagnosticProfile, Symbol("destination"), o.destination)
    OpenAPI.validate_property(NetworkConfigurationDiagnosticProfile, Symbol("destinationPort"), o.destinationPort)
end

function OpenAPI.validate_property(::Type{ NetworkConfigurationDiagnosticProfile }, name::Symbol, val)





end
