# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PacketCaptureQueryStatusResult
Status of packet capture session.

    PacketCaptureQueryStatusResult(;
        name=nothing,
        id=nothing,
        captureStartTime=nothing,
        packetCaptureStatus=nothing,
        stopReason=nothing,
        packetCaptureError=nothing,
    )

    - name::String : The name of the packet capture resource.
    - id::String : The ID of the packet capture resource.
    - captureStartTime::ZonedDateTime : The start time of the packet capture session.
    - packetCaptureStatus::String : The status of the packet capture session.
    - stopReason::String : The reason the current packet capture session was stopped.
    - packetCaptureError::Vector{String} : List of errors of packet capture session.
"""
Base.@kwdef mutable struct PacketCaptureQueryStatusResult <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    captureStartTime::Union{Nothing, ZonedDateTime} = nothing
    packetCaptureStatus::Union{Nothing, String} = nothing
    stopReason::Union{Nothing, String} = nothing
    packetCaptureError::Union{Nothing, Vector{String}} = nothing

    function PacketCaptureQueryStatusResult(name, id, captureStartTime, packetCaptureStatus, stopReason, packetCaptureError, )
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("name"), name)
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("id"), id)
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("captureStartTime"), captureStartTime)
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("packetCaptureStatus"), packetCaptureStatus)
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("stopReason"), stopReason)
        OpenAPI.validate_property(PacketCaptureQueryStatusResult, Symbol("packetCaptureError"), packetCaptureError)
        return new(name, id, captureStartTime, packetCaptureStatus, stopReason, packetCaptureError, )
    end
end # type PacketCaptureQueryStatusResult

const _property_types_PacketCaptureQueryStatusResult = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"String", Symbol("captureStartTime")=>"ZonedDateTime", Symbol("packetCaptureStatus")=>"String", Symbol("stopReason")=>"String", Symbol("packetCaptureError")=>"Vector{String}", )
OpenAPI.property_type(::Type{ PacketCaptureQueryStatusResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PacketCaptureQueryStatusResult[name]))}

function check_required(o::PacketCaptureQueryStatusResult)
    true
end

function OpenAPI.validate_property(::Type{ PacketCaptureQueryStatusResult }, name::Symbol, val)
    if name === Symbol("captureStartTime")
        OpenAPI.validate_param(name, "PacketCaptureQueryStatusResult", :format, val, "date-time")
    end
    if name === Symbol("packetCaptureStatus")
        OpenAPI.validate_param(name, "PacketCaptureQueryStatusResult", :enum, val, ["NotStarted", "Running", "Stopped", "Error", "Unknown"])
    end
    if name === Symbol("packetCaptureError")
        OpenAPI.validate_param(name, "PacketCaptureQueryStatusResult", :enum, val, [])
    end
end
