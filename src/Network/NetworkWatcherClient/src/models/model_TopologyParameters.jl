# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopologyParameters
Parameters that define the representation of topology.

    TopologyParameters(;
        targetResourceGroupName=nothing,
        targetVirtualNetwork=nothing,
        targetSubnet=nothing,
    )

    - targetResourceGroupName::String : The name of the target resource group to perform topology on.
    - targetVirtualNetwork::SubResource
    - targetSubnet::SubResource
"""
Base.@kwdef mutable struct TopologyParameters <: OpenAPI.APIModel
    targetResourceGroupName::Union{Nothing, String} = nothing
    targetVirtualNetwork = nothing # spec type: Union{ Nothing, SubResource }
    targetSubnet = nothing # spec type: Union{ Nothing, SubResource }

    function TopologyParameters(targetResourceGroupName, targetVirtualNetwork, targetSubnet, )
        o = new(targetResourceGroupName, targetVirtualNetwork, targetSubnet, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type TopologyParameters

const _property_types_TopologyParameters = Dict{Symbol,String}(Symbol("targetResourceGroupName")=>"String", Symbol("targetVirtualNetwork")=>"SubResource", Symbol("targetSubnet")=>"SubResource", )
OpenAPI.property_type(::Type{ TopologyParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopologyParameters[name]))}

function OpenAPI.check_required(o::TopologyParameters)
    true
end

function OpenAPI.validate_properties(o::TopologyParameters)
    OpenAPI.validate_property(TopologyParameters, Symbol("targetResourceGroupName"), o.targetResourceGroupName)
    OpenAPI.validate_property(TopologyParameters, Symbol("targetVirtualNetwork"), o.targetVirtualNetwork)
    OpenAPI.validate_property(TopologyParameters, Symbol("targetSubnet"), o.targetSubnet)
end

function OpenAPI.validate_property(::Type{ TopologyParameters }, name::Symbol, val)



end
