# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectionStateSnapshot
Connection state snapshot.

    ConnectionStateSnapshot(;
        connectionState=nothing,
        startTime=nothing,
        endTime=nothing,
        evaluationState=nothing,
        avgLatencyInMs=nothing,
        minLatencyInMs=nothing,
        maxLatencyInMs=nothing,
        probesSent=nothing,
        probesFailed=nothing,
        hops=nothing,
    )

    - connectionState::String : The connection state.
    - startTime::ZonedDateTime : The start time of the connection snapshot.
    - endTime::ZonedDateTime : The end time of the connection snapshot.
    - evaluationState::String : Connectivity analysis evaluation state.
    - avgLatencyInMs::Int64 : Average latency in ms.
    - minLatencyInMs::Int64 : Minimum latency in ms.
    - maxLatencyInMs::Int64 : Maximum latency in ms.
    - probesSent::Int64 : The number of sent probes.
    - probesFailed::Int64 : The number of failed probes.
    - hops::Vector{ConnectivityHop2} : List of hops between the source and the destination.
"""
Base.@kwdef mutable struct ConnectionStateSnapshot <: OpenAPI.APIModel
    connectionState::Union{Nothing, String} = nothing
    startTime::Union{Nothing, ZonedDateTime} = nothing
    endTime::Union{Nothing, ZonedDateTime} = nothing
    evaluationState::Union{Nothing, String} = nothing
    avgLatencyInMs::Union{Nothing, Int64} = nothing
    minLatencyInMs::Union{Nothing, Int64} = nothing
    maxLatencyInMs::Union{Nothing, Int64} = nothing
    probesSent::Union{Nothing, Int64} = nothing
    probesFailed::Union{Nothing, Int64} = nothing
    hops::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ConnectivityHop2} }

    function ConnectionStateSnapshot(connectionState, startTime, endTime, evaluationState, avgLatencyInMs, minLatencyInMs, maxLatencyInMs, probesSent, probesFailed, hops, )
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("connectionState"), connectionState)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("startTime"), startTime)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("endTime"), endTime)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("evaluationState"), evaluationState)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("avgLatencyInMs"), avgLatencyInMs)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("minLatencyInMs"), minLatencyInMs)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("maxLatencyInMs"), maxLatencyInMs)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("probesSent"), probesSent)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("probesFailed"), probesFailed)
        OpenAPI.validate_property(ConnectionStateSnapshot, Symbol("hops"), hops)
        return new(connectionState, startTime, endTime, evaluationState, avgLatencyInMs, minLatencyInMs, maxLatencyInMs, probesSent, probesFailed, hops, )
    end
end # type ConnectionStateSnapshot

const _property_types_ConnectionStateSnapshot = Dict{Symbol,String}(Symbol("connectionState")=>"String", Symbol("startTime")=>"ZonedDateTime", Symbol("endTime")=>"ZonedDateTime", Symbol("evaluationState")=>"String", Symbol("avgLatencyInMs")=>"Int64", Symbol("minLatencyInMs")=>"Int64", Symbol("maxLatencyInMs")=>"Int64", Symbol("probesSent")=>"Int64", Symbol("probesFailed")=>"Int64", Symbol("hops")=>"Vector{ConnectivityHop2}", )
OpenAPI.property_type(::Type{ ConnectionStateSnapshot }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionStateSnapshot[name]))}

function check_required(o::ConnectionStateSnapshot)
    true
end

function OpenAPI.validate_property(::Type{ ConnectionStateSnapshot }, name::Symbol, val)
    if name === Symbol("connectionState")
        OpenAPI.validate_param(name, "ConnectionStateSnapshot", :enum, val, ["Reachable", "Unreachable", "Unknown"])
    end
    if name === Symbol("startTime")
        OpenAPI.validate_param(name, "ConnectionStateSnapshot", :format, val, "date-time")
    end
    if name === Symbol("endTime")
        OpenAPI.validate_param(name, "ConnectionStateSnapshot", :format, val, "date-time")
    end
    if name === Symbol("evaluationState")
        OpenAPI.validate_param(name, "ConnectionStateSnapshot", :enum, val, ["NotStarted", "InProgress", "Completed"])
    end
end
