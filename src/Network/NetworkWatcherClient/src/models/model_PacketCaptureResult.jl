# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PacketCaptureResult
Information about packet capture session.

    PacketCaptureResult(;
        name=nothing,
        id=nothing,
        etag=nothing,
        properties=nothing,
    )

    - name::String : Name of the packet capture session.
    - id::String : ID of the packet capture operation.
    - etag::String : A unique read-only string that changes whenever the resource is updated.
    - properties::PacketCaptureResultProperties
"""
Base.@kwdef mutable struct PacketCaptureResult <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    etag::Union{Nothing, String} = nothing
    properties = nothing # spec type: Union{ Nothing, PacketCaptureResultProperties }

    function PacketCaptureResult(name, id, etag, properties, )
        OpenAPI.validate_property(PacketCaptureResult, Symbol("name"), name)
        OpenAPI.validate_property(PacketCaptureResult, Symbol("id"), id)
        OpenAPI.validate_property(PacketCaptureResult, Symbol("etag"), etag)
        OpenAPI.validate_property(PacketCaptureResult, Symbol("properties"), properties)
        return new(name, id, etag, properties, )
    end
end # type PacketCaptureResult

const _property_types_PacketCaptureResult = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"String", Symbol("etag")=>"String", Symbol("properties")=>"PacketCaptureResultProperties", )
OpenAPI.property_type(::Type{ PacketCaptureResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PacketCaptureResult[name]))}

function check_required(o::PacketCaptureResult)
    true
end

function OpenAPI.validate_property(::Type{ PacketCaptureResult }, name::Symbol, val)
end
