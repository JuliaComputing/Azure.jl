# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopologyResource
The network resource topology information for the given resource group.

    TopologyResource(;
        name=nothing,
        id=nothing,
        location=nothing,
        associations=nothing,
    )

    - name::String : Name of the resource.
    - id::String : ID of the resource.
    - location::String : Resource location.
    - associations::Vector{TopologyAssociation} : Holds the associations the resource has with other resources in the resource group.
"""
Base.@kwdef mutable struct TopologyResource <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    associations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TopologyAssociation} }

    function TopologyResource(name, id, location, associations, )
        OpenAPI.validate_property(TopologyResource, Symbol("name"), name)
        OpenAPI.validate_property(TopologyResource, Symbol("id"), id)
        OpenAPI.validate_property(TopologyResource, Symbol("location"), location)
        OpenAPI.validate_property(TopologyResource, Symbol("associations"), associations)
        return new(name, id, location, associations, )
    end
end # type TopologyResource

const _property_types_TopologyResource = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("id")=>"String", Symbol("location")=>"String", Symbol("associations")=>"Vector{TopologyAssociation}", )
OpenAPI.property_type(::Type{ TopologyResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopologyResource[name]))}

function check_required(o::TopologyResource)
    true
end

function OpenAPI.validate_property(::Type{ TopologyResource }, name::Symbol, val)
end
