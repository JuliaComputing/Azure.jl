# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""TopologyAssociation
Resources that have an association with the parent resource.

    TopologyAssociation(;
        name=nothing,
        resourceId=nothing,
        associationType=nothing,
    )

    - name::String : The name of the resource that is associated with the parent resource.
    - resourceId::String : The ID of the resource that is associated with the parent resource.
    - associationType::String : The association type of the child resource to the parent resource.
"""
Base.@kwdef mutable struct TopologyAssociation <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    resourceId::Union{Nothing, String} = nothing
    associationType::Union{Nothing, String} = nothing

    function TopologyAssociation(name, resourceId, associationType, )
        OpenAPI.validate_property(TopologyAssociation, Symbol("name"), name)
        OpenAPI.validate_property(TopologyAssociation, Symbol("resourceId"), resourceId)
        OpenAPI.validate_property(TopologyAssociation, Symbol("associationType"), associationType)
        return new(name, resourceId, associationType, )
    end
end # type TopologyAssociation

const _property_types_TopologyAssociation = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("resourceId")=>"String", Symbol("associationType")=>"String", )
OpenAPI.property_type(::Type{ TopologyAssociation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_TopologyAssociation[name]))}

function check_required(o::TopologyAssociation)
    true
end

function OpenAPI.validate_property(::Type{ TopologyAssociation }, name::Symbol, val)
    if name === Symbol("associationType")
        OpenAPI.validate_param(name, "TopologyAssociation", :enum, val, ["Associated", "Contains"])
    end
end
