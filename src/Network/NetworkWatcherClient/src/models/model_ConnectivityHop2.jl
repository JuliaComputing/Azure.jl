# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectivityHop_2
Information about a hop between the source and the destination.

    ConnectivityHop2(;
        type=nothing,
        id=nothing,
        address=nothing,
        resourceId=nothing,
        nextHopIds=nothing,
        previousHopIds=nothing,
        links=nothing,
        previousLinks=nothing,
        issues=nothing,
    )

    - type::String : The type of the hop.
    - id::String : The ID of the hop.
    - address::String : The IP address of the hop.
    - resourceId::String : The ID of the resource corresponding to this hop.
    - nextHopIds::Vector{String} : List of next hop identifiers.
    - previousHopIds::Vector{String} : List of previous hop identifiers.
    - links::Vector{HopLink2} : List of hop links.
    - previousLinks::Vector{HopLink2} : List of previous hop links.
    - issues::Vector{ConnectivityIssue2} : List of issues.
"""
Base.@kwdef mutable struct ConnectivityHop2 <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    address::Union{Nothing, String} = nothing
    resourceId::Union{Nothing, String} = nothing
    nextHopIds::Union{Nothing, Vector{String}} = nothing
    previousHopIds::Union{Nothing, Vector{String}} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{HopLink2} }
    previousLinks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{HopLink2} }
    issues::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ConnectivityIssue2} }

    function ConnectivityHop2(type, id, address, resourceId, nextHopIds, previousHopIds, links, previousLinks, issues, )
        OpenAPI.validate_property(ConnectivityHop2, Symbol("type"), type)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("id"), id)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("address"), address)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("resourceId"), resourceId)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("nextHopIds"), nextHopIds)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("previousHopIds"), previousHopIds)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("links"), links)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("previousLinks"), previousLinks)
        OpenAPI.validate_property(ConnectivityHop2, Symbol("issues"), issues)
        return new(type, id, address, resourceId, nextHopIds, previousHopIds, links, previousLinks, issues, )
    end
end # type ConnectivityHop2

const _property_types_ConnectivityHop2 = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("id")=>"String", Symbol("address")=>"String", Symbol("resourceId")=>"String", Symbol("nextHopIds")=>"Vector{String}", Symbol("previousHopIds")=>"Vector{String}", Symbol("links")=>"Vector{HopLink2}", Symbol("previousLinks")=>"Vector{HopLink2}", Symbol("issues")=>"Vector{ConnectivityIssue2}", )
OpenAPI.property_type(::Type{ ConnectivityHop2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectivityHop2[name]))}

function check_required(o::ConnectivityHop2)
    true
end

function OpenAPI.validate_property(::Type{ ConnectivityHop2 }, name::Symbol, val)
end
