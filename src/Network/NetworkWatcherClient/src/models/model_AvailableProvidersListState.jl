# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AvailableProvidersListState
State details.

    AvailableProvidersListState(;
        stateName=nothing,
        providers=nothing,
        cities=nothing,
    )

    - stateName::String : The state name.
    - providers::Vector{String} : A list of Internet service providers.
    - cities::Vector{AvailableProvidersListCity} : List of available cities or towns in the state.
"""
Base.@kwdef mutable struct AvailableProvidersListState <: OpenAPI.APIModel
    stateName::Union{Nothing, String} = nothing
    providers::Union{Nothing, Vector{String}} = nothing
    cities::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AvailableProvidersListCity} }

    function AvailableProvidersListState(stateName, providers, cities, )
        OpenAPI.validate_property(AvailableProvidersListState, Symbol("stateName"), stateName)
        OpenAPI.validate_property(AvailableProvidersListState, Symbol("providers"), providers)
        OpenAPI.validate_property(AvailableProvidersListState, Symbol("cities"), cities)
        return new(stateName, providers, cities, )
    end
end # type AvailableProvidersListState

const _property_types_AvailableProvidersListState = Dict{Symbol,String}(Symbol("stateName")=>"String", Symbol("providers")=>"Vector{String}", Symbol("cities")=>"Vector{AvailableProvidersListCity}", )
OpenAPI.property_type(::Type{ AvailableProvidersListState }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailableProvidersListState[name]))}

function check_required(o::AvailableProvidersListState)
    true
end

function OpenAPI.validate_property(::Type{ AvailableProvidersListState }, name::Symbol, val)
end
