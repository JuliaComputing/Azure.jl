# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NextHopResult
The information about next hop from the specified VM.

    NextHopResult(;
        nextHopType=nothing,
        nextHopIpAddress=nothing,
        routeTableId=nothing,
    )

    - nextHopType::String : Next hop type.
    - nextHopIpAddress::String : Next hop IP Address.
    - routeTableId::String : The resource identifier for the route table associated with the route being returned. If the route being returned does not correspond to any user created routes then this field will be the string &#39;System Route&#39;.
"""
Base.@kwdef mutable struct NextHopResult <: OpenAPI.APIModel
    nextHopType::Union{Nothing, String} = nothing
    nextHopIpAddress::Union{Nothing, String} = nothing
    routeTableId::Union{Nothing, String} = nothing

    function NextHopResult(nextHopType, nextHopIpAddress, routeTableId, )
        OpenAPI.validate_property(NextHopResult, Symbol("nextHopType"), nextHopType)
        OpenAPI.validate_property(NextHopResult, Symbol("nextHopIpAddress"), nextHopIpAddress)
        OpenAPI.validate_property(NextHopResult, Symbol("routeTableId"), routeTableId)
        return new(nextHopType, nextHopIpAddress, routeTableId, )
    end
end # type NextHopResult

const _property_types_NextHopResult = Dict{Symbol,String}(Symbol("nextHopType")=>"String", Symbol("nextHopIpAddress")=>"String", Symbol("routeTableId")=>"String", )
OpenAPI.property_type(::Type{ NextHopResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NextHopResult[name]))}

function check_required(o::NextHopResult)
    true
end

function OpenAPI.validate_property(::Type{ NextHopResult }, name::Symbol, val)
    if name === Symbol("nextHopType")
        OpenAPI.validate_param(name, "NextHopResult", :enum, val, ["Internet", "VirtualAppliance", "VirtualNetworkGateway", "VnetLocal", "HyperNetGateway", "None"])
    end
end
