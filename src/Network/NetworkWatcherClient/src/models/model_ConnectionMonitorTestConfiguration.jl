# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectionMonitorTestConfiguration
Describes a connection monitor test configuration.

    ConnectionMonitorTestConfiguration(;
        name=nothing,
        testFrequencySec=nothing,
        protocol=nothing,
        preferredIPVersion=nothing,
        httpConfiguration=nothing,
        tcpConfiguration=nothing,
        icmpConfiguration=nothing,
        successThreshold=nothing,
    )

    - name::String : The name of the connection monitor test configuration.
    - testFrequencySec::Int64 : The frequency of test evaluation, in seconds.
    - protocol::String : The protocol to use in test evaluation.
    - preferredIPVersion::String : The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending on other parameters.
    - httpConfiguration::ConnectionMonitorHttpConfiguration
    - tcpConfiguration::ConnectionMonitorTcpConfiguration
    - icmpConfiguration::ConnectionMonitorIcmpConfiguration
    - successThreshold::ConnectionMonitorSuccessThreshold
"""
Base.@kwdef mutable struct ConnectionMonitorTestConfiguration <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    testFrequencySec::Union{Nothing, Int64} = nothing
    protocol::Union{Nothing, String} = nothing
    preferredIPVersion::Union{Nothing, String} = nothing
    httpConfiguration = nothing # spec type: Union{ Nothing, ConnectionMonitorHttpConfiguration }
    tcpConfiguration = nothing # spec type: Union{ Nothing, ConnectionMonitorTcpConfiguration }
    icmpConfiguration = nothing # spec type: Union{ Nothing, ConnectionMonitorIcmpConfiguration }
    successThreshold = nothing # spec type: Union{ Nothing, ConnectionMonitorSuccessThreshold }

    function ConnectionMonitorTestConfiguration(name, testFrequencySec, protocol, preferredIPVersion, httpConfiguration, tcpConfiguration, icmpConfiguration, successThreshold, )
        o = new(name, testFrequencySec, protocol, preferredIPVersion, httpConfiguration, tcpConfiguration, icmpConfiguration, successThreshold, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ConnectionMonitorTestConfiguration

const _property_types_ConnectionMonitorTestConfiguration = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("testFrequencySec")=>"Int64", Symbol("protocol")=>"String", Symbol("preferredIPVersion")=>"String", Symbol("httpConfiguration")=>"ConnectionMonitorHttpConfiguration", Symbol("tcpConfiguration")=>"ConnectionMonitorTcpConfiguration", Symbol("icmpConfiguration")=>"ConnectionMonitorIcmpConfiguration", Symbol("successThreshold")=>"ConnectionMonitorSuccessThreshold", )
OpenAPI.property_type(::Type{ ConnectionMonitorTestConfiguration }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorTestConfiguration[name]))}

function OpenAPI.check_required(o::ConnectionMonitorTestConfiguration)
    o.name === nothing && (return false)
    o.protocol === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ConnectionMonitorTestConfiguration)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("name"), o.name)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("testFrequencySec"), o.testFrequencySec)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("protocol"), o.protocol)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("preferredIPVersion"), o.preferredIPVersion)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("httpConfiguration"), o.httpConfiguration)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("tcpConfiguration"), o.tcpConfiguration)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("icmpConfiguration"), o.icmpConfiguration)
    OpenAPI.validate_property(ConnectionMonitorTestConfiguration, Symbol("successThreshold"), o.successThreshold)
end

function OpenAPI.validate_property(::Type{ ConnectionMonitorTestConfiguration }, name::Symbol, val)


    if name === Symbol("testFrequencySec")
        OpenAPI.validate_param(name, "ConnectionMonitorTestConfiguration", :format, val, "int32")
    end

    if name === Symbol("protocol")
        OpenAPI.validate_param(name, "ConnectionMonitorTestConfiguration", :enum, val, ["Tcp", "Http", "Icmp"])
    end


    if name === Symbol("preferredIPVersion")
        OpenAPI.validate_param(name, "ConnectionMonitorTestConfiguration", :enum, val, ["IPv4", "IPv6"])
    end





end
