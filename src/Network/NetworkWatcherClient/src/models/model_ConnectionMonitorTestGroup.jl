# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectionMonitorTestGroup
Describes the connection monitor test group.

    ConnectionMonitorTestGroup(;
        name=nothing,
        disable=nothing,
        testConfigurations=nothing,
        sources=nothing,
        destinations=nothing,
    )

    - name::String : The name of the connection monitor test group.
    - disable::Bool : Value indicating whether test group is disabled.
    - testConfigurations::Vector{String} : List of test configuration names.
    - sources::Vector{String} : List of source endpoint names.
    - destinations::Vector{String} : List of destination endpoint names.
"""
Base.@kwdef mutable struct ConnectionMonitorTestGroup <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    disable::Union{Nothing, Bool} = nothing
    testConfigurations::Union{Nothing, Vector{String}} = nothing
    sources::Union{Nothing, Vector{String}} = nothing
    destinations::Union{Nothing, Vector{String}} = nothing

    function ConnectionMonitorTestGroup(name, disable, testConfigurations, sources, destinations, )
        OpenAPI.validate_property(ConnectionMonitorTestGroup, Symbol("name"), name)
        OpenAPI.validate_property(ConnectionMonitorTestGroup, Symbol("disable"), disable)
        OpenAPI.validate_property(ConnectionMonitorTestGroup, Symbol("testConfigurations"), testConfigurations)
        OpenAPI.validate_property(ConnectionMonitorTestGroup, Symbol("sources"), sources)
        OpenAPI.validate_property(ConnectionMonitorTestGroup, Symbol("destinations"), destinations)
        return new(name, disable, testConfigurations, sources, destinations, )
    end
end # type ConnectionMonitorTestGroup

const _property_types_ConnectionMonitorTestGroup = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("disable")=>"Bool", Symbol("testConfigurations")=>"Vector{String}", Symbol("sources")=>"Vector{String}", Symbol("destinations")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ConnectionMonitorTestGroup }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectionMonitorTestGroup[name]))}

function check_required(o::ConnectionMonitorTestGroup)
    o.name === nothing && (return false)
    o.testConfigurations === nothing && (return false)
    o.sources === nothing && (return false)
    o.destinations === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ConnectionMonitorTestGroup }, name::Symbol, val)
end
