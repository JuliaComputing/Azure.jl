# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ConnectivityInformation
Information on the connectivity status.

    ConnectivityInformation(;
        hops=nothing,
        connectionStatus=nothing,
        avgLatencyInMs=nothing,
        minLatencyInMs=nothing,
        maxLatencyInMs=nothing,
        probesSent=nothing,
        probesFailed=nothing,
    )

    - hops::Vector{ConnectivityHop} : List of hops between the source and the destination.
    - connectionStatus::String : The connection status.
    - avgLatencyInMs::Int64 : Average latency in milliseconds.
    - minLatencyInMs::Int64 : Minimum latency in milliseconds.
    - maxLatencyInMs::Int64 : Maximum latency in milliseconds.
    - probesSent::Int64 : Total number of probes sent.
    - probesFailed::Int64 : Number of failed probes.
"""
Base.@kwdef mutable struct ConnectivityInformation <: OpenAPI.APIModel
    hops::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ConnectivityHop} }
    connectionStatus::Union{Nothing, String} = nothing
    avgLatencyInMs::Union{Nothing, Int64} = nothing
    minLatencyInMs::Union{Nothing, Int64} = nothing
    maxLatencyInMs::Union{Nothing, Int64} = nothing
    probesSent::Union{Nothing, Int64} = nothing
    probesFailed::Union{Nothing, Int64} = nothing

    function ConnectivityInformation(hops, connectionStatus, avgLatencyInMs, minLatencyInMs, maxLatencyInMs, probesSent, probesFailed, )
        OpenAPI.validate_property(ConnectivityInformation, Symbol("hops"), hops)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("connectionStatus"), connectionStatus)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("avgLatencyInMs"), avgLatencyInMs)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("minLatencyInMs"), minLatencyInMs)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("maxLatencyInMs"), maxLatencyInMs)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("probesSent"), probesSent)
        OpenAPI.validate_property(ConnectivityInformation, Symbol("probesFailed"), probesFailed)
        return new(hops, connectionStatus, avgLatencyInMs, minLatencyInMs, maxLatencyInMs, probesSent, probesFailed, )
    end
end # type ConnectivityInformation

const _property_types_ConnectivityInformation = Dict{Symbol,String}(Symbol("hops")=>"Vector{ConnectivityHop}", Symbol("connectionStatus")=>"String", Symbol("avgLatencyInMs")=>"Int64", Symbol("minLatencyInMs")=>"Int64", Symbol("maxLatencyInMs")=>"Int64", Symbol("probesSent")=>"Int64", Symbol("probesFailed")=>"Int64", )
OpenAPI.property_type(::Type{ ConnectivityInformation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ConnectivityInformation[name]))}

function check_required(o::ConnectivityInformation)
    true
end

function OpenAPI.validate_property(::Type{ ConnectivityInformation }, name::Symbol, val)
    if name === Symbol("connectionStatus")
        OpenAPI.validate_param(name, "ConnectivityInformation", :enum, val, ["Unknown", "Connected", "Disconnected", "Degraded"])
    end
end
