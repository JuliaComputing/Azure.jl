# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FlowLogsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FlowLogsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FlowLogsApi }) = "https://management.azure.com"

const _returntypes_flow_logs_create_or_update_FlowLogsApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => FlowLog,
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLog,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_flow_logs_create_or_update(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::FlowLog; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_flow_logs_create_or_update_FlowLogsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "flowLogName", flow_log_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or update a flow log for the specified network security group.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- flow_log_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::FlowLog (required)

Return: FlowLog, OpenAPI.Clients.ApiResponse
"""
function flow_logs_create_or_update(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::FlowLog; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_create_or_update(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flow_logs_create_or_update(_api::FlowLogsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::FlowLog; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_create_or_update(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flow_logs_delete_FlowLogsApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_flow_logs_delete(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_flow_logs_delete_FlowLogsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "flowLogName", flow_log_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified flow log resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- flow_log_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function flow_logs_delete(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_delete(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flow_logs_delete(_api::FlowLogsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_delete(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flow_logs_get_FlowLogsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLog,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_flow_logs_get(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_flow_logs_get_FlowLogsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "flowLogName", flow_log_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a flow log resource by name.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- flow_log_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: FlowLog, OpenAPI.Clients.ApiResponse
"""
function flow_logs_get(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_get(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flow_logs_get(_api::FlowLogsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_get(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flow_logs_list_FlowLogsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLogListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse2,
)

function _oacinternal_flow_logs_list(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_flow_logs_list_FlowLogsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all flow log resources for the specified Network Watcher.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: FlowLogListResult, OpenAPI.Clients.ApiResponse
"""
function flow_logs_list(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_list(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flow_logs_list(_api::FlowLogsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_list(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_flow_logs_update_tags_FlowLogsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLog,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse2,
)

function _oacinternal_flow_logs_update_tags(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_flow_logs_update_tags_FlowLogsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/flowLogs/{flowLogName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "flowLogName", flow_log_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update tags of the specified flow log.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- flow_log_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TagsObject (required)

Return: FlowLog, OpenAPI.Clients.ApiResponse
"""
function flow_logs_update_tags(_api::FlowLogsApi, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_update_tags(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function flow_logs_update_tags(_api::FlowLogsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, flow_log_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_flow_logs_update_tags(_api, resource_group_name, network_watcher_name, flow_log_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export flow_logs_create_or_update
export flow_logs_delete
export flow_logs_get
export flow_logs_list
export flow_logs_update_tags
