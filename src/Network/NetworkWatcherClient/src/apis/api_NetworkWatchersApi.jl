# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct NetworkWatchersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `NetworkWatchersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ NetworkWatchersApi }) = "https://management.azure.com"

const _returntypes_network_watchers_check_connectivity_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ConnectivityInformation,
    Regex("^" * replace("202", "x"=>".") * "\$") => ConnectivityInformation,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_check_connectivity(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::ConnectivityParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_check_connectivity_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/connectivityCheck", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Verifies the possibility of establishing a direct TCP connection from a virtual machine to a given endpoint including another VM or an arbitrary remote server.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ConnectivityParameters (required)

Return: ConnectivityInformation, OpenAPI.Clients.ApiResponse
"""
function network_watchers_check_connectivity(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::ConnectivityParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_check_connectivity(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_check_connectivity(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::ConnectivityParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_check_connectivity(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_create_or_update_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkWatcher,
    Regex("^" * replace("201", "x"=>".") * "\$") => NetworkWatcher,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_create_or_update(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkWatcher; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_network_watchers_create_or_update_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a network watcher in the specified resource group.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::NetworkWatcher (required)

Return: NetworkWatcher, OpenAPI.Clients.ApiResponse
"""
function network_watchers_create_or_update(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkWatcher; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_create_or_update(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_create_or_update(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkWatcher; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_create_or_update(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_delete_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_delete(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_network_watchers_delete_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified network watcher resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function network_watchers_delete(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_delete(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_delete(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_delete(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkWatcher,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_network_watchers_get_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified network watcher by resource group.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: NetworkWatcher, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get(_api, resource_group_name, network_watcher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_azure_reachability_report_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AzureReachabilityReport,
    Regex("^" * replace("202", "x"=>".") * "\$") => AzureReachabilityReport,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_azure_reachability_report(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AzureReachabilityReportParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_azure_reachability_report_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/azureReachabilityReport", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""NOTE: This feature is currently in preview and still being tested for stability. Gets the relative latency score for internet service providers from a specified location to Azure regions.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::AzureReachabilityReportParameters (required)

Return: AzureReachabilityReport, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_azure_reachability_report(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AzureReachabilityReportParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_azure_reachability_report(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_azure_reachability_report(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AzureReachabilityReportParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_azure_reachability_report(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_flow_log_status_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("202", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_flow_log_status(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_flow_log_status_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Queries status of flow log and traffic analytics (optional) on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::FlowLogStatusParameters (required)

Return: FlowLogInformation, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_flow_log_status(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_flow_log_status(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_flow_log_status(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_flow_log_status(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_network_configuration_diagnostic_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkConfigurationDiagnosticResponse,
    Regex("^" * replace("202", "x"=>".") * "\$") => NetworkConfigurationDiagnosticResponse,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_network_configuration_diagnostic(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkConfigurationDiagnosticParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_network_configuration_diagnostic_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/networkConfigurationDiagnostic", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Gets Network Configuration Diagnostic data to help customers understand and debug network behavior. It provides detailed information on what security rules were applied to a specified traffic flow and the result of evaluating these rules. Customers must provide details of a flow like source, destination, protocol, etc. The API returns whether traffic was allowed or denied, the rules evaluated for the specified flow and the evaluation results.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::NetworkConfigurationDiagnosticParameters (required)

Return: NetworkConfigurationDiagnosticResponse, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_network_configuration_diagnostic(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkConfigurationDiagnosticParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_network_configuration_diagnostic(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_network_configuration_diagnostic(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NetworkConfigurationDiagnosticParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_network_configuration_diagnostic(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_next_hop_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NextHopResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => NextHopResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_next_hop(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NextHopParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_next_hop_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/nextHop", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the next hop from the specified VM.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::NextHopParameters (required)

Return: NextHopResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_next_hop(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NextHopParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_next_hop(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_next_hop(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::NextHopParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_next_hop(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_topology_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Topology,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_topology(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TopologyParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_topology_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/topology", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the current network topology by resource group.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TopologyParameters (required)

Return: Topology, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_topology(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TopologyParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_topology(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_topology(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TopologyParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_topology(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_troubleshooting_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TroubleshootingResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => TroubleshootingResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_troubleshooting(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TroubleshootingParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_troubleshooting_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/troubleshoot", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Initiate troubleshooting on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TroubleshootingParameters (required)

Return: TroubleshootingResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_troubleshooting(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TroubleshootingParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_troubleshooting(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_troubleshooting(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TroubleshootingParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_troubleshooting(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_troubleshooting_result_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => TroubleshootingResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => TroubleshootingResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_troubleshooting_result(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::QueryTroubleshootingParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_troubleshooting_result_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryTroubleshootResult", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Get the last completed troubleshooting result on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::QueryTroubleshootingParameters (required)

Return: TroubleshootingResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_troubleshooting_result(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::QueryTroubleshootingParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_troubleshooting_result(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_troubleshooting_result(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::QueryTroubleshootingParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_troubleshooting_result(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_get_v_m_security_rules_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => SecurityGroupViewResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => SecurityGroupViewResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_v_m_security_rules(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::SecurityGroupViewParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_v_m_security_rules_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/securityGroupView", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the configured and effective security group rules on the specified VM.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::SecurityGroupViewParameters (required)

Return: SecurityGroupViewResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_v_m_security_rules(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::SecurityGroupViewParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_v_m_security_rules(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_v_m_security_rules(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::SecurityGroupViewParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_v_m_security_rules(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_list_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkWatcherListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_list(_api::NetworkWatchersApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_network_watchers_list_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all network watchers by resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: NetworkWatcherListResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_list(_api::NetworkWatchersApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_list(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_list_all_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkWatcherListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_list_all(_api::NetworkWatchersApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_network_watchers_list_all_NetworkWatchersApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/networkWatchers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all network watchers by subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: NetworkWatcherListResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_list_all(_api::NetworkWatchersApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_list_all(_api::NetworkWatchersApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_list_available_providers_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AvailableProvidersList,
    Regex("^" * replace("202", "x"=>".") * "\$") => AvailableProvidersList,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_list_available_providers(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AvailableProvidersListParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_list_available_providers_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/availableProvidersList", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""NOTE: This feature is currently in preview and still being tested for stability. Lists all available internet service providers for a specified Azure region.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::AvailableProvidersListParameters (required)

Return: AvailableProvidersList, OpenAPI.Clients.ApiResponse
"""
function network_watchers_list_available_providers(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AvailableProvidersListParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list_available_providers(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_list_available_providers(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::AvailableProvidersListParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_list_available_providers(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_set_flow_log_configuration_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("202", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_set_flow_log_configuration(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_set_flow_log_configuration_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Configures flow log and traffic analytics (optional) on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::FlowLogInformation (required)

Return: FlowLogInformation, OpenAPI.Clients.ApiResponse
"""
function network_watchers_set_flow_log_configuration(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_set_flow_log_configuration(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_set_flow_log_configuration(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_set_flow_log_configuration(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_update_tags_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkWatcher,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_update_tags(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_network_watchers_update_tags_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates a network watcher tags.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TagsObject (required)

Return: NetworkWatcher, OpenAPI.Clients.ApiResponse
"""
function network_watchers_update_tags(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_update_tags(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_update_tags(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_update_tags(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_verify_i_p_flow_NetworkWatchersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VerificationIPFlowResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => VerificationIPFlowResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_verify_i_p_flow(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::VerificationIPFlowParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_verify_i_p_flow_NetworkWatchersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/ipFlowVerify", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Verify IP flow from the specified VM to a location given the currently configured NSG rules.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::VerificationIPFlowParameters (required)

Return: VerificationIPFlowResult, OpenAPI.Clients.ApiResponse
"""
function network_watchers_verify_i_p_flow(_api::NetworkWatchersApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::VerificationIPFlowParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_verify_i_p_flow(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_verify_i_p_flow(_api::NetworkWatchersApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::VerificationIPFlowParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_verify_i_p_flow(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export network_watchers_check_connectivity
export network_watchers_create_or_update
export network_watchers_delete
export network_watchers_get
export network_watchers_get_azure_reachability_report
export network_watchers_get_flow_log_status
export network_watchers_get_network_configuration_diagnostic
export network_watchers_get_next_hop
export network_watchers_get_topology
export network_watchers_get_troubleshooting
export network_watchers_get_troubleshooting_result
export network_watchers_get_v_m_security_rules
export network_watchers_list
export network_watchers_list_all
export network_watchers_list_available_providers
export network_watchers_set_flow_log_configuration
export network_watchers_update_tags
export network_watchers_verify_i_p_flow
