# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct TrafficAnalyticsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `TrafficAnalyticsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ TrafficAnalyticsApi }) = "https://management.azure.com"

const _returntypes_network_watchers_get_flow_log_status_TrafficAnalyticsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("202", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_get_flow_log_status(_api::TrafficAnalyticsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_get_flow_log_status_TrafficAnalyticsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/queryFlowLogStatus", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Queries status of flow log and traffic analytics (optional) on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::FlowLogStatusParameters (required)

Return: FlowLogInformation, OpenAPI.Clients.ApiResponse
"""
function network_watchers_get_flow_log_status(_api::TrafficAnalyticsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_flow_log_status(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_get_flow_log_status(_api::TrafficAnalyticsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogStatusParameters; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_get_flow_log_status(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_network_watchers_set_flow_log_configuration_TrafficAnalyticsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("202", "x"=>".") * "\$") => FlowLogInformation,
    Regex("^" * replace("0", "x"=>".") * "\$") => ErrorResponse,
)

function _oacinternal_network_watchers_set_flow_log_configuration(_api::TrafficAnalyticsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_network_watchers_set_flow_log_configuration_TrafficAnalyticsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkWatchers/{networkWatcherName}/configureFlowLog", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "networkWatcherName", network_watcher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Configures flow log and traffic analytics (optional) on a specified resource.

Params:
- resource_group_name::String (required)
- network_watcher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::FlowLogInformation (required)

Return: FlowLogInformation, OpenAPI.Clients.ApiResponse
"""
function network_watchers_set_flow_log_configuration(_api::TrafficAnalyticsApi, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_set_flow_log_configuration(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function network_watchers_set_flow_log_configuration(_api::TrafficAnalyticsApi, response_stream::Channel, resource_group_name::String, network_watcher_name::String, api_version::String, subscription_id::String, parameters::FlowLogInformation; _mediaType=nothing)
    _ctx = _oacinternal_network_watchers_set_flow_log_configuration(_api, resource_group_name, network_watcher_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export network_watchers_get_flow_log_status
export network_watchers_set_flow_log_configuration
