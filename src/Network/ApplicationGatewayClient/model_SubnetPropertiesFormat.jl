# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct SubnetPropertiesFormat <: SwaggerModel
    addressPrefix::Any # spec type: Union{ Nothing, String } # spec name: addressPrefix
    addressPrefixes::Any # spec type: Union{ Nothing, Vector{String} } # spec name: addressPrefixes
    networkSecurityGroup::Any # spec type: Union{ Nothing, NetworkSecurityGroup } # spec name: networkSecurityGroup
    routeTable::Any # spec type: Union{ Nothing, RouteTable } # spec name: routeTable
    natGateway::Any # spec type: Union{ Nothing, SubResource } # spec name: natGateway
    serviceEndpoints::Any # spec type: Union{ Nothing, Vector{ServiceEndpointPropertiesFormat} } # spec name: serviceEndpoints
    serviceEndpointPolicies::Any # spec type: Union{ Nothing, Vector{ServiceEndpointPolicy} } # spec name: serviceEndpointPolicies
    privateEndpoints::Any # spec type: Union{ Nothing, Vector{PrivateEndpoint} } # spec name: privateEndpoints
    ipConfigurations::Any # spec type: Union{ Nothing, Vector{IPConfiguration} } # spec name: ipConfigurations
    ipConfigurationProfiles::Any # spec type: Union{ Nothing, Vector{IPConfigurationProfile} } # spec name: ipConfigurationProfiles
    ipAllocations::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: ipAllocations
    resourceNavigationLinks::Any # spec type: Union{ Nothing, Vector{ResourceNavigationLink} } # spec name: resourceNavigationLinks
    serviceAssociationLinks::Any # spec type: Union{ Nothing, Vector{ServiceAssociationLink} } # spec name: serviceAssociationLinks
    delegations::Any # spec type: Union{ Nothing, Vector{Delegation} } # spec name: delegations
    purpose::Any # spec type: Union{ Nothing, String } # spec name: purpose
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState
    privateEndpointNetworkPolicies::Any # spec type: Union{ Nothing, String } # spec name: privateEndpointNetworkPolicies
    privateLinkServiceNetworkPolicies::Any # spec type: Union{ Nothing, String } # spec name: privateLinkServiceNetworkPolicies

    function SubnetPropertiesFormat(;addressPrefix=nothing, addressPrefixes=nothing, networkSecurityGroup=nothing, routeTable=nothing, natGateway=nothing, serviceEndpoints=nothing, serviceEndpointPolicies=nothing, privateEndpoints=nothing, ipConfigurations=nothing, ipConfigurationProfiles=nothing, ipAllocations=nothing, resourceNavigationLinks=nothing, serviceAssociationLinks=nothing, delegations=nothing, purpose=nothing, provisioningState=nothing, privateEndpointNetworkPolicies=nothing, privateLinkServiceNetworkPolicies=nothing)
        o = new()
        validate_property(SubnetPropertiesFormat, Symbol("addressPrefix"), addressPrefix)
        setfield!(o, Symbol("addressPrefix"), addressPrefix)
        validate_property(SubnetPropertiesFormat, Symbol("addressPrefixes"), addressPrefixes)
        setfield!(o, Symbol("addressPrefixes"), addressPrefixes)
        validate_property(SubnetPropertiesFormat, Symbol("networkSecurityGroup"), networkSecurityGroup)
        setfield!(o, Symbol("networkSecurityGroup"), networkSecurityGroup)
        validate_property(SubnetPropertiesFormat, Symbol("routeTable"), routeTable)
        setfield!(o, Symbol("routeTable"), routeTable)
        validate_property(SubnetPropertiesFormat, Symbol("natGateway"), natGateway)
        setfield!(o, Symbol("natGateway"), natGateway)
        validate_property(SubnetPropertiesFormat, Symbol("serviceEndpoints"), serviceEndpoints)
        setfield!(o, Symbol("serviceEndpoints"), serviceEndpoints)
        validate_property(SubnetPropertiesFormat, Symbol("serviceEndpointPolicies"), serviceEndpointPolicies)
        setfield!(o, Symbol("serviceEndpointPolicies"), serviceEndpointPolicies)
        validate_property(SubnetPropertiesFormat, Symbol("privateEndpoints"), privateEndpoints)
        setfield!(o, Symbol("privateEndpoints"), privateEndpoints)
        validate_property(SubnetPropertiesFormat, Symbol("ipConfigurations"), ipConfigurations)
        setfield!(o, Symbol("ipConfigurations"), ipConfigurations)
        validate_property(SubnetPropertiesFormat, Symbol("ipConfigurationProfiles"), ipConfigurationProfiles)
        setfield!(o, Symbol("ipConfigurationProfiles"), ipConfigurationProfiles)
        validate_property(SubnetPropertiesFormat, Symbol("ipAllocations"), ipAllocations)
        setfield!(o, Symbol("ipAllocations"), ipAllocations)
        validate_property(SubnetPropertiesFormat, Symbol("resourceNavigationLinks"), resourceNavigationLinks)
        setfield!(o, Symbol("resourceNavigationLinks"), resourceNavigationLinks)
        validate_property(SubnetPropertiesFormat, Symbol("serviceAssociationLinks"), serviceAssociationLinks)
        setfield!(o, Symbol("serviceAssociationLinks"), serviceAssociationLinks)
        validate_property(SubnetPropertiesFormat, Symbol("delegations"), delegations)
        setfield!(o, Symbol("delegations"), delegations)
        validate_property(SubnetPropertiesFormat, Symbol("purpose"), purpose)
        setfield!(o, Symbol("purpose"), purpose)
        validate_property(SubnetPropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(SubnetPropertiesFormat, Symbol("privateEndpointNetworkPolicies"), privateEndpointNetworkPolicies)
        setfield!(o, Symbol("privateEndpointNetworkPolicies"), privateEndpointNetworkPolicies)
        validate_property(SubnetPropertiesFormat, Symbol("privateLinkServiceNetworkPolicies"), privateLinkServiceNetworkPolicies)
        setfield!(o, Symbol("privateLinkServiceNetworkPolicies"), privateLinkServiceNetworkPolicies)
        o
    end
end # type SubnetPropertiesFormat

const _property_map_SubnetPropertiesFormat = Dict{Symbol,Symbol}(Symbol("addressPrefix")=>Symbol("addressPrefix"), Symbol("addressPrefixes")=>Symbol("addressPrefixes"), Symbol("networkSecurityGroup")=>Symbol("networkSecurityGroup"), Symbol("routeTable")=>Symbol("routeTable"), Symbol("natGateway")=>Symbol("natGateway"), Symbol("serviceEndpoints")=>Symbol("serviceEndpoints"), Symbol("serviceEndpointPolicies")=>Symbol("serviceEndpointPolicies"), Symbol("privateEndpoints")=>Symbol("privateEndpoints"), Symbol("ipConfigurations")=>Symbol("ipConfigurations"), Symbol("ipConfigurationProfiles")=>Symbol("ipConfigurationProfiles"), Symbol("ipAllocations")=>Symbol("ipAllocations"), Symbol("resourceNavigationLinks")=>Symbol("resourceNavigationLinks"), Symbol("serviceAssociationLinks")=>Symbol("serviceAssociationLinks"), Symbol("delegations")=>Symbol("delegations"), Symbol("purpose")=>Symbol("purpose"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("privateEndpointNetworkPolicies")=>Symbol("privateEndpointNetworkPolicies"), Symbol("privateLinkServiceNetworkPolicies")=>Symbol("privateLinkServiceNetworkPolicies"))
const _property_types_SubnetPropertiesFormat = Dict{Symbol,String}(Symbol("addressPrefix")=>"String", Symbol("addressPrefixes")=>"Vector{String}", Symbol("networkSecurityGroup")=>"NetworkSecurityGroup", Symbol("routeTable")=>"RouteTable", Symbol("natGateway")=>"SubResource", Symbol("serviceEndpoints")=>"Vector{ServiceEndpointPropertiesFormat}", Symbol("serviceEndpointPolicies")=>"Vector{ServiceEndpointPolicy}", Symbol("privateEndpoints")=>"Vector{PrivateEndpoint}", Symbol("ipConfigurations")=>"Vector{IPConfiguration}", Symbol("ipConfigurationProfiles")=>"Vector{IPConfigurationProfile}", Symbol("ipAllocations")=>"Vector{SubResource}", Symbol("resourceNavigationLinks")=>"Vector{ResourceNavigationLink}", Symbol("serviceAssociationLinks")=>"Vector{ServiceAssociationLink}", Symbol("delegations")=>"Vector{Delegation}", Symbol("purpose")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateEndpointNetworkPolicies")=>"String", Symbol("privateLinkServiceNetworkPolicies")=>"String")
Base.propertynames(::Type{ SubnetPropertiesFormat }) = collect(keys(_property_map_SubnetPropertiesFormat))
Swagger.property_type(::Type{ SubnetPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SubnetPropertiesFormat[name]))}
Swagger.field_name(::Type{ SubnetPropertiesFormat }, property_name::Symbol) =  _property_map_SubnetPropertiesFormat[property_name]

function check_required(o::SubnetPropertiesFormat)
    true
end

function validate_property(::Type{ SubnetPropertiesFormat }, name::Symbol, val)
end
