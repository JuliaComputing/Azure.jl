# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct FlowLogFormatParameters <: SwaggerModel
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    version::Any # spec type: Union{ Nothing, Int32 } # spec name: version

    function FlowLogFormatParameters(;type=nothing, version=nothing)
        o = new()
        validate_property(FlowLogFormatParameters, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(FlowLogFormatParameters, Symbol("version"), version)
        setfield!(o, Symbol("version"), version)
        o
    end
end # type FlowLogFormatParameters

const _property_map_FlowLogFormatParameters = Dict{Symbol,Symbol}(Symbol("type")=>Symbol("type"), Symbol("version")=>Symbol("version"))
const _property_types_FlowLogFormatParameters = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("version")=>"Int32")
Base.propertynames(::Type{ FlowLogFormatParameters }) = collect(keys(_property_map_FlowLogFormatParameters))
Swagger.property_type(::Type{ FlowLogFormatParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FlowLogFormatParameters[name]))}
Swagger.field_name(::Type{ FlowLogFormatParameters }, property_name::Symbol) =  _property_map_FlowLogFormatParameters[property_name]

const _allowed_FlowLogFormatParameters_type = ["JSON"]

function check_required(o::FlowLogFormatParameters)
    true
end

function validate_property(::Type{ FlowLogFormatParameters }, name::Symbol, val)
    if name === Symbol("type")
        Swagger.validate_param(name, "FlowLogFormatParameters", :enum, val, _allowed_FlowLogFormatParameters_type)
    end
end
