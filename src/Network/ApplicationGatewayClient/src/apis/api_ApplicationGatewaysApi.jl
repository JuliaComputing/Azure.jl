# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ApplicationGatewaysApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ApplicationGatewaysApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ApplicationGatewaysApi }) = "https://management.azure.com"

const _returntypes_application_gateways_backend_health_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayBackendHealth,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_backend_health(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_application_gateways_backend_health_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the backend health of the specified application gateway in a resource group.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: ApplicationGatewayBackendHealth, OpenAPI.Clients.ApiResponse
"""
function application_gateways_backend_health(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_backend_health(_api, resource_group_name, application_gateway_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_backend_health(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_backend_health(_api, resource_group_name, application_gateway_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_backend_health_on_demand_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayBackendHealthOnDemand,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_backend_health_on_demand(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, probe_request::ApplicationGatewayOnDemandProbe; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_application_gateways_backend_health_on_demand_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/getBackendHealthOnDemand", ["azure_auth", ], probe_request)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- probe_request::ApplicationGatewayOnDemandProbe (required)
- expand::String

Return: ApplicationGatewayBackendHealthOnDemand, OpenAPI.Clients.ApiResponse
"""
function application_gateways_backend_health_on_demand(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, probe_request::ApplicationGatewayOnDemandProbe; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_backend_health_on_demand(_api, resource_group_name, application_gateway_name, api_version, subscription_id, probe_request; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_backend_health_on_demand(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, probe_request::ApplicationGatewayOnDemandProbe; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_backend_health_on_demand(_api, resource_group_name, application_gateway_name, api_version, subscription_id, probe_request; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_create_or_update_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => ApplicationGateway,
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGateway,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_create_or_update(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::ApplicationGateway; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_application_gateways_create_or_update_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates the specified application gateway.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ApplicationGateway (required)

Return: ApplicationGateway, OpenAPI.Clients.ApiResponse
"""
function application_gateways_create_or_update(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::ApplicationGateway; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_create_or_update(_api, resource_group_name, application_gateway_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_create_or_update(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::ApplicationGateway; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_create_or_update(_api, resource_group_name, application_gateway_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_delete_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_delete(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_application_gateways_delete_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified application gateway.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function application_gateways_delete(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_delete(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_delete(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_delete(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_get_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGateway,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_get(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_get_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified application gateway.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGateway, OpenAPI.Clients.ApiResponse
"""
function application_gateways_get(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_get(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_get(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_get(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_get_ssl_predefined_policy_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewaySslPredefinedPolicy,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_get_ssl_predefined_policy(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String, predefined_policy_name::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_get_ssl_predefined_policy_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "predefinedPolicyName", predefined_policy_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets Ssl predefined policy with the specified policy name.

Params:
- api_version::String (required)
- subscription_id::String (required)
- predefined_policy_name::String (required)

Return: ApplicationGatewaySslPredefinedPolicy, OpenAPI.Clients.ApiResponse
"""
function application_gateways_get_ssl_predefined_policy(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String, predefined_policy_name::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_get_ssl_predefined_policy(_api, api_version, subscription_id, predefined_policy_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_get_ssl_predefined_policy(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String, predefined_policy_name::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_get_ssl_predefined_policy(_api, api_version, subscription_id, predefined_policy_name; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_list(_api::ApplicationGatewaysApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all application gateways in a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGatewayListResult, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list(_api::ApplicationGatewaysApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_all_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_list_all(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_all_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the application gateways in a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGatewayListResult, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_all(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_all(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_request_headers_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_application_gateways_list_available_request_headers(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_request_headers_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all available request headers.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_request_headers(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_request_headers(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_request_headers(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_request_headers(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_response_headers_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_application_gateways_list_available_response_headers(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_response_headers_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all available response headers.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_response_headers(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_response_headers(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_response_headers(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_response_headers(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_server_variables_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{String},
    Regex("^" * replace("0", "x"=>".") * "\$") => Error,
)

function _oacinternal_application_gateways_list_available_server_variables(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_server_variables_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all available server variables.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: Vector{String}, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_server_variables(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_server_variables(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_server_variables(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_server_variables(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_ssl_options_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayAvailableSslOptions,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_list_available_ssl_options(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_ssl_options_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists available Ssl options for configuring Ssl policy.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGatewayAvailableSslOptions, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_ssl_options(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_ssl_options(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_ssl_options(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_ssl_options(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_ssl_predefined_policies_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayAvailableSslPredefinedPolicies,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_list_available_ssl_predefined_policies(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_ssl_predefined_policies_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all SSL predefined policies for configuring Ssl policy.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGatewayAvailableSslPredefinedPolicies, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_ssl_predefined_policies(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_ssl_predefined_policies(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_ssl_predefined_policies(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_ssl_predefined_policies(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_list_available_waf_rule_sets_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGatewayAvailableWafRuleSetsResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_list_available_waf_rule_sets(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_application_gateways_list_available_waf_rule_sets_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all available web application firewall rule sets.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ApplicationGatewayAvailableWafRuleSetsResult, OpenAPI.Clients.ApiResponse
"""
function application_gateways_list_available_waf_rule_sets(_api::ApplicationGatewaysApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_waf_rule_sets(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_list_available_waf_rule_sets(_api::ApplicationGatewaysApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_list_available_waf_rule_sets(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_start_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_start(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_application_gateways_start_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Starts the specified application gateway.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function application_gateways_start(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_start(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_start(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_start(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_stop_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_stop(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_application_gateways_stop_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Stops the specified application gateway in a resource group.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function application_gateways_stop(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_stop(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_stop(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_stop(_api, resource_group_name, application_gateway_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_application_gateways_update_tags_ApplicationGatewaysApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ApplicationGateway,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_application_gateways_update_tags(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_application_gateways_update_tags_ApplicationGatewaysApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "applicationGatewayName", application_gateway_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates the specified application gateway tags.

Params:
- resource_group_name::String (required)
- application_gateway_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TagsObject (required)

Return: ApplicationGateway, OpenAPI.Clients.ApiResponse
"""
function application_gateways_update_tags(_api::ApplicationGatewaysApi, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_update_tags(_api, resource_group_name, application_gateway_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function application_gateways_update_tags(_api::ApplicationGatewaysApi, response_stream::Channel, resource_group_name::String, application_gateway_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_application_gateways_update_tags(_api, resource_group_name, application_gateway_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export application_gateways_backend_health
export application_gateways_backend_health_on_demand
export application_gateways_create_or_update
export application_gateways_delete
export application_gateways_get
export application_gateways_get_ssl_predefined_policy
export application_gateways_list
export application_gateways_list_all
export application_gateways_list_available_request_headers
export application_gateways_list_available_response_headers
export application_gateways_list_available_server_variables
export application_gateways_list_available_ssl_options
export application_gateways_list_available_ssl_predefined_policies
export application_gateways_list_available_waf_rule_sets
export application_gateways_start
export application_gateways_stop
export application_gateways_update_tags
