# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayBackendHealthHttpSettings
Application gateway BackendHealthHttp settings.

    ApplicationGatewayBackendHealthHttpSettings(;
        backendHttpSettings=nothing,
        servers=nothing,
    )

    - backendHttpSettings::ApplicationGatewayBackendHttpSettings
    - servers::Vector{ApplicationGatewayBackendHealthServer} : List of ApplicationGatewayBackendHealthServer resources.
"""
Base.@kwdef mutable struct ApplicationGatewayBackendHealthHttpSettings <: OpenAPI.APIModel
    backendHttpSettings = nothing # spec type: Union{ Nothing, ApplicationGatewayBackendHttpSettings }
    servers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayBackendHealthServer} }

    function ApplicationGatewayBackendHealthHttpSettings(backendHttpSettings, servers, )
        o = new(backendHttpSettings, servers, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewayBackendHealthHttpSettings

const _property_types_ApplicationGatewayBackendHealthHttpSettings = Dict{Symbol,String}(Symbol("backendHttpSettings")=>"ApplicationGatewayBackendHttpSettings", Symbol("servers")=>"Vector{ApplicationGatewayBackendHealthServer}", )
OpenAPI.property_type(::Type{ ApplicationGatewayBackendHealthHttpSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayBackendHealthHttpSettings[name]))}

function OpenAPI.check_required(o::ApplicationGatewayBackendHealthHttpSettings)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewayBackendHealthHttpSettings)
    OpenAPI.validate_property(ApplicationGatewayBackendHealthHttpSettings, Symbol("backendHttpSettings"), o.backendHttpSettings)
    OpenAPI.validate_property(ApplicationGatewayBackendHealthHttpSettings, Symbol("servers"), o.servers)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayBackendHealthHttpSettings }, name::Symbol, val)


end
