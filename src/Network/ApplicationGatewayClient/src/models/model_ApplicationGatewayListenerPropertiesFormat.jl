# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayListenerPropertiesFormat
Properties of listener of an application gateway.

    ApplicationGatewayListenerPropertiesFormat(;
        frontendIPConfiguration=nothing,
        frontendPort=nothing,
        protocol=nothing,
        sslCertificate=nothing,
        sslProfile=nothing,
        provisioningState=nothing,
        hostNames=nothing,
    )

    - frontendIPConfiguration::SubResource
    - frontendPort::SubResource
    - protocol::ApplicationGatewayProtocol
    - sslCertificate::SubResource
    - sslProfile::SubResource
    - provisioningState::ProvisioningState
    - hostNames::Vector{String} : List of Server Name Indications(SNI) for TLS Multi-site Listener that allows special wildcard characters as well.
"""
Base.@kwdef mutable struct ApplicationGatewayListenerPropertiesFormat <: OpenAPI.APIModel
    frontendIPConfiguration = nothing # spec type: Union{ Nothing, SubResource }
    frontendPort = nothing # spec type: Union{ Nothing, SubResource }
    protocol = nothing # spec type: Union{ Nothing, ApplicationGatewayProtocol }
    sslCertificate = nothing # spec type: Union{ Nothing, SubResource }
    sslProfile = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    hostNames::Union{Nothing, Vector{String}} = nothing

    function ApplicationGatewayListenerPropertiesFormat(frontendIPConfiguration, frontendPort, protocol, sslCertificate, sslProfile, provisioningState, hostNames, )
        o = new(frontendIPConfiguration, frontendPort, protocol, sslCertificate, sslProfile, provisioningState, hostNames, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewayListenerPropertiesFormat

const _property_types_ApplicationGatewayListenerPropertiesFormat = Dict{Symbol,String}(Symbol("frontendIPConfiguration")=>"SubResource", Symbol("frontendPort")=>"SubResource", Symbol("protocol")=>"ApplicationGatewayProtocol", Symbol("sslCertificate")=>"SubResource", Symbol("sslProfile")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState", Symbol("hostNames")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ApplicationGatewayListenerPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayListenerPropertiesFormat[name]))}

function OpenAPI.check_required(o::ApplicationGatewayListenerPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewayListenerPropertiesFormat)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("frontendIPConfiguration"), o.frontendIPConfiguration)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("frontendPort"), o.frontendPort)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("protocol"), o.protocol)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("sslCertificate"), o.sslCertificate)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("sslProfile"), o.sslProfile)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(ApplicationGatewayListenerPropertiesFormat, Symbol("hostNames"), o.hostNames)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayListenerPropertiesFormat }, name::Symbol, val)







end
