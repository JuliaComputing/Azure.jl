# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayRoutingRulePropertiesFormat
Properties of routing rule of the application gateway.

    ApplicationGatewayRoutingRulePropertiesFormat(;
        ruleType=nothing,
        priority=nothing,
        backendAddressPool=nothing,
        backendSettings=nothing,
        listener=nothing,
        provisioningState=nothing,
    )

    - ruleType::String : Rule type.
    - priority::Int64 : Priority of the routing rule.
    - backendAddressPool::SubResource
    - backendSettings::SubResource
    - listener::SubResource
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ApplicationGatewayRoutingRulePropertiesFormat <: OpenAPI.APIModel
    ruleType::Union{Nothing, String} = nothing
    priority::Union{Nothing, Int64} = nothing
    backendAddressPool = nothing # spec type: Union{ Nothing, SubResource }
    backendSettings = nothing # spec type: Union{ Nothing, SubResource }
    listener = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ApplicationGatewayRoutingRulePropertiesFormat(ruleType, priority, backendAddressPool, backendSettings, listener, provisioningState, )
        o = new(ruleType, priority, backendAddressPool, backendSettings, listener, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewayRoutingRulePropertiesFormat

const _property_types_ApplicationGatewayRoutingRulePropertiesFormat = Dict{Symbol,String}(Symbol("ruleType")=>"String", Symbol("priority")=>"Int64", Symbol("backendAddressPool")=>"SubResource", Symbol("backendSettings")=>"SubResource", Symbol("listener")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ApplicationGatewayRoutingRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayRoutingRulePropertiesFormat[name]))}

function OpenAPI.check_required(o::ApplicationGatewayRoutingRulePropertiesFormat)
    o.priority === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewayRoutingRulePropertiesFormat)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("ruleType"), o.ruleType)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("priority"), o.priority)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("backendAddressPool"), o.backendAddressPool)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("backendSettings"), o.backendSettings)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("listener"), o.listener)
    OpenAPI.validate_property(ApplicationGatewayRoutingRulePropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayRoutingRulePropertiesFormat }, name::Symbol, val)

    if name === Symbol("ruleType")
        OpenAPI.validate_param(name, "ApplicationGatewayRoutingRulePropertiesFormat", :enum, val, ["Basic", "PathBasedRouting"])
    end


    if name === Symbol("priority")
        OpenAPI.validate_param(name, "ApplicationGatewayRoutingRulePropertiesFormat", :format, val, "int32")
    end
    if name === Symbol("priority")
        OpenAPI.validate_param(name, "ApplicationGatewayRoutingRulePropertiesFormat", :maximum, val, 20000, false)
        OpenAPI.validate_param(name, "ApplicationGatewayRoutingRulePropertiesFormat", :minimum, val, 1, false)
    end




end
