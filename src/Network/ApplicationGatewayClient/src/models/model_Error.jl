# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Error
Common error representation.

    Error(;
        code=nothing,
        message=nothing,
        target=nothing,
        details=nothing,
        innerError=nothing,
    )

    - code::String : Error code.
    - message::String : Error message.
    - target::String : Error target.
    - details::Vector{ErrorDetails} : Error details.
    - innerError::String : Inner error message.
"""
Base.@kwdef mutable struct Error <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    target::Union{Nothing, String} = nothing
    details::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ErrorDetails} }
    innerError::Union{Nothing, String} = nothing

    function Error(code, message, target, details, innerError, )
        OpenAPI.validate_property(Error, Symbol("code"), code)
        OpenAPI.validate_property(Error, Symbol("message"), message)
        OpenAPI.validate_property(Error, Symbol("target"), target)
        OpenAPI.validate_property(Error, Symbol("details"), details)
        OpenAPI.validate_property(Error, Symbol("innerError"), innerError)
        return new(code, message, target, details, innerError, )
    end
end # type Error

const _property_types_Error = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("message")=>"String", Symbol("target")=>"String", Symbol("details")=>"Vector{ErrorDetails}", Symbol("innerError")=>"String", )
OpenAPI.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Error[name]))}

function check_required(o::Error)
    true
end

function OpenAPI.validate_property(::Type{ Error }, name::Symbol, val)
end
