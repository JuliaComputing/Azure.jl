# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewaySslPolicy
Application Gateway Ssl policy.

    ApplicationGatewaySslPolicy(;
        disabledSslProtocols=nothing,
        policyType=nothing,
        policyName=nothing,
        cipherSuites=nothing,
        minProtocolVersion=nothing,
    )

    - disabledSslProtocols::Vector{ProtocolsEnum} : Ssl protocols to be disabled on application gateway.
    - policyType::String : Type of Ssl Policy.
    - policyName::PolicyNameEnum
    - cipherSuites::Vector{CipherSuitesEnum} : Ssl cipher suites to be enabled in the specified order to application gateway.
    - minProtocolVersion::ProtocolsEnum
"""
Base.@kwdef mutable struct ApplicationGatewaySslPolicy <: OpenAPI.APIModel
    disabledSslProtocols::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProtocolsEnum} }
    policyType::Union{Nothing, String} = nothing
    policyName = nothing # spec type: Union{ Nothing, PolicyNameEnum }
    cipherSuites::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CipherSuitesEnum} }
    minProtocolVersion = nothing # spec type: Union{ Nothing, ProtocolsEnum }

    function ApplicationGatewaySslPolicy(disabledSslProtocols, policyType, policyName, cipherSuites, minProtocolVersion, )
        o = new(disabledSslProtocols, policyType, policyName, cipherSuites, minProtocolVersion, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewaySslPolicy

const _property_types_ApplicationGatewaySslPolicy = Dict{Symbol,String}(Symbol("disabledSslProtocols")=>"Vector{ProtocolsEnum}", Symbol("policyType")=>"String", Symbol("policyName")=>"PolicyNameEnum", Symbol("cipherSuites")=>"Vector{CipherSuitesEnum}", Symbol("minProtocolVersion")=>"ProtocolsEnum", )
OpenAPI.property_type(::Type{ ApplicationGatewaySslPolicy }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewaySslPolicy[name]))}

function OpenAPI.check_required(o::ApplicationGatewaySslPolicy)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewaySslPolicy)
    OpenAPI.validate_property(ApplicationGatewaySslPolicy, Symbol("disabledSslProtocols"), o.disabledSslProtocols)
    OpenAPI.validate_property(ApplicationGatewaySslPolicy, Symbol("policyType"), o.policyType)
    OpenAPI.validate_property(ApplicationGatewaySslPolicy, Symbol("policyName"), o.policyName)
    OpenAPI.validate_property(ApplicationGatewaySslPolicy, Symbol("cipherSuites"), o.cipherSuites)
    OpenAPI.validate_property(ApplicationGatewaySslPolicy, Symbol("minProtocolVersion"), o.minProtocolVersion)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewaySslPolicy }, name::Symbol, val)


    if name === Symbol("policyType")
        OpenAPI.validate_param(name, "ApplicationGatewaySslPolicy", :enum, val, ["Predefined", "Custom", "CustomV2"])
    end




end
