# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayBackendHealthServer
Application gateway backendhealth http settings.

    ApplicationGatewayBackendHealthServer(;
        address=nothing,
        ipConfiguration=nothing,
        health=nothing,
        healthProbeLog=nothing,
    )

    - address::String : IP address or FQDN of backend server.
    - ipConfiguration::NetworkInterfaceIPConfiguration
    - health::String : Health of backend server.
    - healthProbeLog::String : Health Probe Log.
"""
Base.@kwdef mutable struct ApplicationGatewayBackendHealthServer <: OpenAPI.APIModel
    address::Union{Nothing, String} = nothing
    ipConfiguration = nothing # spec type: Union{ Nothing, NetworkInterfaceIPConfiguration }
    health::Union{Nothing, String} = nothing
    healthProbeLog::Union{Nothing, String} = nothing

    function ApplicationGatewayBackendHealthServer(address, ipConfiguration, health, healthProbeLog, )
        OpenAPI.validate_property(ApplicationGatewayBackendHealthServer, Symbol("address"), address)
        OpenAPI.validate_property(ApplicationGatewayBackendHealthServer, Symbol("ipConfiguration"), ipConfiguration)
        OpenAPI.validate_property(ApplicationGatewayBackendHealthServer, Symbol("health"), health)
        OpenAPI.validate_property(ApplicationGatewayBackendHealthServer, Symbol("healthProbeLog"), healthProbeLog)
        return new(address, ipConfiguration, health, healthProbeLog, )
    end
end # type ApplicationGatewayBackendHealthServer

const _property_types_ApplicationGatewayBackendHealthServer = Dict{Symbol,String}(Symbol("address")=>"String", Symbol("ipConfiguration")=>"NetworkInterfaceIPConfiguration", Symbol("health")=>"String", Symbol("healthProbeLog")=>"String", )
OpenAPI.property_type(::Type{ ApplicationGatewayBackendHealthServer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayBackendHealthServer[name]))}

function check_required(o::ApplicationGatewayBackendHealthServer)
    true
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayBackendHealthServer }, name::Symbol, val)
    if name === Symbol("health")
        OpenAPI.validate_param(name, "ApplicationGatewayBackendHealthServer", :enum, val, ["Unknown", "Up", "Down", "Partial", "Draining"])
    end
end
