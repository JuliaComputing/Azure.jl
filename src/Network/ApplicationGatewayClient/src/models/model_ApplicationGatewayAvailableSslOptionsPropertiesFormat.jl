# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayAvailableSslOptionsPropertiesFormat
Properties of ApplicationGatewayAvailableSslOptions.

    ApplicationGatewayAvailableSslOptionsPropertiesFormat(;
        predefinedPolicies=nothing,
        defaultPolicy=nothing,
        availableCipherSuites=nothing,
        availableProtocols=nothing,
    )

    - predefinedPolicies::Vector{SubResource} : List of available Ssl predefined policy.
    - defaultPolicy::PolicyNameEnum
    - availableCipherSuites::Vector{CipherSuitesEnum} : List of available Ssl cipher suites.
    - availableProtocols::Vector{ProtocolsEnum} : List of available Ssl protocols.
"""
Base.@kwdef mutable struct ApplicationGatewayAvailableSslOptionsPropertiesFormat <: OpenAPI.APIModel
    predefinedPolicies::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    defaultPolicy = nothing # spec type: Union{ Nothing, PolicyNameEnum }
    availableCipherSuites::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CipherSuitesEnum} }
    availableProtocols::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProtocolsEnum} }

    function ApplicationGatewayAvailableSslOptionsPropertiesFormat(predefinedPolicies, defaultPolicy, availableCipherSuites, availableProtocols, )
        o = new(predefinedPolicies, defaultPolicy, availableCipherSuites, availableProtocols, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewayAvailableSslOptionsPropertiesFormat

const _property_types_ApplicationGatewayAvailableSslOptionsPropertiesFormat = Dict{Symbol,String}(Symbol("predefinedPolicies")=>"Vector{SubResource}", Symbol("defaultPolicy")=>"PolicyNameEnum", Symbol("availableCipherSuites")=>"Vector{CipherSuitesEnum}", Symbol("availableProtocols")=>"Vector{ProtocolsEnum}", )
OpenAPI.property_type(::Type{ ApplicationGatewayAvailableSslOptionsPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayAvailableSslOptionsPropertiesFormat[name]))}

function OpenAPI.check_required(o::ApplicationGatewayAvailableSslOptionsPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewayAvailableSslOptionsPropertiesFormat)
    OpenAPI.validate_property(ApplicationGatewayAvailableSslOptionsPropertiesFormat, Symbol("predefinedPolicies"), o.predefinedPolicies)
    OpenAPI.validate_property(ApplicationGatewayAvailableSslOptionsPropertiesFormat, Symbol("defaultPolicy"), o.defaultPolicy)
    OpenAPI.validate_property(ApplicationGatewayAvailableSslOptionsPropertiesFormat, Symbol("availableCipherSuites"), o.availableCipherSuites)
    OpenAPI.validate_property(ApplicationGatewayAvailableSslOptionsPropertiesFormat, Symbol("availableProtocols"), o.availableProtocols)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayAvailableSslOptionsPropertiesFormat }, name::Symbol, val)




end
