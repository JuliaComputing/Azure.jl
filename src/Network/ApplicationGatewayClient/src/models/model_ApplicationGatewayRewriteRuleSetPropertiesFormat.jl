# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayRewriteRuleSetPropertiesFormat
Properties of rewrite rule set of the application gateway.

    ApplicationGatewayRewriteRuleSetPropertiesFormat(;
        rewriteRules=nothing,
        provisioningState=nothing,
    )

    - rewriteRules::Vector{ApplicationGatewayRewriteRule} : Rewrite rules in the rewrite rule set.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ApplicationGatewayRewriteRuleSetPropertiesFormat <: OpenAPI.APIModel
    rewriteRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayRewriteRule} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ApplicationGatewayRewriteRuleSetPropertiesFormat(rewriteRules, provisioningState, )
        o = new(rewriteRules, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewayRewriteRuleSetPropertiesFormat

const _property_types_ApplicationGatewayRewriteRuleSetPropertiesFormat = Dict{Symbol,String}(Symbol("rewriteRules")=>"Vector{ApplicationGatewayRewriteRule}", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ApplicationGatewayRewriteRuleSetPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayRewriteRuleSetPropertiesFormat[name]))}

function OpenAPI.check_required(o::ApplicationGatewayRewriteRuleSetPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewayRewriteRuleSetPropertiesFormat)
    OpenAPI.validate_property(ApplicationGatewayRewriteRuleSetPropertiesFormat, Symbol("rewriteRules"), o.rewriteRules)
    OpenAPI.validate_property(ApplicationGatewayRewriteRuleSetPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayRewriteRuleSetPropertiesFormat }, name::Symbol, val)


end
