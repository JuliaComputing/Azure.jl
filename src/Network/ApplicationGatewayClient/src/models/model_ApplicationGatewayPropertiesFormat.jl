# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayPropertiesFormat
Properties of the application gateway.

    ApplicationGatewayPropertiesFormat(;
        sku=nothing,
        sslPolicy=nothing,
        operationalState=nothing,
        gatewayIPConfigurations=nothing,
        authenticationCertificates=nothing,
        trustedRootCertificates=nothing,
        sslCertificates=nothing,
        frontendIPConfigurations=nothing,
        frontendPorts=nothing,
        probes=nothing,
        backendAddressPools=nothing,
        backendHttpSettingsCollection=nothing,
        httpListeners=nothing,
        urlPathMaps=nothing,
        requestRoutingRules=nothing,
        rewriteRuleSets=nothing,
        redirectConfigurations=nothing,
        webApplicationFirewallConfiguration=nothing,
        firewallPolicy=nothing,
        enableHttp2=nothing,
        enableFips=nothing,
        autoscaleConfiguration=nothing,
        privateLinkConfigurations=nothing,
        privateEndpointConnections=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
        customErrorConfigurations=nothing,
        forceFirewallPolicyAssociation=nothing,
    )

    - sku::ApplicationGatewaySku
    - sslPolicy::ApplicationGatewaySslPolicy
    - operationalState::String : Operational state of the application gateway resource.
    - gatewayIPConfigurations::Vector{ApplicationGatewayIPConfiguration} : Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - authenticationCertificates::Vector{ApplicationGatewayAuthenticationCertificate} : Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - trustedRootCertificates::Vector{ApplicationGatewayTrustedRootCertificate} : Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - sslCertificates::Vector{ApplicationGatewaySslCertificate} : SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - frontendIPConfigurations::Vector{ApplicationGatewayFrontendIPConfiguration} : Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - frontendPorts::Vector{ApplicationGatewayFrontendPort} : Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - probes::Vector{ApplicationGatewayProbe} : Probes of the application gateway resource.
    - backendAddressPools::Vector{ApplicationGatewayBackendAddressPool} : Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - backendHttpSettingsCollection::Vector{ApplicationGatewayBackendHttpSettings} : Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - httpListeners::Vector{ApplicationGatewayHttpListener} : Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - urlPathMaps::Vector{ApplicationGatewayUrlPathMap} : URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - requestRoutingRules::Vector{ApplicationGatewayRequestRoutingRule} : Request routing rules of the application gateway resource.
    - rewriteRuleSets::Vector{ApplicationGatewayRewriteRuleSet} : Rewrite rules for the application gateway resource.
    - redirectConfigurations::Vector{ApplicationGatewayRedirectConfiguration} : Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
    - webApplicationFirewallConfiguration::ApplicationGatewayWebApplicationFirewallConfiguration
    - firewallPolicy::SubResource
    - enableHttp2::Bool : Whether HTTP2 is enabled on the application gateway resource.
    - enableFips::Bool : Whether FIPS is enabled on the application gateway resource.
    - autoscaleConfiguration::ApplicationGatewayAutoscaleConfiguration
    - privateLinkConfigurations::Vector{ApplicationGatewayPrivateLinkConfiguration} : PrivateLink configurations on application gateway.
    - privateEndpointConnections::Vector{ApplicationGatewayPrivateEndpointConnection} : Private Endpoint connections on application gateway.
    - resourceGuid::String : The resource GUID property of the application gateway resource.
    - provisioningState::ProvisioningState
    - customErrorConfigurations::Vector{ApplicationGatewayCustomError} : Custom error configurations of the application gateway resource.
    - forceFirewallPolicyAssociation::Bool : If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
"""
Base.@kwdef mutable struct ApplicationGatewayPropertiesFormat <: OpenAPI.APIModel
    sku = nothing # spec type: Union{ Nothing, ApplicationGatewaySku }
    sslPolicy = nothing # spec type: Union{ Nothing, ApplicationGatewaySslPolicy }
    operationalState::Union{Nothing, String} = nothing
    gatewayIPConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayIPConfiguration} }
    authenticationCertificates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayAuthenticationCertificate} }
    trustedRootCertificates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayTrustedRootCertificate} }
    sslCertificates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewaySslCertificate} }
    frontendIPConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayFrontendIPConfiguration} }
    frontendPorts::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayFrontendPort} }
    probes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayProbe} }
    backendAddressPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayBackendAddressPool} }
    backendHttpSettingsCollection::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayBackendHttpSettings} }
    httpListeners::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayHttpListener} }
    urlPathMaps::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayUrlPathMap} }
    requestRoutingRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayRequestRoutingRule} }
    rewriteRuleSets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayRewriteRuleSet} }
    redirectConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayRedirectConfiguration} }
    webApplicationFirewallConfiguration = nothing # spec type: Union{ Nothing, ApplicationGatewayWebApplicationFirewallConfiguration }
    firewallPolicy = nothing # spec type: Union{ Nothing, SubResource }
    enableHttp2::Union{Nothing, Bool} = nothing
    enableFips::Union{Nothing, Bool} = nothing
    autoscaleConfiguration = nothing # spec type: Union{ Nothing, ApplicationGatewayAutoscaleConfiguration }
    privateLinkConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayPrivateLinkConfiguration} }
    privateEndpointConnections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayPrivateEndpointConnection} }
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    customErrorConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ApplicationGatewayCustomError} }
    forceFirewallPolicyAssociation::Union{Nothing, Bool} = nothing

    function ApplicationGatewayPropertiesFormat(sku, sslPolicy, operationalState, gatewayIPConfigurations, authenticationCertificates, trustedRootCertificates, sslCertificates, frontendIPConfigurations, frontendPorts, probes, backendAddressPools, backendHttpSettingsCollection, httpListeners, urlPathMaps, requestRoutingRules, rewriteRuleSets, redirectConfigurations, webApplicationFirewallConfiguration, firewallPolicy, enableHttp2, enableFips, autoscaleConfiguration, privateLinkConfigurations, privateEndpointConnections, resourceGuid, provisioningState, customErrorConfigurations, forceFirewallPolicyAssociation, )
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("sku"), sku)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("sslPolicy"), sslPolicy)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("operationalState"), operationalState)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("gatewayIPConfigurations"), gatewayIPConfigurations)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("authenticationCertificates"), authenticationCertificates)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("trustedRootCertificates"), trustedRootCertificates)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("sslCertificates"), sslCertificates)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("frontendIPConfigurations"), frontendIPConfigurations)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("frontendPorts"), frontendPorts)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("probes"), probes)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("backendAddressPools"), backendAddressPools)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("backendHttpSettingsCollection"), backendHttpSettingsCollection)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("httpListeners"), httpListeners)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("urlPathMaps"), urlPathMaps)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("requestRoutingRules"), requestRoutingRules)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("rewriteRuleSets"), rewriteRuleSets)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("redirectConfigurations"), redirectConfigurations)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("webApplicationFirewallConfiguration"), webApplicationFirewallConfiguration)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("firewallPolicy"), firewallPolicy)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("enableHttp2"), enableHttp2)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("enableFips"), enableFips)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("autoscaleConfiguration"), autoscaleConfiguration)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("privateLinkConfigurations"), privateLinkConfigurations)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("privateEndpointConnections"), privateEndpointConnections)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("resourceGuid"), resourceGuid)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("customErrorConfigurations"), customErrorConfigurations)
        OpenAPI.validate_property(ApplicationGatewayPropertiesFormat, Symbol("forceFirewallPolicyAssociation"), forceFirewallPolicyAssociation)
        return new(sku, sslPolicy, operationalState, gatewayIPConfigurations, authenticationCertificates, trustedRootCertificates, sslCertificates, frontendIPConfigurations, frontendPorts, probes, backendAddressPools, backendHttpSettingsCollection, httpListeners, urlPathMaps, requestRoutingRules, rewriteRuleSets, redirectConfigurations, webApplicationFirewallConfiguration, firewallPolicy, enableHttp2, enableFips, autoscaleConfiguration, privateLinkConfigurations, privateEndpointConnections, resourceGuid, provisioningState, customErrorConfigurations, forceFirewallPolicyAssociation, )
    end
end # type ApplicationGatewayPropertiesFormat

const _property_types_ApplicationGatewayPropertiesFormat = Dict{Symbol,String}(Symbol("sku")=>"ApplicationGatewaySku", Symbol("sslPolicy")=>"ApplicationGatewaySslPolicy", Symbol("operationalState")=>"String", Symbol("gatewayIPConfigurations")=>"Vector{ApplicationGatewayIPConfiguration}", Symbol("authenticationCertificates")=>"Vector{ApplicationGatewayAuthenticationCertificate}", Symbol("trustedRootCertificates")=>"Vector{ApplicationGatewayTrustedRootCertificate}", Symbol("sslCertificates")=>"Vector{ApplicationGatewaySslCertificate}", Symbol("frontendIPConfigurations")=>"Vector{ApplicationGatewayFrontendIPConfiguration}", Symbol("frontendPorts")=>"Vector{ApplicationGatewayFrontendPort}", Symbol("probes")=>"Vector{ApplicationGatewayProbe}", Symbol("backendAddressPools")=>"Vector{ApplicationGatewayBackendAddressPool}", Symbol("backendHttpSettingsCollection")=>"Vector{ApplicationGatewayBackendHttpSettings}", Symbol("httpListeners")=>"Vector{ApplicationGatewayHttpListener}", Symbol("urlPathMaps")=>"Vector{ApplicationGatewayUrlPathMap}", Symbol("requestRoutingRules")=>"Vector{ApplicationGatewayRequestRoutingRule}", Symbol("rewriteRuleSets")=>"Vector{ApplicationGatewayRewriteRuleSet}", Symbol("redirectConfigurations")=>"Vector{ApplicationGatewayRedirectConfiguration}", Symbol("webApplicationFirewallConfiguration")=>"ApplicationGatewayWebApplicationFirewallConfiguration", Symbol("firewallPolicy")=>"SubResource", Symbol("enableHttp2")=>"Bool", Symbol("enableFips")=>"Bool", Symbol("autoscaleConfiguration")=>"ApplicationGatewayAutoscaleConfiguration", Symbol("privateLinkConfigurations")=>"Vector{ApplicationGatewayPrivateLinkConfiguration}", Symbol("privateEndpointConnections")=>"Vector{ApplicationGatewayPrivateEndpointConnection}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("customErrorConfigurations")=>"Vector{ApplicationGatewayCustomError}", Symbol("forceFirewallPolicyAssociation")=>"Bool", )
OpenAPI.property_type(::Type{ ApplicationGatewayPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayPropertiesFormat[name]))}

function check_required(o::ApplicationGatewayPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayPropertiesFormat }, name::Symbol, val)
    if name === Symbol("operationalState")
        OpenAPI.validate_param(name, "ApplicationGatewayPropertiesFormat", :enum, val, ["Stopped", "Starting", "Running", "Stopping"])
    end
end
