# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewayBackendHttpSettingsPropertiesFormat
Properties of Backend address pool settings of an application gateway.

    ApplicationGatewayBackendHttpSettingsPropertiesFormat(;
        port=nothing,
        protocol=nothing,
        cookieBasedAffinity=nothing,
        requestTimeout=nothing,
        probe=nothing,
        authenticationCertificates=nothing,
        trustedRootCertificates=nothing,
        connectionDraining=nothing,
        hostName=nothing,
        pickHostNameFromBackendAddress=nothing,
        affinityCookieName=nothing,
        probeEnabled=nothing,
        path=nothing,
        provisioningState=nothing,
    )

    - port::Int64 : The destination port on the backend.
    - protocol::ApplicationGatewayProtocol
    - cookieBasedAffinity::String : Cookie based affinity.
    - requestTimeout::Int64 : Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
    - probe::SubResource
    - authenticationCertificates::Vector{SubResource} : Array of references to application gateway authentication certificates.
    - trustedRootCertificates::Vector{SubResource} : Array of references to application gateway trusted root certificates.
    - connectionDraining::ApplicationGatewayConnectionDraining
    - hostName::String : Host header to be sent to the backend servers.
    - pickHostNameFromBackendAddress::Bool : Whether to pick host header should be picked from the host name of the backend server. Default value is false.
    - affinityCookieName::String : Cookie name to use for the affinity cookie.
    - probeEnabled::Bool : Whether the probe is enabled. Default value is false.
    - path::String : Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ApplicationGatewayBackendHttpSettingsPropertiesFormat <: OpenAPI.APIModel
    port::Union{Nothing, Int64} = nothing
    protocol = nothing # spec type: Union{ Nothing, ApplicationGatewayProtocol }
    cookieBasedAffinity::Union{Nothing, String} = nothing
    requestTimeout::Union{Nothing, Int64} = nothing
    probe = nothing # spec type: Union{ Nothing, SubResource }
    authenticationCertificates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    trustedRootCertificates::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    connectionDraining = nothing # spec type: Union{ Nothing, ApplicationGatewayConnectionDraining }
    hostName::Union{Nothing, String} = nothing
    pickHostNameFromBackendAddress::Union{Nothing, Bool} = nothing
    affinityCookieName::Union{Nothing, String} = nothing
    probeEnabled::Union{Nothing, Bool} = nothing
    path::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ApplicationGatewayBackendHttpSettingsPropertiesFormat(port, protocol, cookieBasedAffinity, requestTimeout, probe, authenticationCertificates, trustedRootCertificates, connectionDraining, hostName, pickHostNameFromBackendAddress, affinityCookieName, probeEnabled, path, provisioningState, )
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("port"), port)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("protocol"), protocol)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("cookieBasedAffinity"), cookieBasedAffinity)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("requestTimeout"), requestTimeout)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("probe"), probe)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("authenticationCertificates"), authenticationCertificates)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("trustedRootCertificates"), trustedRootCertificates)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("connectionDraining"), connectionDraining)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("hostName"), hostName)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("pickHostNameFromBackendAddress"), pickHostNameFromBackendAddress)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("affinityCookieName"), affinityCookieName)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("probeEnabled"), probeEnabled)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("path"), path)
        OpenAPI.validate_property(ApplicationGatewayBackendHttpSettingsPropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(port, protocol, cookieBasedAffinity, requestTimeout, probe, authenticationCertificates, trustedRootCertificates, connectionDraining, hostName, pickHostNameFromBackendAddress, affinityCookieName, probeEnabled, path, provisioningState, )
    end
end # type ApplicationGatewayBackendHttpSettingsPropertiesFormat

const _property_types_ApplicationGatewayBackendHttpSettingsPropertiesFormat = Dict{Symbol,String}(Symbol("port")=>"Int64", Symbol("protocol")=>"ApplicationGatewayProtocol", Symbol("cookieBasedAffinity")=>"String", Symbol("requestTimeout")=>"Int64", Symbol("probe")=>"SubResource", Symbol("authenticationCertificates")=>"Vector{SubResource}", Symbol("trustedRootCertificates")=>"Vector{SubResource}", Symbol("connectionDraining")=>"ApplicationGatewayConnectionDraining", Symbol("hostName")=>"String", Symbol("pickHostNameFromBackendAddress")=>"Bool", Symbol("affinityCookieName")=>"String", Symbol("probeEnabled")=>"Bool", Symbol("path")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ApplicationGatewayBackendHttpSettingsPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewayBackendHttpSettingsPropertiesFormat[name]))}

function check_required(o::ApplicationGatewayBackendHttpSettingsPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ ApplicationGatewayBackendHttpSettingsPropertiesFormat }, name::Symbol, val)
    if name === Symbol("port")
        OpenAPI.validate_param(name, "ApplicationGatewayBackendHttpSettingsPropertiesFormat", :format, val, "int32")
    end
    if name === Symbol("cookieBasedAffinity")
        OpenAPI.validate_param(name, "ApplicationGatewayBackendHttpSettingsPropertiesFormat", :enum, val, ["Enabled", "Disabled"])
    end
    if name === Symbol("requestTimeout")
        OpenAPI.validate_param(name, "ApplicationGatewayBackendHttpSettingsPropertiesFormat", :format, val, "int32")
    end
end
