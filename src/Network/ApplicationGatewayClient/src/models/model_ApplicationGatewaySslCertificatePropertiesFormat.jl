# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewaySslCertificatePropertiesFormat
Properties of SSL certificates of an application gateway.

    ApplicationGatewaySslCertificatePropertiesFormat(;
        data=nothing,
        password=nothing,
        publicCertData=nothing,
        keyVaultSecretId=nothing,
        provisioningState=nothing,
    )

    - data::String : Base-64 encoded pfx certificate. Only applicable in PUT Request.
    - password::String : Password for the pfx file specified in data. Only applicable in PUT request.
    - publicCertData::String : Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
    - keyVaultSecretId::String : Secret Id of (base-64 encoded unencrypted pfx) &#39;Secret&#39; or &#39;Certificate&#39; object stored in KeyVault.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ApplicationGatewaySslCertificatePropertiesFormat <: OpenAPI.APIModel
    data::Union{Nothing, String} = nothing
    password::Union{Nothing, String} = nothing
    publicCertData::Union{Nothing, String} = nothing
    keyVaultSecretId::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ApplicationGatewaySslCertificatePropertiesFormat(data, password, publicCertData, keyVaultSecretId, provisioningState, )
        o = new(data, password, publicCertData, keyVaultSecretId, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ApplicationGatewaySslCertificatePropertiesFormat

const _property_types_ApplicationGatewaySslCertificatePropertiesFormat = Dict{Symbol,String}(Symbol("data")=>"String", Symbol("password")=>"String", Symbol("publicCertData")=>"String", Symbol("keyVaultSecretId")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ApplicationGatewaySslCertificatePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewaySslCertificatePropertiesFormat[name]))}

function OpenAPI.check_required(o::ApplicationGatewaySslCertificatePropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::ApplicationGatewaySslCertificatePropertiesFormat)
    OpenAPI.validate_property(ApplicationGatewaySslCertificatePropertiesFormat, Symbol("data"), o.data)
    OpenAPI.validate_property(ApplicationGatewaySslCertificatePropertiesFormat, Symbol("password"), o.password)
    OpenAPI.validate_property(ApplicationGatewaySslCertificatePropertiesFormat, Symbol("publicCertData"), o.publicCertData)
    OpenAPI.validate_property(ApplicationGatewaySslCertificatePropertiesFormat, Symbol("keyVaultSecretId"), o.keyVaultSecretId)
    OpenAPI.validate_property(ApplicationGatewaySslCertificatePropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ ApplicationGatewaySslCertificatePropertiesFormat }, name::Symbol, val)





end
