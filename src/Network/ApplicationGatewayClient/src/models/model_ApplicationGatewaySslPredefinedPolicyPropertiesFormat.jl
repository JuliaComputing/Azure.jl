# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ApplicationGatewaySslPredefinedPolicyPropertiesFormat
Properties of ApplicationGatewaySslPredefinedPolicy.

    ApplicationGatewaySslPredefinedPolicyPropertiesFormat(;
        cipherSuites=nothing,
        minProtocolVersion=nothing,
    )

    - cipherSuites::Vector{CipherSuitesEnum} : Ssl cipher suites to be enabled in the specified order for application gateway.
    - minProtocolVersion::ProtocolsEnum
"""
Base.@kwdef mutable struct ApplicationGatewaySslPredefinedPolicyPropertiesFormat <: OpenAPI.APIModel
    cipherSuites::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CipherSuitesEnum} }
    minProtocolVersion = nothing # spec type: Union{ Nothing, ProtocolsEnum }

    function ApplicationGatewaySslPredefinedPolicyPropertiesFormat(cipherSuites, minProtocolVersion, )
        OpenAPI.validate_property(ApplicationGatewaySslPredefinedPolicyPropertiesFormat, Symbol("cipherSuites"), cipherSuites)
        OpenAPI.validate_property(ApplicationGatewaySslPredefinedPolicyPropertiesFormat, Symbol("minProtocolVersion"), minProtocolVersion)
        return new(cipherSuites, minProtocolVersion, )
    end
end # type ApplicationGatewaySslPredefinedPolicyPropertiesFormat

const _property_types_ApplicationGatewaySslPredefinedPolicyPropertiesFormat = Dict{Symbol,String}(Symbol("cipherSuites")=>"Vector{CipherSuitesEnum}", Symbol("minProtocolVersion")=>"ProtocolsEnum", )
OpenAPI.property_type(::Type{ ApplicationGatewaySslPredefinedPolicyPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ApplicationGatewaySslPredefinedPolicyPropertiesFormat[name]))}

function check_required(o::ApplicationGatewaySslPredefinedPolicyPropertiesFormat)
    true
end

function OpenAPI.validate_property(::Type{ ApplicationGatewaySslPredefinedPolicyPropertiesFormat }, name::Symbol, val)
end
