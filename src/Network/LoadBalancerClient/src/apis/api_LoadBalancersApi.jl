# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct LoadBalancersApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `LoadBalancersApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ LoadBalancersApi }) = "https://management.azure.com"

const _returntypes_inbound_nat_rules_create_or_update_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => InboundNatRule,
    Regex("^" * replace("200", "x"=>".") * "\$") => InboundNatRule,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_inbound_nat_rules_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String, inbound_nat_rule_parameters::InboundNatRule; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_inbound_nat_rules_create_or_update_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}", ["azure_auth", ], inbound_nat_rule_parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "inboundNatRuleName", inbound_nat_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a load balancer inbound NAT rule.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- inbound_nat_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- inbound_nat_rule_parameters::InboundNatRule (required)

Return: InboundNatRule, OpenAPI.Clients.ApiResponse
"""
function inbound_nat_rules_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String, inbound_nat_rule_parameters::InboundNatRule; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_create_or_update(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id, inbound_nat_rule_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function inbound_nat_rules_create_or_update(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String, inbound_nat_rule_parameters::InboundNatRule; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_create_or_update(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id, inbound_nat_rule_parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_inbound_nat_rules_delete_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_inbound_nat_rules_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_inbound_nat_rules_delete_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "inboundNatRuleName", inbound_nat_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified load balancer inbound NAT rule.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- inbound_nat_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function inbound_nat_rules_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_delete(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function inbound_nat_rules_delete(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_delete(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_inbound_nat_rules_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => InboundNatRule,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_inbound_nat_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_inbound_nat_rules_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules/{inboundNatRuleName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "inboundNatRuleName", inbound_nat_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified load balancer inbound NAT rule.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- inbound_nat_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: InboundNatRule, OpenAPI.Clients.ApiResponse
"""
function inbound_nat_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_get(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function inbound_nat_rules_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, inbound_nat_rule_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_get(_api, resource_group_name, load_balancer_name, inbound_nat_rule_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_inbound_nat_rules_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => InboundNatRuleListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_inbound_nat_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_inbound_nat_rules_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/inboundNatRules", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the inbound NAT rules in a load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: InboundNatRuleListResult, OpenAPI.Clients.ApiResponse
"""
function inbound_nat_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function inbound_nat_rules_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_inbound_nat_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_backend_address_pools_create_or_update_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => BackendAddressPool,
    Regex("^" * replace("200", "x"=>".") * "\$") => BackendAddressPool,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_backend_address_pools_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String, parameters::BackendAddressPool; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_load_balancer_backend_address_pools_create_or_update_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "backendAddressPoolName", backend_address_pool_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a load balancer backend address pool.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- backend_address_pool_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::BackendAddressPool (required)

Return: BackendAddressPool, OpenAPI.Clients.ApiResponse
"""
function load_balancer_backend_address_pools_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String, parameters::BackendAddressPool; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_create_or_update(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_backend_address_pools_create_or_update(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String, parameters::BackendAddressPool; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_create_or_update(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_backend_address_pools_delete_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_backend_address_pools_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_load_balancer_backend_address_pools_delete_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "backendAddressPoolName", backend_address_pool_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified load balancer backend address pool.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- backend_address_pool_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function load_balancer_backend_address_pools_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_delete(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_backend_address_pools_delete(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_delete(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_backend_address_pools_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BackendAddressPool,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_backend_address_pools_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_backend_address_pools_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendAddressPoolName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "backendAddressPoolName", backend_address_pool_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets load balancer backend address pool.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- backend_address_pool_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: BackendAddressPool, OpenAPI.Clients.ApiResponse
"""
function load_balancer_backend_address_pools_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_get(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_backend_address_pools_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, backend_address_pool_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_get(_api, resource_group_name, load_balancer_name, backend_address_pool_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_backend_address_pools_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerBackendAddressPoolListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_backend_address_pools_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_backend_address_pools_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancer backed address pools.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerBackendAddressPoolListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_backend_address_pools_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_backend_address_pools_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_backend_address_pools_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_frontend_i_p_configurations_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => FrontendIPConfiguration,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_frontend_i_p_configurations_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, frontend_i_p_configuration_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_frontend_i_p_configurations_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations/{frontendIPConfigurationName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "frontendIPConfigurationName", frontend_i_p_configuration_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets load balancer frontend IP configuration.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- frontend_i_p_configuration_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: FrontendIPConfiguration, OpenAPI.Clients.ApiResponse
"""
function load_balancer_frontend_i_p_configurations_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, frontend_i_p_configuration_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_frontend_i_p_configurations_get(_api, resource_group_name, load_balancer_name, frontend_i_p_configuration_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_frontend_i_p_configurations_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, frontend_i_p_configuration_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_frontend_i_p_configurations_get(_api, resource_group_name, load_balancer_name, frontend_i_p_configuration_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_frontend_i_p_configurations_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerFrontendIPConfigurationListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_frontend_i_p_configurations_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_frontend_i_p_configurations_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/frontendIPConfigurations", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancer frontend IP configurations.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerFrontendIPConfigurationListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_frontend_i_p_configurations_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_frontend_i_p_configurations_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_frontend_i_p_configurations_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_frontend_i_p_configurations_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_load_balancing_rules_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancingRule,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_load_balancing_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_load_balancing_rules_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules/{loadBalancingRuleName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancingRuleName", load_balancing_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified load balancer load balancing rule.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- load_balancing_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancingRule, OpenAPI.Clients.ApiResponse
"""
function load_balancer_load_balancing_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_get(_api, resource_group_name, load_balancer_name, load_balancing_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_load_balancing_rules_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_get(_api, resource_group_name, load_balancer_name, load_balancing_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_load_balancing_rules_health_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerHealthPerRule,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_load_balancing_rules_health(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
        OpenAPI.validate_param("group_name", "load_balancer_load_balancing_rules_health", :pattern, group_name, r"^[a-zA-Z0-9_.-]*$")

        OpenAPI.validate_param("load_balancer_name", "load_balancer_load_balancing_rules_health", :pattern, load_balancer_name, r"^[a-zA-Z0-9_.-]*$")

        OpenAPI.validate_param("load_balancing_rule_name", "load_balancer_load_balancing_rules_health", :pattern, load_balancing_rule_name, r"^[a-zA-Z0-9_.-]*$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_load_balancer_load_balancing_rules_health_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules/{loadBalancingRuleName}/health", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "groupName", group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancingRuleName", load_balancing_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Get health details of a load balancing rule.

Params:
- group_name::String (required)
- load_balancer_name::String (required)
- load_balancing_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerHealthPerRule, OpenAPI.Clients.ApiResponse
"""
function load_balancer_load_balancing_rules_health(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_health(_api, group_name, load_balancer_name, load_balancing_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_load_balancing_rules_health(_api::LoadBalancersApi, response_stream::Channel, group_name::String, load_balancer_name::String, load_balancing_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_health(_api, group_name, load_balancer_name, load_balancing_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_load_balancing_rules_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerLoadBalancingRuleListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_load_balancing_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_load_balancing_rules_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/loadBalancingRules", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancing rules in a load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerLoadBalancingRuleListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_load_balancing_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_load_balancing_rules_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_load_balancing_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_network_interfaces_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => NetworkInterfaceListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_network_interfaces_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_network_interfaces_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/networkInterfaces", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets associated load balancer network interfaces.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: NetworkInterfaceListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_network_interfaces_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_network_interfaces_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_network_interfaces_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_network_interfaces_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_outbound_rules_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OutboundRule,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_outbound_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, outbound_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_outbound_rules_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/outboundRules/{outboundRuleName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "outboundRuleName", outbound_rule_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified load balancer outbound rule.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- outbound_rule_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: OutboundRule, OpenAPI.Clients.ApiResponse
"""
function load_balancer_outbound_rules_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, outbound_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_outbound_rules_get(_api, resource_group_name, load_balancer_name, outbound_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_outbound_rules_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, outbound_rule_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_outbound_rules_get(_api, resource_group_name, load_balancer_name, outbound_rule_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_outbound_rules_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerOutboundRuleListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_outbound_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_outbound_rules_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/outboundRules", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the outbound rules in a load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerOutboundRuleListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_outbound_rules_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_outbound_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_outbound_rules_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_outbound_rules_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_probes_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Probe,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_probes_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, probe_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_probes_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "probeName", probe_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets load balancer probe.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- probe_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Probe, OpenAPI.Clients.ApiResponse
"""
function load_balancer_probes_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, probe_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_probes_get(_api, resource_group_name, load_balancer_name, probe_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_probes_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, probe_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_probes_get(_api, resource_group_name, load_balancer_name, probe_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancer_probes_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerProbeListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancer_probes_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancer_probes_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancer probes.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerProbeListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancer_probes_list(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_probes_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancer_probes_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancer_probes_list(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_create_or_update_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("201", "x"=>".") * "\$") => LoadBalancer,
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancer,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::LoadBalancer; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_load_balancers_create_or_update_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::LoadBalancer (required)

Return: LoadBalancer, OpenAPI.Clients.ApiResponse
"""
function load_balancers_create_or_update(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::LoadBalancer; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_create_or_update(_api, resource_group_name, load_balancer_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_create_or_update(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::LoadBalancer; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_create_or_update(_api, resource_group_name, load_balancer_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_delete_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_load_balancers_delete_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes the specified load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function load_balancers_delete(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_delete(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_delete(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_delete(_api, resource_group_name, load_balancer_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_get_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancer,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancers_get_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the specified load balancer.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: LoadBalancer, OpenAPI.Clients.ApiResponse
"""
function load_balancers_get(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_get(_api, resource_group_name, load_balancer_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_get(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_get(_api, resource_group_name, load_balancer_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_list_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_list(_api::LoadBalancersApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancers_list_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancers in a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancers_list(_api::LoadBalancersApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_list(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_list_all_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancerListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_list_all(_api::LoadBalancersApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_load_balancers_list_all_LoadBalancersApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the load balancers in a subscription.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: LoadBalancerListResult, OpenAPI.Clients.ApiResponse
"""
function load_balancers_list_all(_api::LoadBalancersApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_list_all(_api::LoadBalancersApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list_all(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_list_inbound_nat_rule_port_mappings_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => BackendAddressInboundNatRulePortMappings,
    Regex("^" * replace("202", "x"=>".") * "\$") => BackendAddressInboundNatRulePortMappings,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_list_inbound_nat_rule_port_mappings(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, backend_pool_name::String, api_version::String, subscription_id::String, parameters::QueryInboundNatRulePortMappingRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_load_balancers_list_inbound_nat_rule_port_mappings_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/backendAddressPools/{backendPoolName}/queryInboundNatRulePortMapping", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "groupName", group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "backendPoolName", backend_pool_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""List of inbound NAT rule port mappings.

Params:
- group_name::String (required)
- load_balancer_name::String (required)
- backend_pool_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::QueryInboundNatRulePortMappingRequest (required)

Return: BackendAddressInboundNatRulePortMappings, OpenAPI.Clients.ApiResponse
"""
function load_balancers_list_inbound_nat_rule_port_mappings(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, backend_pool_name::String, api_version::String, subscription_id::String, parameters::QueryInboundNatRulePortMappingRequest; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list_inbound_nat_rule_port_mappings(_api, group_name, load_balancer_name, backend_pool_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_list_inbound_nat_rule_port_mappings(_api::LoadBalancersApi, response_stream::Channel, group_name::String, load_balancer_name::String, backend_pool_name::String, api_version::String, subscription_id::String, parameters::QueryInboundNatRulePortMappingRequest; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_list_inbound_nat_rule_port_mappings(_api, group_name, load_balancer_name, backend_pool_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_migrate_to_ip_based_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MigratedPools,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_migrate_to_ip_based(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
        OpenAPI.validate_param("group_name", "load_balancers_migrate_to_ip_based", :pattern, group_name, r"^[a-z][a-z0-9]*$")

        OpenAPI.validate_param("load_balancer_name", "load_balancers_migrate_to_ip_based", :pattern, load_balancer_name, r"^[a-z][a-z0-9]*$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_load_balancers_migrate_to_ip_based_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/migrateToIpBased", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "groupName", group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Migrate load balancer to IP Based

Params:
- group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::MigrateLoadBalancerToIpBasedRequest

Return: MigratedPools, OpenAPI.Clients.ApiResponse
"""
function load_balancers_migrate_to_ip_based(_api::LoadBalancersApi, group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_migrate_to_ip_based(_api, group_name, load_balancer_name, api_version, subscription_id; parameters=parameters, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_migrate_to_ip_based(_api::LoadBalancersApi, response_stream::Channel, group_name::String, load_balancer_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_migrate_to_ip_based(_api, group_name, load_balancer_name, api_version, subscription_id; parameters=parameters, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_swap_public_ip_addresses_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_swap_public_ip_addresses(_api::LoadBalancersApi, location::String, api_version::String, subscription_id::String, parameters::LoadBalancerVipSwapRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_load_balancers_swap_public_ip_addresses_LoadBalancersApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/setLoadBalancerFrontendPublicIpAddresses", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Swaps VIPs between two load balancers.

Params:
- location::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::LoadBalancerVipSwapRequest (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function load_balancers_swap_public_ip_addresses(_api::LoadBalancersApi, location::String, api_version::String, subscription_id::String, parameters::LoadBalancerVipSwapRequest; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_swap_public_ip_addresses(_api, location, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_swap_public_ip_addresses(_api::LoadBalancersApi, response_stream::Channel, location::String, api_version::String, subscription_id::String, parameters::LoadBalancerVipSwapRequest; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_swap_public_ip_addresses(_api, location, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_load_balancers_update_tags_LoadBalancersApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => LoadBalancer,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_load_balancers_update_tags(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_load_balancers_update_tags_LoadBalancersApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "loadBalancerName", load_balancer_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates a load balancer tags.

Params:
- resource_group_name::String (required)
- load_balancer_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::TagsObject (required)

Return: LoadBalancer, OpenAPI.Clients.ApiResponse
"""
function load_balancers_update_tags(_api::LoadBalancersApi, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_update_tags(_api, resource_group_name, load_balancer_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function load_balancers_update_tags(_api::LoadBalancersApi, response_stream::Channel, resource_group_name::String, load_balancer_name::String, api_version::String, subscription_id::String, parameters::TagsObject; _mediaType=nothing)
    _ctx = _oacinternal_load_balancers_update_tags(_api, resource_group_name, load_balancer_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export inbound_nat_rules_create_or_update
export inbound_nat_rules_delete
export inbound_nat_rules_get
export inbound_nat_rules_list
export load_balancer_backend_address_pools_create_or_update
export load_balancer_backend_address_pools_delete
export load_balancer_backend_address_pools_get
export load_balancer_backend_address_pools_list
export load_balancer_frontend_i_p_configurations_get
export load_balancer_frontend_i_p_configurations_list
export load_balancer_load_balancing_rules_get
export load_balancer_load_balancing_rules_health
export load_balancer_load_balancing_rules_list
export load_balancer_network_interfaces_list
export load_balancer_outbound_rules_get
export load_balancer_outbound_rules_list
export load_balancer_probes_get
export load_balancer_probes_list
export load_balancers_create_or_update
export load_balancers_delete
export load_balancers_get
export load_balancers_list
export load_balancers_list_all
export load_balancers_list_inbound_nat_rule_port_mappings
export load_balancers_migrate_to_ip_based
export load_balancers_swap_public_ip_addresses
export load_balancers_update_tags
