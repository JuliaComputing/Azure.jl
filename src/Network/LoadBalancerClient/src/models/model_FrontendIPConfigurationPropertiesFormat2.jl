# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FrontendIPConfigurationPropertiesFormat_2
Properties of Frontend IP Configuration of the load balancer.

    FrontendIPConfigurationPropertiesFormat2(;
        inboundNatRules=nothing,
        inboundNatPools=nothing,
        outboundRules=nothing,
        loadBalancingRules=nothing,
        privateIPAddress=nothing,
        privateIPAllocationMethod=nothing,
        privateIPAddressVersion=nothing,
        subnet=nothing,
        publicIPAddress=nothing,
        publicIPPrefix=nothing,
        provisioningState=nothing,
    )

    - inboundNatRules::Vector{SubResource} : An array of references to inbound rules that use this frontend IP.
    - inboundNatPools::Vector{SubResource} : An array of references to inbound pools that use this frontend IP.
    - outboundRules::Vector{SubResource} : An array of references to outbound rules that use this frontend IP.
    - loadBalancingRules::Vector{SubResource} : An array of references to load balancing rules that use this frontend IP.
    - privateIPAddress::String : The private IP address of the IP configuration.
    - privateIPAllocationMethod::IPAllocationMethod
    - privateIPAddressVersion::IPVersion
    - subnet::Subnet
    - publicIPAddress::PublicIPAddress
    - publicIPPrefix::SubResource
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct FrontendIPConfigurationPropertiesFormat2 <: OpenAPI.APIModel
    inboundNatRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    inboundNatPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    outboundRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    loadBalancingRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    privateIPAddress::Union{Nothing, String} = nothing
    privateIPAllocationMethod = nothing # spec type: Union{ Nothing, IPAllocationMethod }
    privateIPAddressVersion = nothing # spec type: Union{ Nothing, IPVersion }
    subnet = nothing # spec type: Union{ Nothing, Subnet }
    publicIPAddress = nothing # spec type: Union{ Nothing, PublicIPAddress }
    publicIPPrefix = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function FrontendIPConfigurationPropertiesFormat2(inboundNatRules, inboundNatPools, outboundRules, loadBalancingRules, privateIPAddress, privateIPAllocationMethod, privateIPAddressVersion, subnet, publicIPAddress, publicIPPrefix, provisioningState, )
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("inboundNatRules"), inboundNatRules)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("inboundNatPools"), inboundNatPools)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("outboundRules"), outboundRules)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("loadBalancingRules"), loadBalancingRules)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAddress"), privateIPAddress)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAddressVersion"), privateIPAddressVersion)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("subnet"), subnet)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("publicIPAddress"), publicIPAddress)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("publicIPPrefix"), publicIPPrefix)
        OpenAPI.validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("provisioningState"), provisioningState)
        return new(inboundNatRules, inboundNatPools, outboundRules, loadBalancingRules, privateIPAddress, privateIPAllocationMethod, privateIPAddressVersion, subnet, publicIPAddress, publicIPPrefix, provisioningState, )
    end
end # type FrontendIPConfigurationPropertiesFormat2

const _property_types_FrontendIPConfigurationPropertiesFormat2 = Dict{Symbol,String}(Symbol("inboundNatRules")=>"Vector{SubResource}", Symbol("inboundNatPools")=>"Vector{SubResource}", Symbol("outboundRules")=>"Vector{SubResource}", Symbol("loadBalancingRules")=>"Vector{SubResource}", Symbol("privateIPAddress")=>"String", Symbol("privateIPAllocationMethod")=>"IPAllocationMethod", Symbol("privateIPAddressVersion")=>"IPVersion", Symbol("subnet")=>"Subnet", Symbol("publicIPAddress")=>"PublicIPAddress", Symbol("publicIPPrefix")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ FrontendIPConfigurationPropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FrontendIPConfigurationPropertiesFormat2[name]))}

function check_required(o::FrontendIPConfigurationPropertiesFormat2)
    true
end

function OpenAPI.validate_property(::Type{ FrontendIPConfigurationPropertiesFormat2 }, name::Symbol, val)
end
