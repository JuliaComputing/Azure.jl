# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LoadBalancerHealthPerRule
The response for a Health API.

    LoadBalancerHealthPerRule(;
        up=nothing,
        down=nothing,
        loadBalancerBackendAddresses=nothing,
    )

    - up::Int64 : Number of backend instances associated to the LB rule that are considered healthy.
    - down::Int64 : Number of backend instances associated to the LB rule that are considered unhealthy.
    - loadBalancerBackendAddresses::Vector{LoadBalancerHealthPerRulePerBackendAddress} : Information about the health per rule of the backend addresses.
"""
Base.@kwdef mutable struct LoadBalancerHealthPerRule <: OpenAPI.APIModel
    up::Union{Nothing, Int64} = nothing
    down::Union{Nothing, Int64} = nothing
    loadBalancerBackendAddresses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LoadBalancerHealthPerRulePerBackendAddress} }

    function LoadBalancerHealthPerRule(up, down, loadBalancerBackendAddresses, )
        o = new(up, down, loadBalancerBackendAddresses, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type LoadBalancerHealthPerRule

const _property_types_LoadBalancerHealthPerRule = Dict{Symbol,String}(Symbol("up")=>"Int64", Symbol("down")=>"Int64", Symbol("loadBalancerBackendAddresses")=>"Vector{LoadBalancerHealthPerRulePerBackendAddress}", )
OpenAPI.property_type(::Type{ LoadBalancerHealthPerRule }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LoadBalancerHealthPerRule[name]))}

function OpenAPI.check_required(o::LoadBalancerHealthPerRule)
    true
end

function OpenAPI.validate_properties(o::LoadBalancerHealthPerRule)
    OpenAPI.validate_property(LoadBalancerHealthPerRule, Symbol("up"), o.up)
    OpenAPI.validate_property(LoadBalancerHealthPerRule, Symbol("down"), o.down)
    OpenAPI.validate_property(LoadBalancerHealthPerRule, Symbol("loadBalancerBackendAddresses"), o.loadBalancerBackendAddresses)
end

function OpenAPI.validate_property(::Type{ LoadBalancerHealthPerRule }, name::Symbol, val)

    if name === Symbol("up")
        OpenAPI.validate_param(name, "LoadBalancerHealthPerRule", :format, val, "int32")
    end

    if name === Symbol("down")
        OpenAPI.validate_param(name, "LoadBalancerHealthPerRule", :format, val, "int32")
    end

end
