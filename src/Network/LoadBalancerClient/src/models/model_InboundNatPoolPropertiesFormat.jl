# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""InboundNatPoolPropertiesFormat
Properties of Inbound NAT pool.

    InboundNatPoolPropertiesFormat(;
        frontendIPConfiguration=nothing,
        protocol=nothing,
        frontendPortRangeStart=nothing,
        frontendPortRangeEnd=nothing,
        backendPort=nothing,
        idleTimeoutInMinutes=nothing,
        enableFloatingIP=nothing,
        enableTcpReset=nothing,
        provisioningState=nothing,
    )

    - frontendIPConfiguration::SubResource
    - protocol::TransportProtocol
    - frontendPortRangeStart::Int64 : The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
    - frontendPortRangeEnd::Int64 : The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
    - backendPort::Int64 : The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
    - idleTimeoutInMinutes::Int64 : The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
    - enableFloatingIP::Bool : Configures a virtual machine&#39;s endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can&#39;t be changed after you create the endpoint.
    - enableTcpReset::Bool : Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct InboundNatPoolPropertiesFormat <: OpenAPI.APIModel
    frontendIPConfiguration = nothing # spec type: Union{ Nothing, SubResource }
    protocol = nothing # spec type: Union{ Nothing, TransportProtocol }
    frontendPortRangeStart::Union{Nothing, Int64} = nothing
    frontendPortRangeEnd::Union{Nothing, Int64} = nothing
    backendPort::Union{Nothing, Int64} = nothing
    idleTimeoutInMinutes::Union{Nothing, Int64} = nothing
    enableFloatingIP::Union{Nothing, Bool} = nothing
    enableTcpReset::Union{Nothing, Bool} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function InboundNatPoolPropertiesFormat(frontendIPConfiguration, protocol, frontendPortRangeStart, frontendPortRangeEnd, backendPort, idleTimeoutInMinutes, enableFloatingIP, enableTcpReset, provisioningState, )
        o = new(frontendIPConfiguration, protocol, frontendPortRangeStart, frontendPortRangeEnd, backendPort, idleTimeoutInMinutes, enableFloatingIP, enableTcpReset, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type InboundNatPoolPropertiesFormat

const _property_types_InboundNatPoolPropertiesFormat = Dict{Symbol,String}(Symbol("frontendIPConfiguration")=>"SubResource", Symbol("protocol")=>"TransportProtocol", Symbol("frontendPortRangeStart")=>"Int64", Symbol("frontendPortRangeEnd")=>"Int64", Symbol("backendPort")=>"Int64", Symbol("idleTimeoutInMinutes")=>"Int64", Symbol("enableFloatingIP")=>"Bool", Symbol("enableTcpReset")=>"Bool", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ InboundNatPoolPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_InboundNatPoolPropertiesFormat[name]))}

function OpenAPI.check_required(o::InboundNatPoolPropertiesFormat)
    o.protocol === nothing && (return false)
    o.frontendPortRangeStart === nothing && (return false)
    o.frontendPortRangeEnd === nothing && (return false)
    o.backendPort === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::InboundNatPoolPropertiesFormat)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("frontendIPConfiguration"), o.frontendIPConfiguration)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("protocol"), o.protocol)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("frontendPortRangeStart"), o.frontendPortRangeStart)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("frontendPortRangeEnd"), o.frontendPortRangeEnd)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("backendPort"), o.backendPort)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("idleTimeoutInMinutes"), o.idleTimeoutInMinutes)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("enableFloatingIP"), o.enableFloatingIP)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("enableTcpReset"), o.enableTcpReset)
    OpenAPI.validate_property(InboundNatPoolPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ InboundNatPoolPropertiesFormat }, name::Symbol, val)



    if name === Symbol("frontendPortRangeStart")
        OpenAPI.validate_param(name, "InboundNatPoolPropertiesFormat", :format, val, "int32")
    end

    if name === Symbol("frontendPortRangeEnd")
        OpenAPI.validate_param(name, "InboundNatPoolPropertiesFormat", :format, val, "int32")
    end

    if name === Symbol("backendPort")
        OpenAPI.validate_param(name, "InboundNatPoolPropertiesFormat", :format, val, "int32")
    end

    if name === Symbol("idleTimeoutInMinutes")
        OpenAPI.validate_param(name, "InboundNatPoolPropertiesFormat", :format, val, "int32")
    end



end
