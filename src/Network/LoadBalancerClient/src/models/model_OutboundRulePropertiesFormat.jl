# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OutboundRulePropertiesFormat
Outbound rule of the load balancer.

    OutboundRulePropertiesFormat(;
        allocatedOutboundPorts=nothing,
        frontendIPConfigurations=nothing,
        backendAddressPool=nothing,
        provisioningState=nothing,
        protocol=nothing,
        enableTcpReset=nothing,
        idleTimeoutInMinutes=nothing,
    )

    - allocatedOutboundPorts::Int64 : The number of outbound ports to be used for NAT.
    - frontendIPConfigurations::Vector{SubResource} : The Frontend IP addresses of the load balancer.
    - backendAddressPool::SubResource
    - provisioningState::ProvisioningState
    - protocol::String : The protocol for the outbound rule in load balancer.
    - enableTcpReset::Bool : Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
    - idleTimeoutInMinutes::Int64 : The timeout for the TCP idle connection.
"""
Base.@kwdef mutable struct OutboundRulePropertiesFormat <: OpenAPI.APIModel
    allocatedOutboundPorts::Union{Nothing, Int64} = nothing
    frontendIPConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    backendAddressPool = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    protocol::Union{Nothing, String} = nothing
    enableTcpReset::Union{Nothing, Bool} = nothing
    idleTimeoutInMinutes::Union{Nothing, Int64} = nothing

    function OutboundRulePropertiesFormat(allocatedOutboundPorts, frontendIPConfigurations, backendAddressPool, provisioningState, protocol, enableTcpReset, idleTimeoutInMinutes, )
        o = new(allocatedOutboundPorts, frontendIPConfigurations, backendAddressPool, provisioningState, protocol, enableTcpReset, idleTimeoutInMinutes, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type OutboundRulePropertiesFormat

const _property_types_OutboundRulePropertiesFormat = Dict{Symbol,String}(Symbol("allocatedOutboundPorts")=>"Int64", Symbol("frontendIPConfigurations")=>"Vector{SubResource}", Symbol("backendAddressPool")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState", Symbol("protocol")=>"String", Symbol("enableTcpReset")=>"Bool", Symbol("idleTimeoutInMinutes")=>"Int64", )
OpenAPI.property_type(::Type{ OutboundRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OutboundRulePropertiesFormat[name]))}

function OpenAPI.check_required(o::OutboundRulePropertiesFormat)
    o.frontendIPConfigurations === nothing && (return false)
    o.backendAddressPool === nothing && (return false)
    o.protocol === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::OutboundRulePropertiesFormat)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("allocatedOutboundPorts"), o.allocatedOutboundPorts)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("frontendIPConfigurations"), o.frontendIPConfigurations)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("backendAddressPool"), o.backendAddressPool)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("protocol"), o.protocol)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("enableTcpReset"), o.enableTcpReset)
    OpenAPI.validate_property(OutboundRulePropertiesFormat, Symbol("idleTimeoutInMinutes"), o.idleTimeoutInMinutes)
end

function OpenAPI.validate_property(::Type{ OutboundRulePropertiesFormat }, name::Symbol, val)

    if name === Symbol("allocatedOutboundPorts")
        OpenAPI.validate_param(name, "OutboundRulePropertiesFormat", :format, val, "int32")
    end




    if name === Symbol("protocol")
        OpenAPI.validate_param(name, "OutboundRulePropertiesFormat", :enum, val, ["Tcp", "Udp", "All"])
    end



end
