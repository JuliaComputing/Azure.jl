# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PrivateLinkServiceIpConfigurationProperties
Properties of private link service IP configuration.

    PrivateLinkServiceIpConfigurationProperties(;
        privateIPAddress=nothing,
        privateIPAllocationMethod=nothing,
        subnet=nothing,
        primary=nothing,
        provisioningState=nothing,
        privateIPAddressVersion=nothing,
    )

    - privateIPAddress::String : The private IP address of the IP configuration.
    - privateIPAllocationMethod::IPAllocationMethod
    - subnet::Subnet
    - primary::Bool : Whether the ip configuration is primary or not.
    - provisioningState::ProvisioningState
    - privateIPAddressVersion::IPVersion
"""
Base.@kwdef mutable struct PrivateLinkServiceIpConfigurationProperties <: OpenAPI.APIModel
    privateIPAddress::Union{Nothing, String} = nothing
    privateIPAllocationMethod = nothing # spec type: Union{ Nothing, IPAllocationMethod }
    subnet = nothing # spec type: Union{ Nothing, Subnet }
    primary::Union{Nothing, Bool} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    privateIPAddressVersion = nothing # spec type: Union{ Nothing, IPVersion }

    function PrivateLinkServiceIpConfigurationProperties(privateIPAddress, privateIPAllocationMethod, subnet, primary, provisioningState, privateIPAddressVersion, )
        o = new(privateIPAddress, privateIPAllocationMethod, subnet, primary, provisioningState, privateIPAddressVersion, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PrivateLinkServiceIpConfigurationProperties

const _property_types_PrivateLinkServiceIpConfigurationProperties = Dict{Symbol,String}(Symbol("privateIPAddress")=>"String", Symbol("privateIPAllocationMethod")=>"IPAllocationMethod", Symbol("subnet")=>"Subnet", Symbol("primary")=>"Bool", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateIPAddressVersion")=>"IPVersion", )
OpenAPI.property_type(::Type{ PrivateLinkServiceIpConfigurationProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrivateLinkServiceIpConfigurationProperties[name]))}

function OpenAPI.check_required(o::PrivateLinkServiceIpConfigurationProperties)
    true
end

function OpenAPI.validate_properties(o::PrivateLinkServiceIpConfigurationProperties)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("privateIPAddress"), o.privateIPAddress)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("privateIPAllocationMethod"), o.privateIPAllocationMethod)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("subnet"), o.subnet)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("primary"), o.primary)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(PrivateLinkServiceIpConfigurationProperties, Symbol("privateIPAddressVersion"), o.privateIPAddressVersion)
end

function OpenAPI.validate_property(::Type{ PrivateLinkServiceIpConfigurationProperties }, name::Symbol, val)






end
