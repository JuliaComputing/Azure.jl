# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BackendAddressInboundNatRulePortMappings
The response for a QueryInboundNatRulePortMapping API.

    BackendAddressInboundNatRulePortMappings(;
        inboundNatRulePortMappings=nothing,
    )

    - inboundNatRulePortMappings::Vector{InboundNatRulePortMapping} : Collection of inbound NAT rule port mappings.
"""
Base.@kwdef mutable struct BackendAddressInboundNatRulePortMappings <: OpenAPI.APIModel
    inboundNatRulePortMappings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InboundNatRulePortMapping} }

    function BackendAddressInboundNatRulePortMappings(inboundNatRulePortMappings, )
        o = new(inboundNatRulePortMappings, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type BackendAddressInboundNatRulePortMappings

const _property_types_BackendAddressInboundNatRulePortMappings = Dict{Symbol,String}(Symbol("inboundNatRulePortMappings")=>"Vector{InboundNatRulePortMapping}", )
OpenAPI.property_type(::Type{ BackendAddressInboundNatRulePortMappings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BackendAddressInboundNatRulePortMappings[name]))}

function OpenAPI.check_required(o::BackendAddressInboundNatRulePortMappings)
    true
end

function OpenAPI.validate_properties(o::BackendAddressInboundNatRulePortMappings)
    OpenAPI.validate_property(BackendAddressInboundNatRulePortMappings, Symbol("inboundNatRulePortMappings"), o.inboundNatRulePortMappings)
end

function OpenAPI.validate_property(::Type{ BackendAddressInboundNatRulePortMappings }, name::Symbol, val)

end
