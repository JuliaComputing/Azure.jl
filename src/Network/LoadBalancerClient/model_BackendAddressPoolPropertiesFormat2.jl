# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct BackendAddressPoolPropertiesFormat2 <: SwaggerModel
    backendIPConfigurations::Any # spec type: Union{ Nothing, Vector{NetworkInterfaceIPConfiguration} } # spec name: backendIPConfigurations
    loadBalancerBackendAddresses::Any # spec type: Union{ Nothing, Vector{LoadBalancerBackendAddress2} } # spec name: loadBalancerBackendAddresses
    loadBalancingRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: loadBalancingRules
    outboundRule::Any # spec type: Union{ Nothing, SubResource } # spec name: outboundRule
    outboundRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: outboundRules
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function BackendAddressPoolPropertiesFormat2(;backendIPConfigurations=nothing, loadBalancerBackendAddresses=nothing, loadBalancingRules=nothing, outboundRule=nothing, outboundRules=nothing, provisioningState=nothing)
        o = new()
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("backendIPConfigurations"), backendIPConfigurations)
        setfield!(o, Symbol("backendIPConfigurations"), backendIPConfigurations)
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("loadBalancerBackendAddresses"), loadBalancerBackendAddresses)
        setfield!(o, Symbol("loadBalancerBackendAddresses"), loadBalancerBackendAddresses)
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("loadBalancingRules"), loadBalancingRules)
        setfield!(o, Symbol("loadBalancingRules"), loadBalancingRules)
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("outboundRule"), outboundRule)
        setfield!(o, Symbol("outboundRule"), outboundRule)
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("outboundRules"), outboundRules)
        setfield!(o, Symbol("outboundRules"), outboundRules)
        validate_property(BackendAddressPoolPropertiesFormat2, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type BackendAddressPoolPropertiesFormat2

const _property_map_BackendAddressPoolPropertiesFormat2 = Dict{Symbol,Symbol}(Symbol("backendIPConfigurations")=>Symbol("backendIPConfigurations"), Symbol("loadBalancerBackendAddresses")=>Symbol("loadBalancerBackendAddresses"), Symbol("loadBalancingRules")=>Symbol("loadBalancingRules"), Symbol("outboundRule")=>Symbol("outboundRule"), Symbol("outboundRules")=>Symbol("outboundRules"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_BackendAddressPoolPropertiesFormat2 = Dict{Symbol,String}(Symbol("backendIPConfigurations")=>"Vector{NetworkInterfaceIPConfiguration}", Symbol("loadBalancerBackendAddresses")=>"Vector{LoadBalancerBackendAddress2}", Symbol("loadBalancingRules")=>"Vector{SubResource}", Symbol("outboundRule")=>"SubResource", Symbol("outboundRules")=>"Vector{SubResource}", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ BackendAddressPoolPropertiesFormat2 }) = collect(keys(_property_map_BackendAddressPoolPropertiesFormat2))
Swagger.property_type(::Type{ BackendAddressPoolPropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BackendAddressPoolPropertiesFormat2[name]))}
Swagger.field_name(::Type{ BackendAddressPoolPropertiesFormat2 }, property_name::Symbol) =  _property_map_BackendAddressPoolPropertiesFormat2[property_name]

function check_required(o::BackendAddressPoolPropertiesFormat2)
    true
end

function validate_property(::Type{ BackendAddressPoolPropertiesFormat2 }, name::Symbol, val)
end
