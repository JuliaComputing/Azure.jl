# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct FrontendIPConfigurationPropertiesFormat2 <: SwaggerModel
    inboundNatRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: inboundNatRules
    inboundNatPools::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: inboundNatPools
    outboundRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: outboundRules
    loadBalancingRules::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: loadBalancingRules
    privateIPAddress::Any # spec type: Union{ Nothing, String } # spec name: privateIPAddress
    privateIPAllocationMethod::Any # spec type: Union{ Nothing, IPAllocationMethod } # spec name: privateIPAllocationMethod
    privateIPAddressVersion::Any # spec type: Union{ Nothing, IPVersion } # spec name: privateIPAddressVersion
    subnet::Any # spec type: Union{ Nothing, Subnet } # spec name: subnet
    publicIPAddress::Any # spec type: Union{ Nothing, PublicIPAddress } # spec name: publicIPAddress
    publicIPPrefix::Any # spec type: Union{ Nothing, SubResource } # spec name: publicIPPrefix
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState

    function FrontendIPConfigurationPropertiesFormat2(;inboundNatRules=nothing, inboundNatPools=nothing, outboundRules=nothing, loadBalancingRules=nothing, privateIPAddress=nothing, privateIPAllocationMethod=nothing, privateIPAddressVersion=nothing, subnet=nothing, publicIPAddress=nothing, publicIPPrefix=nothing, provisioningState=nothing)
        o = new()
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("inboundNatRules"), inboundNatRules)
        setfield!(o, Symbol("inboundNatRules"), inboundNatRules)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("inboundNatPools"), inboundNatPools)
        setfield!(o, Symbol("inboundNatPools"), inboundNatPools)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("outboundRules"), outboundRules)
        setfield!(o, Symbol("outboundRules"), outboundRules)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("loadBalancingRules"), loadBalancingRules)
        setfield!(o, Symbol("loadBalancingRules"), loadBalancingRules)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAddress"), privateIPAddress)
        setfield!(o, Symbol("privateIPAddress"), privateIPAddress)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        setfield!(o, Symbol("privateIPAllocationMethod"), privateIPAllocationMethod)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("privateIPAddressVersion"), privateIPAddressVersion)
        setfield!(o, Symbol("privateIPAddressVersion"), privateIPAddressVersion)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("subnet"), subnet)
        setfield!(o, Symbol("subnet"), subnet)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("publicIPAddress"), publicIPAddress)
        setfield!(o, Symbol("publicIPAddress"), publicIPAddress)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("publicIPPrefix"), publicIPPrefix)
        setfield!(o, Symbol("publicIPPrefix"), publicIPPrefix)
        validate_property(FrontendIPConfigurationPropertiesFormat2, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type FrontendIPConfigurationPropertiesFormat2

const _property_map_FrontendIPConfigurationPropertiesFormat2 = Dict{Symbol,Symbol}(Symbol("inboundNatRules")=>Symbol("inboundNatRules"), Symbol("inboundNatPools")=>Symbol("inboundNatPools"), Symbol("outboundRules")=>Symbol("outboundRules"), Symbol("loadBalancingRules")=>Symbol("loadBalancingRules"), Symbol("privateIPAddress")=>Symbol("privateIPAddress"), Symbol("privateIPAllocationMethod")=>Symbol("privateIPAllocationMethod"), Symbol("privateIPAddressVersion")=>Symbol("privateIPAddressVersion"), Symbol("subnet")=>Symbol("subnet"), Symbol("publicIPAddress")=>Symbol("publicIPAddress"), Symbol("publicIPPrefix")=>Symbol("publicIPPrefix"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_FrontendIPConfigurationPropertiesFormat2 = Dict{Symbol,String}(Symbol("inboundNatRules")=>"Vector{SubResource}", Symbol("inboundNatPools")=>"Vector{SubResource}", Symbol("outboundRules")=>"Vector{SubResource}", Symbol("loadBalancingRules")=>"Vector{SubResource}", Symbol("privateIPAddress")=>"String", Symbol("privateIPAllocationMethod")=>"IPAllocationMethod", Symbol("privateIPAddressVersion")=>"IPVersion", Symbol("subnet")=>"Subnet", Symbol("publicIPAddress")=>"PublicIPAddress", Symbol("publicIPPrefix")=>"SubResource", Symbol("provisioningState")=>"ProvisioningState")
Base.propertynames(::Type{ FrontendIPConfigurationPropertiesFormat2 }) = collect(keys(_property_map_FrontendIPConfigurationPropertiesFormat2))
Swagger.property_type(::Type{ FrontendIPConfigurationPropertiesFormat2 }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FrontendIPConfigurationPropertiesFormat2[name]))}
Swagger.field_name(::Type{ FrontendIPConfigurationPropertiesFormat2 }, property_name::Symbol) =  _property_map_FrontendIPConfigurationPropertiesFormat2[property_name]

function check_required(o::FrontendIPConfigurationPropertiesFormat2)
    true
end

function validate_property(::Type{ FrontendIPConfigurationPropertiesFormat2 }, name::Symbol, val)
end
