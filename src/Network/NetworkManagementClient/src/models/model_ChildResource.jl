# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChildResource
Proxy resource representation.

    ChildResource(;
        id=nothing,
        name=nothing,
        type=nothing,
        etag=nothing,
    )

    - id::String : Resource ID.
    - name::String : Resource name.
    - type::String : Resource type.
    - etag::String : A unique read-only string that changes whenever the resource is updated.
"""
Base.@kwdef mutable struct ChildResource <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    etag::Union{Nothing, String} = nothing

    function ChildResource(id, name, type, etag, )
        o = new(id, name, type, etag, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ChildResource

const _property_types_ChildResource = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("etag")=>"String", )
OpenAPI.property_type(::Type{ ChildResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChildResource[name]))}

function OpenAPI.check_required(o::ChildResource)
    true
end

function OpenAPI.validate_properties(o::ChildResource)
    OpenAPI.validate_property(ChildResource, Symbol("id"), o.id)
    OpenAPI.validate_property(ChildResource, Symbol("name"), o.name)
    OpenAPI.validate_property(ChildResource, Symbol("type"), o.type)
    OpenAPI.validate_property(ChildResource, Symbol("etag"), o.etag)
end

function OpenAPI.validate_property(::Type{ ChildResource }, name::Symbol, val)




end
