# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AzureAsyncOperationResult
The response body contains the status of the specified asynchronous operation, indicating whether it has succeeded, is in progress, or has failed. Note that this status is distinct from the HTTP status code returned for the Get Operation Status operation itself. If the asynchronous operation succeeded, the response body includes the HTTP status code for the successful request. If the asynchronous operation failed, the response body includes the HTTP status code for the failed request and error information regarding the failure.

    AzureAsyncOperationResult(;
        status=nothing,
        error=nothing,
    )

    - status::String : Status of the Azure async operation.
    - error::Error
"""
Base.@kwdef mutable struct AzureAsyncOperationResult <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    error = nothing # spec type: Union{ Nothing, Error }

    function AzureAsyncOperationResult(status, error, )
        o = new(status, error, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AzureAsyncOperationResult

const _property_types_AzureAsyncOperationResult = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("error")=>"Error", )
OpenAPI.property_type(::Type{ AzureAsyncOperationResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AzureAsyncOperationResult[name]))}

function OpenAPI.check_required(o::AzureAsyncOperationResult)
    true
end

function OpenAPI.validate_properties(o::AzureAsyncOperationResult)
    OpenAPI.validate_property(AzureAsyncOperationResult, Symbol("status"), o.status)
    OpenAPI.validate_property(AzureAsyncOperationResult, Symbol("error"), o.error)
end

function OpenAPI.validate_property(::Type{ AzureAsyncOperationResult }, name::Symbol, val)

    if name === Symbol("status")
        OpenAPI.validate_param(name, "AzureAsyncOperationResult", :enum, val, ["InProgress", "Succeeded", "Failed"])
    end


end
