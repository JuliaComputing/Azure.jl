# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProxyResource
Proxy resource representation.

    ProxyResource(;
        id=nothing,
        name=nothing,
        type=nothing,
        etag=nothing,
    )

    - id::String : Resource ID.
    - name::String : Resource name.
    - type::String : Resource type.
    - etag::String : A unique read-only string that changes whenever the resource is updated.
"""
Base.@kwdef mutable struct ProxyResource <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    etag::Union{Nothing, String} = nothing

    function ProxyResource(id, name, type, etag, )
        o = new(id, name, type, etag, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ProxyResource

const _property_types_ProxyResource = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("etag")=>"String", )
OpenAPI.property_type(::Type{ ProxyResource }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProxyResource[name]))}

function OpenAPI.check_required(o::ProxyResource)
    true
end

function OpenAPI.validate_properties(o::ProxyResource)
    OpenAPI.validate_property(ProxyResource, Symbol("id"), o.id)
    OpenAPI.validate_property(ProxyResource, Symbol("name"), o.name)
    OpenAPI.validate_property(ProxyResource, Symbol("type"), o.type)
    OpenAPI.validate_property(ProxyResource, Symbol("etag"), o.etag)
end

function OpenAPI.validate_property(::Type{ ProxyResource }, name::Symbol, val)

    if name === Symbol("id")
        OpenAPI.validate_param(name, "ProxyResource", :format, val, "arm-id")
    end



end
