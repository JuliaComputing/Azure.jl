# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GatewayRouteSetsInformation
Gateway Route Sets Information

    GatewayRouteSetsInformation(;
        lastComputedTime=nothing,
        nextEligibleComputeTime=nothing,
        routeSetVersion=nothing,
        routeSets=nothing,
        circuitsMetadataMap=nothing,
    )

    - lastComputedTime::ZonedDateTime : Timestamp denoting the last time when the route sets were computed for the gateway
    - nextEligibleComputeTime::ZonedDateTime : Timestamp denoting the next eligible time to re-compute the route sets for the gateway
    - routeSetVersion::String : Version for the route set
    - routeSets::Vector{GatewayRouteSet} : List of Gateway Route Sets
    - circuitsMetadataMap::Dict{String, CircuitMetadataMap} : Dictionary containing map of the circuit id and circuit details
"""
Base.@kwdef mutable struct GatewayRouteSetsInformation <: OpenAPI.APIModel
    lastComputedTime::Union{Nothing, ZonedDateTime} = nothing
    nextEligibleComputeTime::Union{Nothing, ZonedDateTime} = nothing
    routeSetVersion::Union{Nothing, String} = nothing
    routeSets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GatewayRouteSet} }
    circuitsMetadataMap::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, CircuitMetadataMap} }

    function GatewayRouteSetsInformation(lastComputedTime, nextEligibleComputeTime, routeSetVersion, routeSets, circuitsMetadataMap, )
        o = new(lastComputedTime, nextEligibleComputeTime, routeSetVersion, routeSets, circuitsMetadataMap, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type GatewayRouteSetsInformation

const _property_types_GatewayRouteSetsInformation = Dict{Symbol,String}(Symbol("lastComputedTime")=>"ZonedDateTime", Symbol("nextEligibleComputeTime")=>"ZonedDateTime", Symbol("routeSetVersion")=>"String", Symbol("routeSets")=>"Vector{GatewayRouteSet}", Symbol("circuitsMetadataMap")=>"Dict{String, CircuitMetadataMap}", )
OpenAPI.property_type(::Type{ GatewayRouteSetsInformation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GatewayRouteSetsInformation[name]))}

function OpenAPI.check_required(o::GatewayRouteSetsInformation)
    true
end

function OpenAPI.validate_properties(o::GatewayRouteSetsInformation)
    OpenAPI.validate_property(GatewayRouteSetsInformation, Symbol("lastComputedTime"), o.lastComputedTime)
    OpenAPI.validate_property(GatewayRouteSetsInformation, Symbol("nextEligibleComputeTime"), o.nextEligibleComputeTime)
    OpenAPI.validate_property(GatewayRouteSetsInformation, Symbol("routeSetVersion"), o.routeSetVersion)
    OpenAPI.validate_property(GatewayRouteSetsInformation, Symbol("routeSets"), o.routeSets)
    OpenAPI.validate_property(GatewayRouteSetsInformation, Symbol("circuitsMetadataMap"), o.circuitsMetadataMap)
end

function OpenAPI.validate_property(::Type{ GatewayRouteSetsInformation }, name::Symbol, val)

    if name === Symbol("lastComputedTime")
        OpenAPI.validate_param(name, "GatewayRouteSetsInformation", :format, val, "date-time")
    end

    if name === Symbol("nextEligibleComputeTime")
        OpenAPI.validate_param(name, "GatewayRouteSetsInformation", :format, val, "date-time")
    end



end
