# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GatewayResiliencyInformation
Gateway Resiliency Information

    GatewayResiliencyInformation(;
        overallScore=nothing,
        scoreChange=nothing,
        minScoreFromRecommendations=nothing,
        maxScoreFromRecommendations=nothing,
        lastComputedTime=nothing,
        nextEligibleComputeTime=nothing,
        components=nothing,
    )

    - overallScore::String : Current Resiliency Score for the gateway
    - scoreChange::String : Update in the Resiliency Score for the gateway from the last computed score
    - minScoreFromRecommendations::String : Minimum increase expected in the score if the at least one of the recommendations is applied for the gateway
    - maxScoreFromRecommendations::String : Maximum increase expected in the score if all of the recommendations are applied for the gateway
    - lastComputedTime::ZonedDateTime : Timestamp denoting the last time when the resiliency score was computed for the gateway
    - nextEligibleComputeTime::ZonedDateTime : Timestamp denoting the next eligible time to re-compute the resiliency score for the gateway
    - components::Vector{ResiliencyRecommendationComponents} : List of Resiliency based Recommendation Components for the gateway
"""
Base.@kwdef mutable struct GatewayResiliencyInformation <: OpenAPI.APIModel
    overallScore::Union{Nothing, String} = nothing
    scoreChange::Union{Nothing, String} = nothing
    minScoreFromRecommendations::Union{Nothing, String} = nothing
    maxScoreFromRecommendations::Union{Nothing, String} = nothing
    lastComputedTime::Union{Nothing, ZonedDateTime} = nothing
    nextEligibleComputeTime::Union{Nothing, ZonedDateTime} = nothing
    components::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ResiliencyRecommendationComponents} }

    function GatewayResiliencyInformation(overallScore, scoreChange, minScoreFromRecommendations, maxScoreFromRecommendations, lastComputedTime, nextEligibleComputeTime, components, )
        o = new(overallScore, scoreChange, minScoreFromRecommendations, maxScoreFromRecommendations, lastComputedTime, nextEligibleComputeTime, components, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type GatewayResiliencyInformation

const _property_types_GatewayResiliencyInformation = Dict{Symbol,String}(Symbol("overallScore")=>"String", Symbol("scoreChange")=>"String", Symbol("minScoreFromRecommendations")=>"String", Symbol("maxScoreFromRecommendations")=>"String", Symbol("lastComputedTime")=>"ZonedDateTime", Symbol("nextEligibleComputeTime")=>"ZonedDateTime", Symbol("components")=>"Vector{ResiliencyRecommendationComponents}", )
OpenAPI.property_type(::Type{ GatewayResiliencyInformation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GatewayResiliencyInformation[name]))}

function OpenAPI.check_required(o::GatewayResiliencyInformation)
    true
end

function OpenAPI.validate_properties(o::GatewayResiliencyInformation)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("overallScore"), o.overallScore)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("scoreChange"), o.scoreChange)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("minScoreFromRecommendations"), o.minScoreFromRecommendations)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("maxScoreFromRecommendations"), o.maxScoreFromRecommendations)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("lastComputedTime"), o.lastComputedTime)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("nextEligibleComputeTime"), o.nextEligibleComputeTime)
    OpenAPI.validate_property(GatewayResiliencyInformation, Symbol("components"), o.components)
end

function OpenAPI.validate_property(::Type{ GatewayResiliencyInformation }, name::Symbol, val)





    if name === Symbol("lastComputedTime")
        OpenAPI.validate_param(name, "GatewayResiliencyInformation", :format, val, "date-time")
    end

    if name === Symbol("nextEligibleComputeTime")
        OpenAPI.validate_param(name, "GatewayResiliencyInformation", :format, val, "date-time")
    end

end
