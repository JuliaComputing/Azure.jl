# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkGatewayPropertiesFormat
VirtualNetworkGateway properties.

    VirtualNetworkGatewayPropertiesFormat(;
        autoScaleConfiguration=nothing,
        ipConfigurations=nothing,
        gatewayType=nothing,
        vpnType=nothing,
        vpnGatewayGeneration=nothing,
        enableBgp=nothing,
        enablePrivateIpAddress=nothing,
        virtualNetworkGatewayMigrationStatus=nothing,
        activeActive=nothing,
        enableHighBandwidthVpnGateway=nothing,
        disableIPSecReplayProtection=nothing,
        gatewayDefaultSite=nothing,
        sku=nothing,
        vpnClientConfiguration=nothing,
        virtualNetworkGatewayPolicyGroups=nothing,
        bgpSettings=nothing,
        customRoutes=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
        enableDnsForwarding=nothing,
        inboundDnsForwardingEndpoint=nothing,
        vNetExtendedLocationResourceId=nothing,
        natRules=nothing,
        enableBgpRouteTranslationForNat=nothing,
        allowVirtualWanTraffic=nothing,
        allowRemoteVnetTraffic=nothing,
        adminState=nothing,
        resiliencyModel=nothing,
    )

    - autoScaleConfiguration::VirtualNetworkGatewayAutoScaleConfiguration
    - ipConfigurations::Vector{VirtualNetworkGatewayIPConfiguration} : IP configurations for virtual network gateway.
    - gatewayType::String : The type of this virtual network gateway.
    - vpnType::String : The type of this virtual network gateway.
    - vpnGatewayGeneration::String : The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
    - enableBgp::Bool : Whether BGP is enabled for this virtual network gateway or not.
    - enablePrivateIpAddress::Bool : Whether private IP needs to be enabled on this gateway for connections or not.
    - virtualNetworkGatewayMigrationStatus::VirtualNetworkGatewayMigrationStatus
    - activeActive::Bool : ActiveActive flag.
    - enableHighBandwidthVpnGateway::Bool : To enable Advanced Connectivity feature for VPN gateway
    - disableIPSecReplayProtection::Bool : disableIPSecReplayProtection flag.
    - gatewayDefaultSite::SubResource
    - sku::VirtualNetworkGatewaySku
    - vpnClientConfiguration::VpnClientConfiguration
    - virtualNetworkGatewayPolicyGroups::Vector{VirtualNetworkGatewayPolicyGroup} : The reference to the VirtualNetworkGatewayPolicyGroup resource which represents the available VirtualNetworkGatewayPolicyGroup for the gateway.
    - bgpSettings::BgpSettings
    - customRoutes::AddressSpace
    - resourceGuid::String : The resource GUID property of the virtual network gateway resource.
    - provisioningState::ProvisioningState
    - enableDnsForwarding::Bool : Whether dns forwarding is enabled or not.
    - inboundDnsForwardingEndpoint::String : The IP address allocated by the gateway to which dns requests can be sent.
    - vNetExtendedLocationResourceId::String : Customer vnet resource id. VirtualNetworkGateway of type local gateway is associated with the customer vnet.
    - natRules::Vector{VirtualNetworkGatewayNatRule} : NatRules for virtual network gateway.
    - enableBgpRouteTranslationForNat::Bool : EnableBgpRouteTranslationForNat flag.
    - allowVirtualWanTraffic::Bool : Configures this gateway to accept traffic from remote Virtual WAN networks.
    - allowRemoteVnetTraffic::Bool : Configure this gateway to accept traffic from other Azure Virtual Networks. This configuration does not support connectivity to Azure Virtual WAN.
    - adminState::String : Property to indicate if the Express Route Gateway serves traffic when there are multiple Express Route Gateways in the vnet
    - resiliencyModel::String : Property to indicate if the Express Route Gateway has resiliency model of MultiHomed or SingleHomed
"""
Base.@kwdef mutable struct VirtualNetworkGatewayPropertiesFormat <: OpenAPI.APIModel
    autoScaleConfiguration = nothing # spec type: Union{ Nothing, VirtualNetworkGatewayAutoScaleConfiguration }
    ipConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkGatewayIPConfiguration} }
    gatewayType::Union{Nothing, String} = nothing
    vpnType::Union{Nothing, String} = nothing
    vpnGatewayGeneration::Union{Nothing, String} = nothing
    enableBgp::Union{Nothing, Bool} = nothing
    enablePrivateIpAddress::Union{Nothing, Bool} = nothing
    virtualNetworkGatewayMigrationStatus = nothing # spec type: Union{ Nothing, VirtualNetworkGatewayMigrationStatus }
    activeActive::Union{Nothing, Bool} = nothing
    enableHighBandwidthVpnGateway::Union{Nothing, Bool} = nothing
    disableIPSecReplayProtection::Union{Nothing, Bool} = nothing
    gatewayDefaultSite = nothing # spec type: Union{ Nothing, SubResource }
    sku = nothing # spec type: Union{ Nothing, VirtualNetworkGatewaySku }
    vpnClientConfiguration = nothing # spec type: Union{ Nothing, VpnClientConfiguration }
    virtualNetworkGatewayPolicyGroups::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkGatewayPolicyGroup} }
    bgpSettings = nothing # spec type: Union{ Nothing, BgpSettings }
    customRoutes = nothing # spec type: Union{ Nothing, AddressSpace }
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    enableDnsForwarding::Union{Nothing, Bool} = nothing
    inboundDnsForwardingEndpoint::Union{Nothing, String} = nothing
    vNetExtendedLocationResourceId::Union{Nothing, String} = nothing
    natRules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualNetworkGatewayNatRule} }
    enableBgpRouteTranslationForNat::Union{Nothing, Bool} = nothing
    allowVirtualWanTraffic::Union{Nothing, Bool} = nothing
    allowRemoteVnetTraffic::Union{Nothing, Bool} = nothing
    adminState::Union{Nothing, String} = nothing
    resiliencyModel::Union{Nothing, String} = nothing

    function VirtualNetworkGatewayPropertiesFormat(autoScaleConfiguration, ipConfigurations, gatewayType, vpnType, vpnGatewayGeneration, enableBgp, enablePrivateIpAddress, virtualNetworkGatewayMigrationStatus, activeActive, enableHighBandwidthVpnGateway, disableIPSecReplayProtection, gatewayDefaultSite, sku, vpnClientConfiguration, virtualNetworkGatewayPolicyGroups, bgpSettings, customRoutes, resourceGuid, provisioningState, enableDnsForwarding, inboundDnsForwardingEndpoint, vNetExtendedLocationResourceId, natRules, enableBgpRouteTranslationForNat, allowVirtualWanTraffic, allowRemoteVnetTraffic, adminState, resiliencyModel, )
        o = new(autoScaleConfiguration, ipConfigurations, gatewayType, vpnType, vpnGatewayGeneration, enableBgp, enablePrivateIpAddress, virtualNetworkGatewayMigrationStatus, activeActive, enableHighBandwidthVpnGateway, disableIPSecReplayProtection, gatewayDefaultSite, sku, vpnClientConfiguration, virtualNetworkGatewayPolicyGroups, bgpSettings, customRoutes, resourceGuid, provisioningState, enableDnsForwarding, inboundDnsForwardingEndpoint, vNetExtendedLocationResourceId, natRules, enableBgpRouteTranslationForNat, allowVirtualWanTraffic, allowRemoteVnetTraffic, adminState, resiliencyModel, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualNetworkGatewayPropertiesFormat

const _property_types_VirtualNetworkGatewayPropertiesFormat = Dict{Symbol,String}(Symbol("autoScaleConfiguration")=>"VirtualNetworkGatewayAutoScaleConfiguration", Symbol("ipConfigurations")=>"Vector{VirtualNetworkGatewayIPConfiguration}", Symbol("gatewayType")=>"String", Symbol("vpnType")=>"String", Symbol("vpnGatewayGeneration")=>"String", Symbol("enableBgp")=>"Bool", Symbol("enablePrivateIpAddress")=>"Bool", Symbol("virtualNetworkGatewayMigrationStatus")=>"VirtualNetworkGatewayMigrationStatus", Symbol("activeActive")=>"Bool", Symbol("enableHighBandwidthVpnGateway")=>"Bool", Symbol("disableIPSecReplayProtection")=>"Bool", Symbol("gatewayDefaultSite")=>"SubResource", Symbol("sku")=>"VirtualNetworkGatewaySku", Symbol("vpnClientConfiguration")=>"VpnClientConfiguration", Symbol("virtualNetworkGatewayPolicyGroups")=>"Vector{VirtualNetworkGatewayPolicyGroup}", Symbol("bgpSettings")=>"BgpSettings", Symbol("customRoutes")=>"AddressSpace", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("enableDnsForwarding")=>"Bool", Symbol("inboundDnsForwardingEndpoint")=>"String", Symbol("vNetExtendedLocationResourceId")=>"String", Symbol("natRules")=>"Vector{VirtualNetworkGatewayNatRule}", Symbol("enableBgpRouteTranslationForNat")=>"Bool", Symbol("allowVirtualWanTraffic")=>"Bool", Symbol("allowRemoteVnetTraffic")=>"Bool", Symbol("adminState")=>"String", Symbol("resiliencyModel")=>"String", )
OpenAPI.property_type(::Type{ VirtualNetworkGatewayPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkGatewayPropertiesFormat[name]))}

function OpenAPI.check_required(o::VirtualNetworkGatewayPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::VirtualNetworkGatewayPropertiesFormat)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("autoScaleConfiguration"), o.autoScaleConfiguration)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("ipConfigurations"), o.ipConfigurations)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("gatewayType"), o.gatewayType)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("vpnType"), o.vpnType)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("vpnGatewayGeneration"), o.vpnGatewayGeneration)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("enableBgp"), o.enableBgp)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("enablePrivateIpAddress"), o.enablePrivateIpAddress)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("virtualNetworkGatewayMigrationStatus"), o.virtualNetworkGatewayMigrationStatus)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("activeActive"), o.activeActive)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("enableHighBandwidthVpnGateway"), o.enableHighBandwidthVpnGateway)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("disableIPSecReplayProtection"), o.disableIPSecReplayProtection)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("gatewayDefaultSite"), o.gatewayDefaultSite)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("sku"), o.sku)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("vpnClientConfiguration"), o.vpnClientConfiguration)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("virtualNetworkGatewayPolicyGroups"), o.virtualNetworkGatewayPolicyGroups)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("bgpSettings"), o.bgpSettings)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("customRoutes"), o.customRoutes)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("resourceGuid"), o.resourceGuid)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("enableDnsForwarding"), o.enableDnsForwarding)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("inboundDnsForwardingEndpoint"), o.inboundDnsForwardingEndpoint)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("vNetExtendedLocationResourceId"), o.vNetExtendedLocationResourceId)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("natRules"), o.natRules)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("enableBgpRouteTranslationForNat"), o.enableBgpRouteTranslationForNat)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("allowVirtualWanTraffic"), o.allowVirtualWanTraffic)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("allowRemoteVnetTraffic"), o.allowRemoteVnetTraffic)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("adminState"), o.adminState)
    OpenAPI.validate_property(VirtualNetworkGatewayPropertiesFormat, Symbol("resiliencyModel"), o.resiliencyModel)
end

function OpenAPI.validate_property(::Type{ VirtualNetworkGatewayPropertiesFormat }, name::Symbol, val)



    if name === Symbol("gatewayType")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, ["Vpn", "ExpressRoute", "LocalGateway"])
    end


    if name === Symbol("vpnType")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, ["PolicyBased", "RouteBased"])
    end


    if name === Symbol("vpnGatewayGeneration")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, ["None", "Generation1", "Generation2"])
    end























    if name === Symbol("adminState")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, ["Enabled", "Disabled"])
    end


    if name === Symbol("resiliencyModel")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayPropertiesFormat", :enum, val, ["SingleHomed", "MultiHomed"])
    end

end
