# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GatewayRoute
Gateway routing details.

    GatewayRoute(;
        localAddress=nothing,
        network=nothing,
        nextHop=nothing,
        sourcePeer=nothing,
        origin=nothing,
        asPath=nothing,
        weight=nothing,
    )

    - localAddress::String : The gateway&#39;s local address.
    - network::String : The route&#39;s network prefix.
    - nextHop::String : The route&#39;s next hop.
    - sourcePeer::String : The peer this route was learned from.
    - origin::String : The source this route was learned from.
    - asPath::String : The route&#39;s AS path sequence.
    - weight::Int64 : The route&#39;s weight.
"""
Base.@kwdef mutable struct GatewayRoute <: OpenAPI.APIModel
    localAddress::Union{Nothing, String} = nothing
    network::Union{Nothing, String} = nothing
    nextHop::Union{Nothing, String} = nothing
    sourcePeer::Union{Nothing, String} = nothing
    origin::Union{Nothing, String} = nothing
    asPath::Union{Nothing, String} = nothing
    weight::Union{Nothing, Int64} = nothing

    function GatewayRoute(localAddress, network, nextHop, sourcePeer, origin, asPath, weight, )
        o = new(localAddress, network, nextHop, sourcePeer, origin, asPath, weight, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type GatewayRoute

const _property_types_GatewayRoute = Dict{Symbol,String}(Symbol("localAddress")=>"String", Symbol("network")=>"String", Symbol("nextHop")=>"String", Symbol("sourcePeer")=>"String", Symbol("origin")=>"String", Symbol("asPath")=>"String", Symbol("weight")=>"Int64", )
OpenAPI.property_type(::Type{ GatewayRoute }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GatewayRoute[name]))}

function OpenAPI.check_required(o::GatewayRoute)
    true
end

function OpenAPI.validate_properties(o::GatewayRoute)
    OpenAPI.validate_property(GatewayRoute, Symbol("localAddress"), o.localAddress)
    OpenAPI.validate_property(GatewayRoute, Symbol("network"), o.network)
    OpenAPI.validate_property(GatewayRoute, Symbol("nextHop"), o.nextHop)
    OpenAPI.validate_property(GatewayRoute, Symbol("sourcePeer"), o.sourcePeer)
    OpenAPI.validate_property(GatewayRoute, Symbol("origin"), o.origin)
    OpenAPI.validate_property(GatewayRoute, Symbol("asPath"), o.asPath)
    OpenAPI.validate_property(GatewayRoute, Symbol("weight"), o.weight)
end

function OpenAPI.validate_property(::Type{ GatewayRoute }, name::Symbol, val)







    if name === Symbol("weight")
        OpenAPI.validate_param(name, "GatewayRoute", :format, val, "int32")
    end
end
