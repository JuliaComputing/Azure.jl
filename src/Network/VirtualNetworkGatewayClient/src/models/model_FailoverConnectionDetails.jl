# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FailoverConnectionDetails

    FailoverConnectionDetails(;
        failoverConnectionName=nothing,
        failoverLocation=nothing,
        isVerified=nothing,
    )

    - failoverConnectionName::String : Name of the failover connection
    - failoverLocation::String : Location of the failover connection
    - isVerified::Bool : Whether the customer was able to establish connectivity through this failover connection or not
"""
Base.@kwdef mutable struct FailoverConnectionDetails <: OpenAPI.APIModel
    failoverConnectionName::Union{Nothing, String} = nothing
    failoverLocation::Union{Nothing, String} = nothing
    isVerified::Union{Nothing, Bool} = nothing

    function FailoverConnectionDetails(failoverConnectionName, failoverLocation, isVerified, )
        o = new(failoverConnectionName, failoverLocation, isVerified, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type FailoverConnectionDetails

const _property_types_FailoverConnectionDetails = Dict{Symbol,String}(Symbol("failoverConnectionName")=>"String", Symbol("failoverLocation")=>"String", Symbol("isVerified")=>"Bool", )
OpenAPI.property_type(::Type{ FailoverConnectionDetails }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FailoverConnectionDetails[name]))}

function OpenAPI.check_required(o::FailoverConnectionDetails)
    true
end

function OpenAPI.validate_properties(o::FailoverConnectionDetails)
    OpenAPI.validate_property(FailoverConnectionDetails, Symbol("failoverConnectionName"), o.failoverConnectionName)
    OpenAPI.validate_property(FailoverConnectionDetails, Symbol("failoverLocation"), o.failoverLocation)
    OpenAPI.validate_property(FailoverConnectionDetails, Symbol("isVerified"), o.isVerified)
end

function OpenAPI.validate_property(::Type{ FailoverConnectionDetails }, name::Symbol, val)



end
