# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""BgpPeerStatus
BGP peer status details.

    BgpPeerStatus(;
        localAddress=nothing,
        neighbor=nothing,
        asn=nothing,
        state=nothing,
        connectedDuration=nothing,
        routesReceived=nothing,
        messagesSent=nothing,
        messagesReceived=nothing,
    )

    - localAddress::String : The virtual network gateway&#39;s local address.
    - neighbor::String : The remote BGP peer.
    - asn::Int64 : The autonomous system number of the remote BGP peer.
    - state::String : The BGP peer state.
    - connectedDuration::String : For how long the peering has been up.
    - routesReceived::Int64 : The number of routes learned from this peer.
    - messagesSent::Int64 : The number of BGP messages sent.
    - messagesReceived::Int64 : The number of BGP messages received.
"""
Base.@kwdef mutable struct BgpPeerStatus <: OpenAPI.APIModel
    localAddress::Union{Nothing, String} = nothing
    neighbor::Union{Nothing, String} = nothing
    asn::Union{Nothing, Int64} = nothing
    state::Union{Nothing, String} = nothing
    connectedDuration::Union{Nothing, String} = nothing
    routesReceived::Union{Nothing, Int64} = nothing
    messagesSent::Union{Nothing, Int64} = nothing
    messagesReceived::Union{Nothing, Int64} = nothing

    function BgpPeerStatus(localAddress, neighbor, asn, state, connectedDuration, routesReceived, messagesSent, messagesReceived, )
        o = new(localAddress, neighbor, asn, state, connectedDuration, routesReceived, messagesSent, messagesReceived, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type BgpPeerStatus

const _property_types_BgpPeerStatus = Dict{Symbol,String}(Symbol("localAddress")=>"String", Symbol("neighbor")=>"String", Symbol("asn")=>"Int64", Symbol("state")=>"String", Symbol("connectedDuration")=>"String", Symbol("routesReceived")=>"Int64", Symbol("messagesSent")=>"Int64", Symbol("messagesReceived")=>"Int64", )
OpenAPI.property_type(::Type{ BgpPeerStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BgpPeerStatus[name]))}

function OpenAPI.check_required(o::BgpPeerStatus)
    true
end

function OpenAPI.validate_properties(o::BgpPeerStatus)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("localAddress"), o.localAddress)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("neighbor"), o.neighbor)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("asn"), o.asn)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("state"), o.state)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("connectedDuration"), o.connectedDuration)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("routesReceived"), o.routesReceived)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("messagesSent"), o.messagesSent)
    OpenAPI.validate_property(BgpPeerStatus, Symbol("messagesReceived"), o.messagesReceived)
end

function OpenAPI.validate_property(::Type{ BgpPeerStatus }, name::Symbol, val)



    if name === Symbol("asn")
        OpenAPI.validate_param(name, "BgpPeerStatus", :format, val, "int64")
    end
    if name === Symbol("asn")
        OpenAPI.validate_param(name, "BgpPeerStatus", :maximum, val, 4294967295, false)
        OpenAPI.validate_param(name, "BgpPeerStatus", :minimum, val, 0, false)
    end

    if name === Symbol("state")
        OpenAPI.validate_param(name, "BgpPeerStatus", :enum, val, ["Unknown", "Stopped", "Idle", "Connecting", "Connected"])
    end



    if name === Symbol("routesReceived")
        OpenAPI.validate_param(name, "BgpPeerStatus", :format, val, "int64")
    end

    if name === Symbol("messagesSent")
        OpenAPI.validate_param(name, "BgpPeerStatus", :format, val, "int64")
    end

    if name === Symbol("messagesReceived")
        OpenAPI.validate_param(name, "BgpPeerStatus", :format, val, "int64")
    end
end
