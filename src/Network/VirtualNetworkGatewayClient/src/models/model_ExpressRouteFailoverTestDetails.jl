# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExpressRouteFailoverTestDetails
ExpressRoute failover test details

    ExpressRouteFailoverTestDetails(;
        peeringLocation=nothing,
        circuits=nothing,
        status=nothing,
        startTime=nothing,
        endTime=nothing,
        connections=nothing,
        testGuid=nothing,
        testType=nothing,
        issues=nothing,
    )

    - peeringLocation::String : Peering location of the test
    - circuits::Vector{ExpressRouteFailoverCircuitResourceDetails} : All circuits in the peering location
    - status::String : The current status of the test
    - startTime::String : Time when the test was started
    - endTime::String : Time when the test was completed
    - connections::Vector{ExpressRouteFailoverConnectionResourceDetails} : All connections to the circuits in the peering location
    - testGuid::String : The unique GUID associated with the test
    - testType::String : The type of failover test
    - issues::Vector{String} : A list of all issues with the test
"""
Base.@kwdef mutable struct ExpressRouteFailoverTestDetails <: OpenAPI.APIModel
    peeringLocation::Union{Nothing, String} = nothing
    circuits::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteFailoverCircuitResourceDetails} }
    status::Union{Nothing, String} = nothing
    startTime::Union{Nothing, String} = nothing
    endTime::Union{Nothing, String} = nothing
    connections::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteFailoverConnectionResourceDetails} }
    testGuid::Union{Nothing, String} = nothing
    testType::Union{Nothing, String} = nothing
    issues::Union{Nothing, Vector{String}} = nothing

    function ExpressRouteFailoverTestDetails(peeringLocation, circuits, status, startTime, endTime, connections, testGuid, testType, issues, )
        o = new(peeringLocation, circuits, status, startTime, endTime, connections, testGuid, testType, issues, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ExpressRouteFailoverTestDetails

const _property_types_ExpressRouteFailoverTestDetails = Dict{Symbol,String}(Symbol("peeringLocation")=>"String", Symbol("circuits")=>"Vector{ExpressRouteFailoverCircuitResourceDetails}", Symbol("status")=>"String", Symbol("startTime")=>"String", Symbol("endTime")=>"String", Symbol("connections")=>"Vector{ExpressRouteFailoverConnectionResourceDetails}", Symbol("testGuid")=>"String", Symbol("testType")=>"String", Symbol("issues")=>"Vector{String}", )
OpenAPI.property_type(::Type{ ExpressRouteFailoverTestDetails }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExpressRouteFailoverTestDetails[name]))}

function OpenAPI.check_required(o::ExpressRouteFailoverTestDetails)
    true
end

function OpenAPI.validate_properties(o::ExpressRouteFailoverTestDetails)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("peeringLocation"), o.peeringLocation)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("circuits"), o.circuits)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("status"), o.status)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("startTime"), o.startTime)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("endTime"), o.endTime)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("connections"), o.connections)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("testGuid"), o.testGuid)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("testType"), o.testType)
    OpenAPI.validate_property(ExpressRouteFailoverTestDetails, Symbol("issues"), o.issues)
end

function OpenAPI.validate_property(::Type{ ExpressRouteFailoverTestDetails }, name::Symbol, val)



    if name === Symbol("status")
        OpenAPI.validate_param(name, "ExpressRouteFailoverTestDetails", :enum, val, ["NotStarted", "Starting", "Running", "StartFailed", "Stopping", "Completed", "StopFailed", "Invalid", "Expired"])
    end






    if name === Symbol("testType")
        OpenAPI.validate_param(name, "ExpressRouteFailoverTestDetails", :enum, val, ["SingleSiteFailover", "MultiSiteFailover", "All"])
    end


end
