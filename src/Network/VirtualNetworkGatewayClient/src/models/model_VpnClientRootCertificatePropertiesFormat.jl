# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VpnClientRootCertificatePropertiesFormat
Properties of SSL certificates of application gateway.

    VpnClientRootCertificatePropertiesFormat(;
        publicCertData=nothing,
        provisioningState=nothing,
    )

    - publicCertData::String : The certificate public data.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct VpnClientRootCertificatePropertiesFormat <: OpenAPI.APIModel
    publicCertData::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function VpnClientRootCertificatePropertiesFormat(publicCertData, provisioningState, )
        OpenAPI.validate_property(VpnClientRootCertificatePropertiesFormat, Symbol("publicCertData"), publicCertData)
        OpenAPI.validate_property(VpnClientRootCertificatePropertiesFormat, Symbol("provisioningState"), provisioningState)
        return new(publicCertData, provisioningState, )
    end
end # type VpnClientRootCertificatePropertiesFormat

const _property_types_VpnClientRootCertificatePropertiesFormat = Dict{Symbol,String}(Symbol("publicCertData")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ VpnClientRootCertificatePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VpnClientRootCertificatePropertiesFormat[name]))}

function check_required(o::VpnClientRootCertificatePropertiesFormat)
    o.publicCertData === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ VpnClientRootCertificatePropertiesFormat }, name::Symbol, val)
end
