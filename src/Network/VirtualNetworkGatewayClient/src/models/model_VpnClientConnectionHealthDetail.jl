# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VpnClientConnectionHealthDetail
VPN client connection health detail.

    VpnClientConnectionHealthDetail(;
        vpnConnectionId=nothing,
        vpnConnectionDuration=nothing,
        vpnConnectionTime=nothing,
        publicIpAddress=nothing,
        privateIpAddress=nothing,
        vpnUserName=nothing,
        maxBandwidth=nothing,
        egressPacketsTransferred=nothing,
        egressBytesTransferred=nothing,
        ingressPacketsTransferred=nothing,
        ingressBytesTransferred=nothing,
        maxPacketsPerSecond=nothing,
    )

    - vpnConnectionId::String : The vpn client Id.
    - vpnConnectionDuration::Int64 : The duration time of a connected vpn client.
    - vpnConnectionTime::String : The start time of a connected vpn client.
    - publicIpAddress::String : The public Ip of a connected vpn client.
    - privateIpAddress::String : The assigned private Ip of a connected vpn client.
    - vpnUserName::String : The user name of a connected vpn client.
    - maxBandwidth::Int64 : The max band width.
    - egressPacketsTransferred::Int64 : The egress packets per second.
    - egressBytesTransferred::Int64 : The egress bytes per second.
    - ingressPacketsTransferred::Int64 : The ingress packets per second.
    - ingressBytesTransferred::Int64 : The ingress bytes per second.
    - maxPacketsPerSecond::Int64 : The max packets transferred per second.
"""
Base.@kwdef mutable struct VpnClientConnectionHealthDetail <: OpenAPI.APIModel
    vpnConnectionId::Union{Nothing, String} = nothing
    vpnConnectionDuration::Union{Nothing, Int64} = nothing
    vpnConnectionTime::Union{Nothing, String} = nothing
    publicIpAddress::Union{Nothing, String} = nothing
    privateIpAddress::Union{Nothing, String} = nothing
    vpnUserName::Union{Nothing, String} = nothing
    maxBandwidth::Union{Nothing, Int64} = nothing
    egressPacketsTransferred::Union{Nothing, Int64} = nothing
    egressBytesTransferred::Union{Nothing, Int64} = nothing
    ingressPacketsTransferred::Union{Nothing, Int64} = nothing
    ingressBytesTransferred::Union{Nothing, Int64} = nothing
    maxPacketsPerSecond::Union{Nothing, Int64} = nothing

    function VpnClientConnectionHealthDetail(vpnConnectionId, vpnConnectionDuration, vpnConnectionTime, publicIpAddress, privateIpAddress, vpnUserName, maxBandwidth, egressPacketsTransferred, egressBytesTransferred, ingressPacketsTransferred, ingressBytesTransferred, maxPacketsPerSecond, )
        o = new(vpnConnectionId, vpnConnectionDuration, vpnConnectionTime, publicIpAddress, privateIpAddress, vpnUserName, maxBandwidth, egressPacketsTransferred, egressBytesTransferred, ingressPacketsTransferred, ingressBytesTransferred, maxPacketsPerSecond, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VpnClientConnectionHealthDetail

const _property_types_VpnClientConnectionHealthDetail = Dict{Symbol,String}(Symbol("vpnConnectionId")=>"String", Symbol("vpnConnectionDuration")=>"Int64", Symbol("vpnConnectionTime")=>"String", Symbol("publicIpAddress")=>"String", Symbol("privateIpAddress")=>"String", Symbol("vpnUserName")=>"String", Symbol("maxBandwidth")=>"Int64", Symbol("egressPacketsTransferred")=>"Int64", Symbol("egressBytesTransferred")=>"Int64", Symbol("ingressPacketsTransferred")=>"Int64", Symbol("ingressBytesTransferred")=>"Int64", Symbol("maxPacketsPerSecond")=>"Int64", )
OpenAPI.property_type(::Type{ VpnClientConnectionHealthDetail }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VpnClientConnectionHealthDetail[name]))}

function OpenAPI.check_required(o::VpnClientConnectionHealthDetail)
    true
end

function OpenAPI.validate_properties(o::VpnClientConnectionHealthDetail)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("vpnConnectionId"), o.vpnConnectionId)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("vpnConnectionDuration"), o.vpnConnectionDuration)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("vpnConnectionTime"), o.vpnConnectionTime)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("publicIpAddress"), o.publicIpAddress)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("privateIpAddress"), o.privateIpAddress)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("vpnUserName"), o.vpnUserName)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("maxBandwidth"), o.maxBandwidth)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("egressPacketsTransferred"), o.egressPacketsTransferred)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("egressBytesTransferred"), o.egressBytesTransferred)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("ingressPacketsTransferred"), o.ingressPacketsTransferred)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("ingressBytesTransferred"), o.ingressBytesTransferred)
    OpenAPI.validate_property(VpnClientConnectionHealthDetail, Symbol("maxPacketsPerSecond"), o.maxPacketsPerSecond)
end

function OpenAPI.validate_property(::Type{ VpnClientConnectionHealthDetail }, name::Symbol, val)


    if name === Symbol("vpnConnectionDuration")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end





    if name === Symbol("maxBandwidth")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end

    if name === Symbol("egressPacketsTransferred")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end

    if name === Symbol("egressBytesTransferred")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end

    if name === Symbol("ingressPacketsTransferred")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end

    if name === Symbol("ingressBytesTransferred")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end

    if name === Symbol("maxPacketsPerSecond")
        OpenAPI.validate_param(name, "VpnClientConnectionHealthDetail", :format, val, "int64")
    end
end
