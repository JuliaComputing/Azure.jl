# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkGatewayNatRuleProperties
Parameters for VirtualNetworkGatewayNatRule.

    VirtualNetworkGatewayNatRuleProperties(;
        provisioningState=nothing,
        type=nothing,
        mode=nothing,
        internalMappings=nothing,
        externalMappings=nothing,
        ipConfigurationId=nothing,
    )

    - provisioningState::ProvisioningState
    - type::String : The type of NAT rule for VPN NAT.
    - mode::String : The Source NAT direction of a VPN NAT.
    - internalMappings::Vector{VpnNatRuleMapping} : The private IP address internal mapping for NAT.
    - externalMappings::Vector{VpnNatRuleMapping} : The private IP address external mapping for NAT.
    - ipConfigurationId::String : The IP Configuration ID this NAT rule applies to.
"""
Base.@kwdef mutable struct VirtualNetworkGatewayNatRuleProperties <: OpenAPI.APIModel
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    type::Union{Nothing, String} = nothing
    mode::Union{Nothing, String} = nothing
    internalMappings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VpnNatRuleMapping} }
    externalMappings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VpnNatRuleMapping} }
    ipConfigurationId::Union{Nothing, String} = nothing

    function VirtualNetworkGatewayNatRuleProperties(provisioningState, type, mode, internalMappings, externalMappings, ipConfigurationId, )
        o = new(provisioningState, type, mode, internalMappings, externalMappings, ipConfigurationId, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualNetworkGatewayNatRuleProperties

const _property_types_VirtualNetworkGatewayNatRuleProperties = Dict{Symbol,String}(Symbol("provisioningState")=>"ProvisioningState", Symbol("type")=>"String", Symbol("mode")=>"String", Symbol("internalMappings")=>"Vector{VpnNatRuleMapping}", Symbol("externalMappings")=>"Vector{VpnNatRuleMapping}", Symbol("ipConfigurationId")=>"String", )
OpenAPI.property_type(::Type{ VirtualNetworkGatewayNatRuleProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkGatewayNatRuleProperties[name]))}

function OpenAPI.check_required(o::VirtualNetworkGatewayNatRuleProperties)
    true
end

function OpenAPI.validate_properties(o::VirtualNetworkGatewayNatRuleProperties)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("type"), o.type)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("mode"), o.mode)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("internalMappings"), o.internalMappings)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("externalMappings"), o.externalMappings)
    OpenAPI.validate_property(VirtualNetworkGatewayNatRuleProperties, Symbol("ipConfigurationId"), o.ipConfigurationId)
end

function OpenAPI.validate_property(::Type{ VirtualNetworkGatewayNatRuleProperties }, name::Symbol, val)


    if name === Symbol("type")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayNatRuleProperties", :enum, val, ["Static", "Dynamic"])
    end


    if name === Symbol("mode")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayNatRuleProperties", :enum, val, ["EgressSnat", "IngressSnat"])
    end




end
