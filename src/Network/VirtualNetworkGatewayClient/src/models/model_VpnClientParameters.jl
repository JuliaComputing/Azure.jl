# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VpnClientParameters
Vpn Client Parameters for package generation.

    VpnClientParameters(;
        processorArchitecture=nothing,
        authenticationMethod=nothing,
        radiusServerAuthCertificate=nothing,
        clientRootCertificates=nothing,
    )

    - processorArchitecture::String : VPN client Processor Architecture.
    - authenticationMethod::AuthenticationMethod
    - radiusServerAuthCertificate::String : The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only if external radius authentication has been configured with EAPTLS authentication.
    - clientRootCertificates::Vector{String} : A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external radius based authentication with EAPTLS.
"""
Base.@kwdef mutable struct VpnClientParameters <: OpenAPI.APIModel
    processorArchitecture::Union{Nothing, String} = nothing
    authenticationMethod = nothing # spec type: Union{ Nothing, AuthenticationMethod }
    radiusServerAuthCertificate::Union{Nothing, String} = nothing
    clientRootCertificates::Union{Nothing, Vector{String}} = nothing

    function VpnClientParameters(processorArchitecture, authenticationMethod, radiusServerAuthCertificate, clientRootCertificates, )
        o = new(processorArchitecture, authenticationMethod, radiusServerAuthCertificate, clientRootCertificates, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VpnClientParameters

const _property_types_VpnClientParameters = Dict{Symbol,String}(Symbol("processorArchitecture")=>"String", Symbol("authenticationMethod")=>"AuthenticationMethod", Symbol("radiusServerAuthCertificate")=>"String", Symbol("clientRootCertificates")=>"Vector{String}", )
OpenAPI.property_type(::Type{ VpnClientParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VpnClientParameters[name]))}

function OpenAPI.check_required(o::VpnClientParameters)
    true
end

function OpenAPI.validate_properties(o::VpnClientParameters)
    OpenAPI.validate_property(VpnClientParameters, Symbol("processorArchitecture"), o.processorArchitecture)
    OpenAPI.validate_property(VpnClientParameters, Symbol("authenticationMethod"), o.authenticationMethod)
    OpenAPI.validate_property(VpnClientParameters, Symbol("radiusServerAuthCertificate"), o.radiusServerAuthCertificate)
    OpenAPI.validate_property(VpnClientParameters, Symbol("clientRootCertificates"), o.clientRootCertificates)
end

function OpenAPI.validate_property(::Type{ VpnClientParameters }, name::Symbol, val)

    if name === Symbol("processorArchitecture")
        OpenAPI.validate_param(name, "VpnClientParameters", :enum, val, ["Amd64", "X86"])
    end




end
