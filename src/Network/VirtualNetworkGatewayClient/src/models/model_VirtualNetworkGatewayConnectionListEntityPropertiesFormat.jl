# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualNetworkGatewayConnectionListEntityPropertiesFormat
VirtualNetworkGatewayConnection properties.

    VirtualNetworkGatewayConnectionListEntityPropertiesFormat(;
        authorizationKey=nothing,
        virtualNetworkGateway1=nothing,
        virtualNetworkGateway2=nothing,
        localNetworkGateway2=nothing,
        connectionType=nothing,
        connectionProtocol=nothing,
        routingWeight=nothing,
        sharedKey=nothing,
        connectionStatus=nothing,
        tunnelConnectionStatus=nothing,
        egressBytesTransferred=nothing,
        ingressBytesTransferred=nothing,
        peer=nothing,
        enableBgp=nothing,
        usePolicyBasedTrafficSelectors=nothing,
        ipsecPolicies=nothing,
        trafficSelectorPolicies=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
        expressRouteGatewayBypass=nothing,
    )

    - authorizationKey::String : The authorizationKey.
    - virtualNetworkGateway1::VirtualNetworkConnectionGatewayReference
    - virtualNetworkGateway2::VirtualNetworkConnectionGatewayReference
    - localNetworkGateway2::VirtualNetworkConnectionGatewayReference
    - connectionType::VirtualNetworkGatewayConnectionType
    - connectionProtocol::ConnectionProtocol
    - routingWeight::Int64 : The routing weight.
    - sharedKey::String : The IPSec shared key.
    - connectionStatus::VirtualNetworkGatewayConnectionStatus
    - tunnelConnectionStatus::Vector{TunnelConnectionHealth} : Collection of all tunnels&#39; connection health status.
    - egressBytesTransferred::Int64 : The egress bytes transferred in this connection.
    - ingressBytesTransferred::Int64 : The ingress bytes transferred in this connection.
    - peer::SubResource
    - enableBgp::Bool : EnableBgp flag.
    - usePolicyBasedTrafficSelectors::Bool : Enable policy-based traffic selectors.
    - ipsecPolicies::Vector{IpsecPolicy} : The IPSec Policies to be considered by this connection.
    - trafficSelectorPolicies::Vector{TrafficSelectorPolicy} : The Traffic Selector Policies to be considered by this connection.
    - resourceGuid::String : The resource GUID property of the virtual network gateway connection resource.
    - provisioningState::ProvisioningState
    - expressRouteGatewayBypass::Bool : Bypass ExpressRoute Gateway for data forwarding.
"""
Base.@kwdef mutable struct VirtualNetworkGatewayConnectionListEntityPropertiesFormat <: OpenAPI.APIModel
    authorizationKey::Union{Nothing, String} = nothing
    virtualNetworkGateway1 = nothing # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference }
    virtualNetworkGateway2 = nothing # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference }
    localNetworkGateway2 = nothing # spec type: Union{ Nothing, VirtualNetworkConnectionGatewayReference }
    connectionType = nothing # spec type: Union{ Nothing, VirtualNetworkGatewayConnectionType }
    connectionProtocol = nothing # spec type: Union{ Nothing, ConnectionProtocol }
    routingWeight::Union{Nothing, Int64} = nothing
    sharedKey::Union{Nothing, String} = nothing
    connectionStatus = nothing # spec type: Union{ Nothing, VirtualNetworkGatewayConnectionStatus }
    tunnelConnectionStatus::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TunnelConnectionHealth} }
    egressBytesTransferred::Union{Nothing, Int64} = nothing
    ingressBytesTransferred::Union{Nothing, Int64} = nothing
    peer = nothing # spec type: Union{ Nothing, SubResource }
    enableBgp::Union{Nothing, Bool} = nothing
    usePolicyBasedTrafficSelectors::Union{Nothing, Bool} = nothing
    ipsecPolicies::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{IpsecPolicy} }
    trafficSelectorPolicies::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{TrafficSelectorPolicy} }
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    expressRouteGatewayBypass::Union{Nothing, Bool} = nothing

    function VirtualNetworkGatewayConnectionListEntityPropertiesFormat(authorizationKey, virtualNetworkGateway1, virtualNetworkGateway2, localNetworkGateway2, connectionType, connectionProtocol, routingWeight, sharedKey, connectionStatus, tunnelConnectionStatus, egressBytesTransferred, ingressBytesTransferred, peer, enableBgp, usePolicyBasedTrafficSelectors, ipsecPolicies, trafficSelectorPolicies, resourceGuid, provisioningState, expressRouteGatewayBypass, )
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("authorizationKey"), authorizationKey)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("virtualNetworkGateway1"), virtualNetworkGateway1)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("virtualNetworkGateway2"), virtualNetworkGateway2)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("localNetworkGateway2"), localNetworkGateway2)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionType"), connectionType)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionProtocol"), connectionProtocol)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("routingWeight"), routingWeight)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("sharedKey"), sharedKey)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("connectionStatus"), connectionStatus)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("tunnelConnectionStatus"), tunnelConnectionStatus)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("egressBytesTransferred"), egressBytesTransferred)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("ingressBytesTransferred"), ingressBytesTransferred)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("peer"), peer)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("enableBgp"), enableBgp)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("usePolicyBasedTrafficSelectors"), usePolicyBasedTrafficSelectors)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("ipsecPolicies"), ipsecPolicies)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("trafficSelectorPolicies"), trafficSelectorPolicies)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("resourceGuid"), resourceGuid)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(VirtualNetworkGatewayConnectionListEntityPropertiesFormat, Symbol("expressRouteGatewayBypass"), expressRouteGatewayBypass)
        return new(authorizationKey, virtualNetworkGateway1, virtualNetworkGateway2, localNetworkGateway2, connectionType, connectionProtocol, routingWeight, sharedKey, connectionStatus, tunnelConnectionStatus, egressBytesTransferred, ingressBytesTransferred, peer, enableBgp, usePolicyBasedTrafficSelectors, ipsecPolicies, trafficSelectorPolicies, resourceGuid, provisioningState, expressRouteGatewayBypass, )
    end
end # type VirtualNetworkGatewayConnectionListEntityPropertiesFormat

const _property_types_VirtualNetworkGatewayConnectionListEntityPropertiesFormat = Dict{Symbol,String}(Symbol("authorizationKey")=>"String", Symbol("virtualNetworkGateway1")=>"VirtualNetworkConnectionGatewayReference", Symbol("virtualNetworkGateway2")=>"VirtualNetworkConnectionGatewayReference", Symbol("localNetworkGateway2")=>"VirtualNetworkConnectionGatewayReference", Symbol("connectionType")=>"VirtualNetworkGatewayConnectionType", Symbol("connectionProtocol")=>"ConnectionProtocol", Symbol("routingWeight")=>"Int64", Symbol("sharedKey")=>"String", Symbol("connectionStatus")=>"VirtualNetworkGatewayConnectionStatus", Symbol("tunnelConnectionStatus")=>"Vector{TunnelConnectionHealth}", Symbol("egressBytesTransferred")=>"Int64", Symbol("ingressBytesTransferred")=>"Int64", Symbol("peer")=>"SubResource", Symbol("enableBgp")=>"Bool", Symbol("usePolicyBasedTrafficSelectors")=>"Bool", Symbol("ipsecPolicies")=>"Vector{IpsecPolicy}", Symbol("trafficSelectorPolicies")=>"Vector{TrafficSelectorPolicy}", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("expressRouteGatewayBypass")=>"Bool", )
OpenAPI.property_type(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualNetworkGatewayConnectionListEntityPropertiesFormat[name]))}

function check_required(o::VirtualNetworkGatewayConnectionListEntityPropertiesFormat)
    o.virtualNetworkGateway1 === nothing && (return false)
    o.connectionType === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ VirtualNetworkGatewayConnectionListEntityPropertiesFormat }, name::Symbol, val)
    if name === Symbol("routingWeight")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayConnectionListEntityPropertiesFormat", :format, val, "int32")
    end
    if name === Symbol("egressBytesTransferred")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayConnectionListEntityPropertiesFormat", :format, val, "int64")
    end
    if name === Symbol("ingressBytesTransferred")
        OpenAPI.validate_param(name, "VirtualNetworkGatewayConnectionListEntityPropertiesFormat", :format, val, "int64")
    end
end
