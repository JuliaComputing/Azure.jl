# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExpressRouteFailoverSingleTestDetails
ExpressRoute failover single test details

    ExpressRouteFailoverSingleTestDetails(;
        peeringLocation=nothing,
        status=nothing,
        startTimeUtc=nothing,
        endTimeUtc=nothing,
        redundantRoutes=nothing,
        nonRedundantRoutes=nothing,
        wasSimulationSuccessful=nothing,
        failoverConnectionDetails=nothing,
    )

    - peeringLocation::String : Peering location of the test
    - status::String : The current status of the test
    - startTimeUtc::String : Time when the test was started
    - endTimeUtc::String : Time when the test was completed
    - redundantRoutes::Vector{ExpressRouteFailoverRedundantRoute} : List of routes received from this peering as well as some other peering location
    - nonRedundantRoutes::Vector{String} : List of al the routes that were received only from this peering location
    - wasSimulationSuccessful::Bool : Whether the failover simulation was successful or not
    - failoverConnectionDetails::Vector{FailoverConnectionDetails} : List of all the failover connections for this peering location
"""
Base.@kwdef mutable struct ExpressRouteFailoverSingleTestDetails <: OpenAPI.APIModel
    peeringLocation::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing
    startTimeUtc::Union{Nothing, String} = nothing
    endTimeUtc::Union{Nothing, String} = nothing
    redundantRoutes::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteFailoverRedundantRoute} }
    nonRedundantRoutes::Union{Nothing, Vector{String}} = nothing
    wasSimulationSuccessful::Union{Nothing, Bool} = nothing
    failoverConnectionDetails::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FailoverConnectionDetails} }

    function ExpressRouteFailoverSingleTestDetails(peeringLocation, status, startTimeUtc, endTimeUtc, redundantRoutes, nonRedundantRoutes, wasSimulationSuccessful, failoverConnectionDetails, )
        o = new(peeringLocation, status, startTimeUtc, endTimeUtc, redundantRoutes, nonRedundantRoutes, wasSimulationSuccessful, failoverConnectionDetails, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ExpressRouteFailoverSingleTestDetails

const _property_types_ExpressRouteFailoverSingleTestDetails = Dict{Symbol,String}(Symbol("peeringLocation")=>"String", Symbol("status")=>"String", Symbol("startTimeUtc")=>"String", Symbol("endTimeUtc")=>"String", Symbol("redundantRoutes")=>"Vector{ExpressRouteFailoverRedundantRoute}", Symbol("nonRedundantRoutes")=>"Vector{String}", Symbol("wasSimulationSuccessful")=>"Bool", Symbol("failoverConnectionDetails")=>"Vector{FailoverConnectionDetails}", )
OpenAPI.property_type(::Type{ ExpressRouteFailoverSingleTestDetails }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExpressRouteFailoverSingleTestDetails[name]))}

function OpenAPI.check_required(o::ExpressRouteFailoverSingleTestDetails)
    true
end

function OpenAPI.validate_properties(o::ExpressRouteFailoverSingleTestDetails)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("peeringLocation"), o.peeringLocation)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("status"), o.status)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("startTimeUtc"), o.startTimeUtc)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("endTimeUtc"), o.endTimeUtc)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("redundantRoutes"), o.redundantRoutes)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("nonRedundantRoutes"), o.nonRedundantRoutes)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("wasSimulationSuccessful"), o.wasSimulationSuccessful)
    OpenAPI.validate_property(ExpressRouteFailoverSingleTestDetails, Symbol("failoverConnectionDetails"), o.failoverConnectionDetails)
end

function OpenAPI.validate_property(::Type{ ExpressRouteFailoverSingleTestDetails }, name::Symbol, val)


    if name === Symbol("status")
        OpenAPI.validate_param(name, "ExpressRouteFailoverSingleTestDetails", :enum, val, ["NotStarted", "Starting", "Running", "StartFailed", "Stopping", "Completed", "StopFailed", "Invalid", "Expired"])
    end







end
