# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct Ipv6ExpressRouteCircuitPeeringConfig <: SwaggerModel
    primaryPeerAddressPrefix::Any # spec type: Union{ Nothing, String } # spec name: primaryPeerAddressPrefix
    secondaryPeerAddressPrefix::Any # spec type: Union{ Nothing, String } # spec name: secondaryPeerAddressPrefix
    microsoftPeeringConfig::Any # spec type: Union{ Nothing, ExpressRouteCircuitPeeringConfig } # spec name: microsoftPeeringConfig
    routeFilter::Any # spec type: Union{ Nothing, SubResource } # spec name: routeFilter
    state::Any # spec type: Union{ Nothing, String } # spec name: state

    function Ipv6ExpressRouteCircuitPeeringConfig(;primaryPeerAddressPrefix=nothing, secondaryPeerAddressPrefix=nothing, microsoftPeeringConfig=nothing, routeFilter=nothing, state=nothing)
        o = new()
        validate_property(Ipv6ExpressRouteCircuitPeeringConfig, Symbol("primaryPeerAddressPrefix"), primaryPeerAddressPrefix)
        setfield!(o, Symbol("primaryPeerAddressPrefix"), primaryPeerAddressPrefix)
        validate_property(Ipv6ExpressRouteCircuitPeeringConfig, Symbol("secondaryPeerAddressPrefix"), secondaryPeerAddressPrefix)
        setfield!(o, Symbol("secondaryPeerAddressPrefix"), secondaryPeerAddressPrefix)
        validate_property(Ipv6ExpressRouteCircuitPeeringConfig, Symbol("microsoftPeeringConfig"), microsoftPeeringConfig)
        setfield!(o, Symbol("microsoftPeeringConfig"), microsoftPeeringConfig)
        validate_property(Ipv6ExpressRouteCircuitPeeringConfig, Symbol("routeFilter"), routeFilter)
        setfield!(o, Symbol("routeFilter"), routeFilter)
        validate_property(Ipv6ExpressRouteCircuitPeeringConfig, Symbol("state"), state)
        setfield!(o, Symbol("state"), state)
        o
    end
end # type Ipv6ExpressRouteCircuitPeeringConfig

const _property_map_Ipv6ExpressRouteCircuitPeeringConfig = Dict{Symbol,Symbol}(Symbol("primaryPeerAddressPrefix")=>Symbol("primaryPeerAddressPrefix"), Symbol("secondaryPeerAddressPrefix")=>Symbol("secondaryPeerAddressPrefix"), Symbol("microsoftPeeringConfig")=>Symbol("microsoftPeeringConfig"), Symbol("routeFilter")=>Symbol("routeFilter"), Symbol("state")=>Symbol("state"))
const _property_types_Ipv6ExpressRouteCircuitPeeringConfig = Dict{Symbol,String}(Symbol("primaryPeerAddressPrefix")=>"String", Symbol("secondaryPeerAddressPrefix")=>"String", Symbol("microsoftPeeringConfig")=>"ExpressRouteCircuitPeeringConfig", Symbol("routeFilter")=>"SubResource", Symbol("state")=>"String")
Base.propertynames(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }) = collect(keys(_property_map_Ipv6ExpressRouteCircuitPeeringConfig))
Swagger.property_type(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Ipv6ExpressRouteCircuitPeeringConfig[name]))}
Swagger.field_name(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }, property_name::Symbol) =  _property_map_Ipv6ExpressRouteCircuitPeeringConfig[property_name]

const _allowed_Ipv6ExpressRouteCircuitPeeringConfig_state = ["Disabled", "Enabled"]

function check_required(o::Ipv6ExpressRouteCircuitPeeringConfig)
    true
end

function validate_property(::Type{ Ipv6ExpressRouteCircuitPeeringConfig }, name::Symbol, val)
    if name === Symbol("state")
        Swagger.validate_param(name, "Ipv6ExpressRouteCircuitPeeringConfig", :enum, val, _allowed_Ipv6ExpressRouteCircuitPeeringConfig_state)
    end
end
