# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PeerExpressRouteCircuitConnectionPropertiesFormat
Properties of the peer express route circuit connection.

    PeerExpressRouteCircuitConnectionPropertiesFormat(;
        expressRouteCircuitPeering=nothing,
        peerExpressRouteCircuitPeering=nothing,
        addressPrefix=nothing,
        circuitConnectionStatus=nothing,
        connectionName=nothing,
        authResourceGuid=nothing,
        provisioningState=nothing,
    )

    - expressRouteCircuitPeering::SubResource
    - peerExpressRouteCircuitPeering::SubResource
    - addressPrefix::String : /29 IP address space to carve out Customer addresses for tunnels.
    - circuitConnectionStatus::CircuitConnectionStatus
    - connectionName::String : The name of the express route circuit connection resource.
    - authResourceGuid::String : The resource guid of the authorization used for the express route circuit connection.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct PeerExpressRouteCircuitConnectionPropertiesFormat <: OpenAPI.APIModel
    expressRouteCircuitPeering = nothing # spec type: Union{ Nothing, SubResource }
    peerExpressRouteCircuitPeering = nothing # spec type: Union{ Nothing, SubResource }
    addressPrefix::Union{Nothing, String} = nothing
    circuitConnectionStatus = nothing # spec type: Union{ Nothing, CircuitConnectionStatus }
    connectionName::Union{Nothing, String} = nothing
    authResourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function PeerExpressRouteCircuitConnectionPropertiesFormat(expressRouteCircuitPeering, peerExpressRouteCircuitPeering, addressPrefix, circuitConnectionStatus, connectionName, authResourceGuid, provisioningState, )
        o = new(expressRouteCircuitPeering, peerExpressRouteCircuitPeering, addressPrefix, circuitConnectionStatus, connectionName, authResourceGuid, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PeerExpressRouteCircuitConnectionPropertiesFormat

const _property_types_PeerExpressRouteCircuitConnectionPropertiesFormat = Dict{Symbol,String}(Symbol("expressRouteCircuitPeering")=>"SubResource", Symbol("peerExpressRouteCircuitPeering")=>"SubResource", Symbol("addressPrefix")=>"String", Symbol("circuitConnectionStatus")=>"CircuitConnectionStatus", Symbol("connectionName")=>"String", Symbol("authResourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ PeerExpressRouteCircuitConnectionPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PeerExpressRouteCircuitConnectionPropertiesFormat[name]))}

function OpenAPI.check_required(o::PeerExpressRouteCircuitConnectionPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::PeerExpressRouteCircuitConnectionPropertiesFormat)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("expressRouteCircuitPeering"), o.expressRouteCircuitPeering)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("peerExpressRouteCircuitPeering"), o.peerExpressRouteCircuitPeering)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("addressPrefix"), o.addressPrefix)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("circuitConnectionStatus"), o.circuitConnectionStatus)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("connectionName"), o.connectionName)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("authResourceGuid"), o.authResourceGuid)
    OpenAPI.validate_property(PeerExpressRouteCircuitConnectionPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ PeerExpressRouteCircuitConnectionPropertiesFormat }, name::Symbol, val)







end
