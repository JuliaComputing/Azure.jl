# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExpressRouteCircuitConnectionPropertiesFormat
Properties of the express route circuit connection.

    ExpressRouteCircuitConnectionPropertiesFormat(;
        expressRouteCircuitPeering=nothing,
        peerExpressRouteCircuitPeering=nothing,
        addressPrefix=nothing,
        authorizationKey=nothing,
        ipv6CircuitConnectionConfig=nothing,
        circuitConnectionStatus=nothing,
        provisioningState=nothing,
    )

    - expressRouteCircuitPeering::SubResource
    - peerExpressRouteCircuitPeering::SubResource
    - addressPrefix::String : /29 IP address space to carve out Customer addresses for tunnels.
    - authorizationKey::String : The authorization key.
    - ipv6CircuitConnectionConfig::Ipv6CircuitConnectionConfig
    - circuitConnectionStatus::CircuitConnectionStatus
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct ExpressRouteCircuitConnectionPropertiesFormat <: OpenAPI.APIModel
    expressRouteCircuitPeering = nothing # spec type: Union{ Nothing, SubResource }
    peerExpressRouteCircuitPeering = nothing # spec type: Union{ Nothing, SubResource }
    addressPrefix::Union{Nothing, String} = nothing
    authorizationKey::Union{Nothing, String} = nothing
    ipv6CircuitConnectionConfig = nothing # spec type: Union{ Nothing, Ipv6CircuitConnectionConfig }
    circuitConnectionStatus = nothing # spec type: Union{ Nothing, CircuitConnectionStatus }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function ExpressRouteCircuitConnectionPropertiesFormat(expressRouteCircuitPeering, peerExpressRouteCircuitPeering, addressPrefix, authorizationKey, ipv6CircuitConnectionConfig, circuitConnectionStatus, provisioningState, )
        o = new(expressRouteCircuitPeering, peerExpressRouteCircuitPeering, addressPrefix, authorizationKey, ipv6CircuitConnectionConfig, circuitConnectionStatus, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ExpressRouteCircuitConnectionPropertiesFormat

const _property_types_ExpressRouteCircuitConnectionPropertiesFormat = Dict{Symbol,String}(Symbol("expressRouteCircuitPeering")=>"SubResource", Symbol("peerExpressRouteCircuitPeering")=>"SubResource", Symbol("addressPrefix")=>"String", Symbol("authorizationKey")=>"String", Symbol("ipv6CircuitConnectionConfig")=>"Ipv6CircuitConnectionConfig", Symbol("circuitConnectionStatus")=>"CircuitConnectionStatus", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ ExpressRouteCircuitConnectionPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExpressRouteCircuitConnectionPropertiesFormat[name]))}

function OpenAPI.check_required(o::ExpressRouteCircuitConnectionPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::ExpressRouteCircuitConnectionPropertiesFormat)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("expressRouteCircuitPeering"), o.expressRouteCircuitPeering)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("peerExpressRouteCircuitPeering"), o.peerExpressRouteCircuitPeering)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("addressPrefix"), o.addressPrefix)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("authorizationKey"), o.authorizationKey)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("ipv6CircuitConnectionConfig"), o.ipv6CircuitConnectionConfig)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("circuitConnectionStatus"), o.circuitConnectionStatus)
    OpenAPI.validate_property(ExpressRouteCircuitConnectionPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ ExpressRouteCircuitConnectionPropertiesFormat }, name::Symbol, val)







end
