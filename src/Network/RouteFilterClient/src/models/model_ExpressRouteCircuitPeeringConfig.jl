# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ExpressRouteCircuitPeeringConfig
Specifies the peering configuration.

    ExpressRouteCircuitPeeringConfig(;
        advertisedPublicPrefixes=nothing,
        advertisedCommunities=nothing,
        advertisedPublicPrefixesState=nothing,
        legacyMode=nothing,
        customerASN=nothing,
        routingRegistryName=nothing,
        advertisedPublicPrefixInfo=nothing,
    )

    - advertisedPublicPrefixes::Vector{String} : The reference to AdvertisedPublicPrefixes.
    - advertisedCommunities::Vector{String} : The communities of bgp peering. Specified for microsoft peering.
    - advertisedPublicPrefixesState::String : The advertised public prefix state of the Peering resource.
    - legacyMode::Int64 : The legacy mode of the peering.
    - customerASN::Int64 : The CustomerASN of the peering.
    - routingRegistryName::String : The RoutingRegistryName of the configuration.
    - advertisedPublicPrefixInfo::Vector{AdvertisedPublicPrefixProperties} : List of Prefix information required to perform validation.
"""
Base.@kwdef mutable struct ExpressRouteCircuitPeeringConfig <: OpenAPI.APIModel
    advertisedPublicPrefixes::Union{Nothing, Vector{String}} = nothing
    advertisedCommunities::Union{Nothing, Vector{String}} = nothing
    advertisedPublicPrefixesState::Union{Nothing, String} = nothing
    legacyMode::Union{Nothing, Int64} = nothing
    customerASN::Union{Nothing, Int64} = nothing
    routingRegistryName::Union{Nothing, String} = nothing
    advertisedPublicPrefixInfo::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AdvertisedPublicPrefixProperties} }

    function ExpressRouteCircuitPeeringConfig(advertisedPublicPrefixes, advertisedCommunities, advertisedPublicPrefixesState, legacyMode, customerASN, routingRegistryName, advertisedPublicPrefixInfo, )
        o = new(advertisedPublicPrefixes, advertisedCommunities, advertisedPublicPrefixesState, legacyMode, customerASN, routingRegistryName, advertisedPublicPrefixInfo, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ExpressRouteCircuitPeeringConfig

const _property_types_ExpressRouteCircuitPeeringConfig = Dict{Symbol,String}(Symbol("advertisedPublicPrefixes")=>"Vector{String}", Symbol("advertisedCommunities")=>"Vector{String}", Symbol("advertisedPublicPrefixesState")=>"String", Symbol("legacyMode")=>"Int64", Symbol("customerASN")=>"Int64", Symbol("routingRegistryName")=>"String", Symbol("advertisedPublicPrefixInfo")=>"Vector{AdvertisedPublicPrefixProperties}", )
OpenAPI.property_type(::Type{ ExpressRouteCircuitPeeringConfig }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ExpressRouteCircuitPeeringConfig[name]))}

function OpenAPI.check_required(o::ExpressRouteCircuitPeeringConfig)
    true
end

function OpenAPI.validate_properties(o::ExpressRouteCircuitPeeringConfig)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("advertisedPublicPrefixes"), o.advertisedPublicPrefixes)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("advertisedCommunities"), o.advertisedCommunities)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("advertisedPublicPrefixesState"), o.advertisedPublicPrefixesState)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("legacyMode"), o.legacyMode)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("customerASN"), o.customerASN)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("routingRegistryName"), o.routingRegistryName)
    OpenAPI.validate_property(ExpressRouteCircuitPeeringConfig, Symbol("advertisedPublicPrefixInfo"), o.advertisedPublicPrefixInfo)
end

function OpenAPI.validate_property(::Type{ ExpressRouteCircuitPeeringConfig }, name::Symbol, val)



    if name === Symbol("advertisedPublicPrefixesState")
        OpenAPI.validate_param(name, "ExpressRouteCircuitPeeringConfig", :enum, val, ["NotConfigured", "Configuring", "Configured", "ValidationNeeded"])
    end


    if name === Symbol("legacyMode")
        OpenAPI.validate_param(name, "ExpressRouteCircuitPeeringConfig", :format, val, "int32")
    end

    if name === Symbol("customerASN")
        OpenAPI.validate_param(name, "ExpressRouteCircuitPeeringConfig", :format, val, "int32")
    end


end
