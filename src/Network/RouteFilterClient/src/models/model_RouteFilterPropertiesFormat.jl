# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RouteFilterPropertiesFormat
Route Filter Resource.

    RouteFilterPropertiesFormat(;
        rules=nothing,
        peerings=nothing,
        ipv6Peerings=nothing,
        provisioningState=nothing,
    )

    - rules::Vector{RouteFilterRule} : Collection of RouteFilterRules contained within a route filter.
    - peerings::Vector{ExpressRouteCircuitPeering} : A collection of references to express route circuit peerings.
    - ipv6Peerings::Vector{ExpressRouteCircuitPeering} : A collection of references to express route circuit ipv6 peerings.
    - provisioningState::ProvisioningState
"""
Base.@kwdef mutable struct RouteFilterPropertiesFormat <: OpenAPI.APIModel
    rules::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RouteFilterRule} }
    peerings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteCircuitPeering} }
    ipv6Peerings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ExpressRouteCircuitPeering} }
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }

    function RouteFilterPropertiesFormat(rules, peerings, ipv6Peerings, provisioningState, )
        o = new(rules, peerings, ipv6Peerings, provisioningState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type RouteFilterPropertiesFormat

const _property_types_RouteFilterPropertiesFormat = Dict{Symbol,String}(Symbol("rules")=>"Vector{RouteFilterRule}", Symbol("peerings")=>"Vector{ExpressRouteCircuitPeering}", Symbol("ipv6Peerings")=>"Vector{ExpressRouteCircuitPeering}", Symbol("provisioningState")=>"ProvisioningState", )
OpenAPI.property_type(::Type{ RouteFilterPropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RouteFilterPropertiesFormat[name]))}

function OpenAPI.check_required(o::RouteFilterPropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::RouteFilterPropertiesFormat)
    OpenAPI.validate_property(RouteFilterPropertiesFormat, Symbol("rules"), o.rules)
    OpenAPI.validate_property(RouteFilterPropertiesFormat, Symbol("peerings"), o.peerings)
    OpenAPI.validate_property(RouteFilterPropertiesFormat, Symbol("ipv6Peerings"), o.ipv6Peerings)
    OpenAPI.validate_property(RouteFilterPropertiesFormat, Symbol("provisioningState"), o.provisioningState)
end

function OpenAPI.validate_property(::Type{ RouteFilterPropertiesFormat }, name::Symbol, val)




end
