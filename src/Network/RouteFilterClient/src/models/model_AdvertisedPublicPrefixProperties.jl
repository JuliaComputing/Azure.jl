# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AdvertisedPublicPrefixProperties
Prefix properties required to perform validation using openssl signature.

    AdvertisedPublicPrefixProperties(;
        prefix=nothing,
        validationId=nothing,
        signature=nothing,
        validationState=nothing,
    )

    - prefix::String : Advertised Public Prefix.
    - validationId::String : Validation string that contains circuit peering info.
    - signature::String : Signed string generated by encrypting validationId with a private key.
    - validationState::String : Advertised Public Prefix State that denotes if the prefix is validated or not.
"""
Base.@kwdef mutable struct AdvertisedPublicPrefixProperties <: OpenAPI.APIModel
    prefix::Union{Nothing, String} = nothing
    validationId::Union{Nothing, String} = nothing
    signature::Union{Nothing, String} = nothing
    validationState::Union{Nothing, String} = nothing

    function AdvertisedPublicPrefixProperties(prefix, validationId, signature, validationState, )
        o = new(prefix, validationId, signature, validationState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AdvertisedPublicPrefixProperties

const _property_types_AdvertisedPublicPrefixProperties = Dict{Symbol,String}(Symbol("prefix")=>"String", Symbol("validationId")=>"String", Symbol("signature")=>"String", Symbol("validationState")=>"String", )
OpenAPI.property_type(::Type{ AdvertisedPublicPrefixProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AdvertisedPublicPrefixProperties[name]))}

function OpenAPI.check_required(o::AdvertisedPublicPrefixProperties)
    true
end

function OpenAPI.validate_properties(o::AdvertisedPublicPrefixProperties)
    OpenAPI.validate_property(AdvertisedPublicPrefixProperties, Symbol("prefix"), o.prefix)
    OpenAPI.validate_property(AdvertisedPublicPrefixProperties, Symbol("validationId"), o.validationId)
    OpenAPI.validate_property(AdvertisedPublicPrefixProperties, Symbol("signature"), o.signature)
    OpenAPI.validate_property(AdvertisedPublicPrefixProperties, Symbol("validationState"), o.validationState)
end

function OpenAPI.validate_property(::Type{ AdvertisedPublicPrefixProperties }, name::Symbol, val)




    if name === Symbol("validationState")
        OpenAPI.validate_param(name, "AdvertisedPublicPrefixProperties", :enum, val, ["NotConfigured", "Configuring", "Configured", "ValidationNeeded", "ValidationFailed", "ManualValidationNeeded", "AsnValidationFailed", "CertificateMissingInRoutingRegistry", "InvalidSignatureEncoding", "SignatureVerificationFailed"])
    end

end
