# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""NetworkInterfacePropertiesFormat
NetworkInterface properties.

    NetworkInterfacePropertiesFormat(;
        virtualMachine=nothing,
        networkSecurityGroup=nothing,
        privateEndpoint=nothing,
        ipConfigurations=nothing,
        tapConfigurations=nothing,
        dnsSettings=nothing,
        macAddress=nothing,
        primary=nothing,
        vnetEncryptionSupported=nothing,
        defaultOutboundConnectivityEnabled=nothing,
        enableAcceleratedNetworking=nothing,
        disableTcpStateTracking=nothing,
        enableIPForwarding=nothing,
        hostedWorkloads=nothing,
        dscpConfiguration=nothing,
        resourceGuid=nothing,
        provisioningState=nothing,
        workloadType=nothing,
        nicType=nothing,
        privateLinkService=nothing,
        migrationPhase=nothing,
        auxiliaryMode=nothing,
        auxiliarySku=nothing,
    )

    - virtualMachine::SubResource
    - networkSecurityGroup::NetworkSecurityGroup2
    - privateEndpoint::PrivateEndpoint
    - ipConfigurations::Vector{NetworkInterfaceIPConfiguration} : A list of IPConfigurations of the network interface.
    - tapConfigurations::Vector{NetworkInterfaceTapConfiguration} : A list of TapConfigurations of the network interface.
    - dnsSettings::NetworkInterfaceDnsSettings
    - macAddress::String : The MAC address of the network interface.
    - primary::Bool : Whether this is a primary network interface on a virtual machine.
    - vnetEncryptionSupported::Bool : Whether the virtual machine this nic is attached to supports encryption.
    - defaultOutboundConnectivityEnabled::Bool : Whether default outbound connectivity for nic was configured or not.
    - enableAcceleratedNetworking::Bool : If the network interface is configured for accelerated networking. Not applicable to VM sizes which require accelerated networking.
    - disableTcpStateTracking::Bool : Indicates whether to disable tcp state tracking.
    - enableIPForwarding::Bool : Indicates whether IP forwarding is enabled on this network interface.
    - hostedWorkloads::Vector{String} : A list of references to linked BareMetal resources.
    - dscpConfiguration::SubResource
    - resourceGuid::String : The resource GUID property of the network interface resource.
    - provisioningState::ProvisioningState
    - workloadType::String : WorkloadType of the NetworkInterface for BareMetal resources
    - nicType::String : Type of Network Interface resource.
    - privateLinkService::PrivateLinkService
    - migrationPhase::String : Migration phase of Network Interface resource.
    - auxiliaryMode::String : Auxiliary mode of Network Interface resource.
    - auxiliarySku::String : Auxiliary sku of Network Interface resource.
"""
Base.@kwdef mutable struct NetworkInterfacePropertiesFormat <: OpenAPI.APIModel
    virtualMachine = nothing # spec type: Union{ Nothing, SubResource }
    networkSecurityGroup = nothing # spec type: Union{ Nothing, NetworkSecurityGroup2 }
    privateEndpoint = nothing # spec type: Union{ Nothing, PrivateEndpoint }
    ipConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceIPConfiguration} }
    tapConfigurations::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{NetworkInterfaceTapConfiguration} }
    dnsSettings = nothing # spec type: Union{ Nothing, NetworkInterfaceDnsSettings }
    macAddress::Union{Nothing, String} = nothing
    primary::Union{Nothing, Bool} = nothing
    vnetEncryptionSupported::Union{Nothing, Bool} = nothing
    defaultOutboundConnectivityEnabled::Union{Nothing, Bool} = nothing
    enableAcceleratedNetworking::Union{Nothing, Bool} = nothing
    disableTcpStateTracking::Union{Nothing, Bool} = nothing
    enableIPForwarding::Union{Nothing, Bool} = nothing
    hostedWorkloads::Union{Nothing, Vector{String}} = nothing
    dscpConfiguration = nothing # spec type: Union{ Nothing, SubResource }
    resourceGuid::Union{Nothing, String} = nothing
    provisioningState = nothing # spec type: Union{ Nothing, ProvisioningState }
    workloadType::Union{Nothing, String} = nothing
    nicType::Union{Nothing, String} = nothing
    privateLinkService = nothing # spec type: Union{ Nothing, PrivateLinkService }
    migrationPhase::Union{Nothing, String} = nothing
    auxiliaryMode::Union{Nothing, String} = nothing
    auxiliarySku::Union{Nothing, String} = nothing

    function NetworkInterfacePropertiesFormat(virtualMachine, networkSecurityGroup, privateEndpoint, ipConfigurations, tapConfigurations, dnsSettings, macAddress, primary, vnetEncryptionSupported, defaultOutboundConnectivityEnabled, enableAcceleratedNetworking, disableTcpStateTracking, enableIPForwarding, hostedWorkloads, dscpConfiguration, resourceGuid, provisioningState, workloadType, nicType, privateLinkService, migrationPhase, auxiliaryMode, auxiliarySku, )
        o = new(virtualMachine, networkSecurityGroup, privateEndpoint, ipConfigurations, tapConfigurations, dnsSettings, macAddress, primary, vnetEncryptionSupported, defaultOutboundConnectivityEnabled, enableAcceleratedNetworking, disableTcpStateTracking, enableIPForwarding, hostedWorkloads, dscpConfiguration, resourceGuid, provisioningState, workloadType, nicType, privateLinkService, migrationPhase, auxiliaryMode, auxiliarySku, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type NetworkInterfacePropertiesFormat

const _property_types_NetworkInterfacePropertiesFormat = Dict{Symbol,String}(Symbol("virtualMachine")=>"SubResource", Symbol("networkSecurityGroup")=>"NetworkSecurityGroup2", Symbol("privateEndpoint")=>"PrivateEndpoint", Symbol("ipConfigurations")=>"Vector{NetworkInterfaceIPConfiguration}", Symbol("tapConfigurations")=>"Vector{NetworkInterfaceTapConfiguration}", Symbol("dnsSettings")=>"NetworkInterfaceDnsSettings", Symbol("macAddress")=>"String", Symbol("primary")=>"Bool", Symbol("vnetEncryptionSupported")=>"Bool", Symbol("defaultOutboundConnectivityEnabled")=>"Bool", Symbol("enableAcceleratedNetworking")=>"Bool", Symbol("disableTcpStateTracking")=>"Bool", Symbol("enableIPForwarding")=>"Bool", Symbol("hostedWorkloads")=>"Vector{String}", Symbol("dscpConfiguration")=>"SubResource", Symbol("resourceGuid")=>"String", Symbol("provisioningState")=>"ProvisioningState", Symbol("workloadType")=>"String", Symbol("nicType")=>"String", Symbol("privateLinkService")=>"PrivateLinkService", Symbol("migrationPhase")=>"String", Symbol("auxiliaryMode")=>"String", Symbol("auxiliarySku")=>"String", )
OpenAPI.property_type(::Type{ NetworkInterfacePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_NetworkInterfacePropertiesFormat[name]))}

function OpenAPI.check_required(o::NetworkInterfacePropertiesFormat)
    true
end

function OpenAPI.validate_properties(o::NetworkInterfacePropertiesFormat)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("virtualMachine"), o.virtualMachine)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("networkSecurityGroup"), o.networkSecurityGroup)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("privateEndpoint"), o.privateEndpoint)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("ipConfigurations"), o.ipConfigurations)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("tapConfigurations"), o.tapConfigurations)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("dnsSettings"), o.dnsSettings)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("macAddress"), o.macAddress)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("primary"), o.primary)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("vnetEncryptionSupported"), o.vnetEncryptionSupported)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("defaultOutboundConnectivityEnabled"), o.defaultOutboundConnectivityEnabled)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("enableAcceleratedNetworking"), o.enableAcceleratedNetworking)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("disableTcpStateTracking"), o.disableTcpStateTracking)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("enableIPForwarding"), o.enableIPForwarding)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("hostedWorkloads"), o.hostedWorkloads)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("dscpConfiguration"), o.dscpConfiguration)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("resourceGuid"), o.resourceGuid)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("workloadType"), o.workloadType)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("nicType"), o.nicType)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("privateLinkService"), o.privateLinkService)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("migrationPhase"), o.migrationPhase)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("auxiliaryMode"), o.auxiliaryMode)
    OpenAPI.validate_property(NetworkInterfacePropertiesFormat, Symbol("auxiliarySku"), o.auxiliarySku)
end

function OpenAPI.validate_property(::Type{ NetworkInterfacePropertiesFormat }, name::Symbol, val)



















    if name === Symbol("nicType")
        OpenAPI.validate_param(name, "NetworkInterfacePropertiesFormat", :enum, val, ["Standard", "Elastic"])
    end



    if name === Symbol("migrationPhase")
        OpenAPI.validate_param(name, "NetworkInterfacePropertiesFormat", :enum, val, ["None", "Prepare", "Commit", "Abort", "Committed"])
    end


    if name === Symbol("auxiliaryMode")
        OpenAPI.validate_param(name, "NetworkInterfacePropertiesFormat", :enum, val, ["None", "MaxConnections", "Floating", "AcceleratedConnections"])
    end


    if name === Symbol("auxiliarySku")
        OpenAPI.validate_param(name, "NetworkInterfacePropertiesFormat", :enum, val, ["None", "A1", "A2", "A4", "A8"])
    end

end
