# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PrivateLinkService
Private link service resource.

    PrivateLinkService(;
        extendedLocation=nothing,
        properties=nothing,
        etag=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        location=nothing,
        tags=nothing,
    )

    - extendedLocation::ExtendedLocation
    - properties::PrivateLinkServiceProperties
    - etag::String : A unique read-only string that changes whenever the resource is updated.
    - id::String : Resource ID.
    - name::String : Resource name.
    - type::String : Resource type.
    - location::String : Resource location.
    - tags::Dict{String, String} : Resource tags.
"""
Base.@kwdef mutable struct PrivateLinkService <: OpenAPI.APIModel
    extendedLocation = nothing # spec type: Union{ Nothing, ExtendedLocation }
    properties = nothing # spec type: Union{ Nothing, PrivateLinkServiceProperties }
    etag::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    tags::Union{Nothing, Dict{String, String}} = nothing

    function PrivateLinkService(extendedLocation, properties, etag, id, name, type, location, tags, )
        o = new(extendedLocation, properties, etag, id, name, type, location, tags, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PrivateLinkService

const _property_types_PrivateLinkService = Dict{Symbol,String}(Symbol("extendedLocation")=>"ExtendedLocation", Symbol("properties")=>"PrivateLinkServiceProperties", Symbol("etag")=>"String", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ PrivateLinkService }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrivateLinkService[name]))}

function OpenAPI.check_required(o::PrivateLinkService)
    true
end

function OpenAPI.validate_properties(o::PrivateLinkService)
    OpenAPI.validate_property(PrivateLinkService, Symbol("extendedLocation"), o.extendedLocation)
    OpenAPI.validate_property(PrivateLinkService, Symbol("properties"), o.properties)
    OpenAPI.validate_property(PrivateLinkService, Symbol("etag"), o.etag)
    OpenAPI.validate_property(PrivateLinkService, Symbol("id"), o.id)
    OpenAPI.validate_property(PrivateLinkService, Symbol("name"), o.name)
    OpenAPI.validate_property(PrivateLinkService, Symbol("type"), o.type)
    OpenAPI.validate_property(PrivateLinkService, Symbol("location"), o.location)
    OpenAPI.validate_property(PrivateLinkService, Symbol("tags"), o.tags)
end

function OpenAPI.validate_property(::Type{ PrivateLinkService }, name::Symbol, val)








end
