# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.


mutable struct PrivateEndpointProperties <: SwaggerModel
    subnet::Any # spec type: Union{ Nothing, Subnet } # spec name: subnet
    networkInterfaces::Any # spec type: Union{ Nothing, Vector{NetworkInterface} } # spec name: networkInterfaces
    provisioningState::Any # spec type: Union{ Nothing, ProvisioningState } # spec name: provisioningState
    privateLinkServiceConnections::Any # spec type: Union{ Nothing, Vector{PrivateLinkServiceConnection} } # spec name: privateLinkServiceConnections
    manualPrivateLinkServiceConnections::Any # spec type: Union{ Nothing, Vector{PrivateLinkServiceConnection} } # spec name: manualPrivateLinkServiceConnections
    customDnsConfigs::Any # spec type: Union{ Nothing, Vector{CustomDnsConfigPropertiesFormat} } # spec name: customDnsConfigs

    function PrivateEndpointProperties(;subnet=nothing, networkInterfaces=nothing, provisioningState=nothing, privateLinkServiceConnections=nothing, manualPrivateLinkServiceConnections=nothing, customDnsConfigs=nothing)
        o = new()
        validate_property(PrivateEndpointProperties, Symbol("subnet"), subnet)
        setfield!(o, Symbol("subnet"), subnet)
        validate_property(PrivateEndpointProperties, Symbol("networkInterfaces"), networkInterfaces)
        setfield!(o, Symbol("networkInterfaces"), networkInterfaces)
        validate_property(PrivateEndpointProperties, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        validate_property(PrivateEndpointProperties, Symbol("privateLinkServiceConnections"), privateLinkServiceConnections)
        setfield!(o, Symbol("privateLinkServiceConnections"), privateLinkServiceConnections)
        validate_property(PrivateEndpointProperties, Symbol("manualPrivateLinkServiceConnections"), manualPrivateLinkServiceConnections)
        setfield!(o, Symbol("manualPrivateLinkServiceConnections"), manualPrivateLinkServiceConnections)
        validate_property(PrivateEndpointProperties, Symbol("customDnsConfigs"), customDnsConfigs)
        setfield!(o, Symbol("customDnsConfigs"), customDnsConfigs)
        o
    end
end # type PrivateEndpointProperties

const _property_map_PrivateEndpointProperties = Dict{Symbol,Symbol}(Symbol("subnet")=>Symbol("subnet"), Symbol("networkInterfaces")=>Symbol("networkInterfaces"), Symbol("provisioningState")=>Symbol("provisioningState"), Symbol("privateLinkServiceConnections")=>Symbol("privateLinkServiceConnections"), Symbol("manualPrivateLinkServiceConnections")=>Symbol("manualPrivateLinkServiceConnections"), Symbol("customDnsConfigs")=>Symbol("customDnsConfigs"))
const _property_types_PrivateEndpointProperties = Dict{Symbol,String}(Symbol("subnet")=>"Subnet", Symbol("networkInterfaces")=>"Vector{NetworkInterface}", Symbol("provisioningState")=>"ProvisioningState", Symbol("privateLinkServiceConnections")=>"Vector{PrivateLinkServiceConnection}", Symbol("manualPrivateLinkServiceConnections")=>"Vector{PrivateLinkServiceConnection}", Symbol("customDnsConfigs")=>"Vector{CustomDnsConfigPropertiesFormat}")
Base.propertynames(::Type{ PrivateEndpointProperties }) = collect(keys(_property_map_PrivateEndpointProperties))
Swagger.property_type(::Type{ PrivateEndpointProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PrivateEndpointProperties[name]))}
Swagger.field_name(::Type{ PrivateEndpointProperties }, property_name::Symbol) =  _property_map_PrivateEndpointProperties[property_name]

function check_required(o::PrivateEndpointProperties)
    true
end

function validate_property(::Type{ PrivateEndpointProperties }, name::Symbol, val)
end
