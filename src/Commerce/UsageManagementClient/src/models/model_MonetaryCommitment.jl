# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MonetaryCommitment
Indicates that a monetary commitment is required for this offer

    MonetaryCommitment(;
        TieredDiscount=nothing,
        ExcludedMeterIds=nothing,
        Name=nothing,
        EffectiveDate=nothing,
    )

    - TieredDiscount::Dict{String, Float64} : The list of key/value pairs for the tiered meter rates, in the format &#39;key&#39;:&#39;value&#39; where key &#x3D; price, and value &#x3D; the corresponding discount percentage. This field is used only by offer terms of type &#39;Monetary Commitment&#39;.
    - ExcludedMeterIds::Vector{String} : An array of meter ids that are excluded from the given offer terms.
    - Name::String : Name of the offer term
    - EffectiveDate::ZonedDateTime : Indicates the date from which the offer term is effective.
"""
Base.@kwdef mutable struct MonetaryCommitment <: OpenAPI.APIModel
    TieredDiscount::Union{Nothing, Dict{String, Float64}} = nothing
    ExcludedMeterIds::Union{Nothing, Vector{String}} = nothing
    Name::Union{Nothing, String} = nothing
    EffectiveDate::Union{Nothing, ZonedDateTime} = nothing

    function MonetaryCommitment(TieredDiscount, ExcludedMeterIds, Name, EffectiveDate, )
        OpenAPI.validate_property(MonetaryCommitment, Symbol("TieredDiscount"), TieredDiscount)
        OpenAPI.validate_property(MonetaryCommitment, Symbol("ExcludedMeterIds"), ExcludedMeterIds)
        OpenAPI.validate_property(MonetaryCommitment, Symbol("Name"), Name)
        OpenAPI.validate_property(MonetaryCommitment, Symbol("EffectiveDate"), EffectiveDate)
        return new(TieredDiscount, ExcludedMeterIds, Name, EffectiveDate, )
    end
end # type MonetaryCommitment

const _property_types_MonetaryCommitment = Dict{Symbol,String}(Symbol("TieredDiscount")=>"Dict{String, Float64}", Symbol("ExcludedMeterIds")=>"Vector{String}", Symbol("Name")=>"String", Symbol("EffectiveDate")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ MonetaryCommitment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MonetaryCommitment[name]))}

function check_required(o::MonetaryCommitment)
    o.Name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ MonetaryCommitment }, name::Symbol, val)
    if name === Symbol("Name")
        OpenAPI.validate_param(name, "MonetaryCommitment", :enum, val, ["Recurring Charge", "Monetary Commitment", "Monetary Credit"])
    end
    if name === Symbol("EffectiveDate")
        OpenAPI.validate_param(name, "MonetaryCommitment", :format, val, "date-time")
    end
end
