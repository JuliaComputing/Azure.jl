# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RateCardQueryParameters
Parameters that are used in the odata $filter query parameter for providing RateCard information.

    RateCardQueryParameters(;
        OfferDurableId=nothing,
        Currency=nothing,
        Locale=nothing,
        RegionInfo=nothing,
    )

    - OfferDurableId::String : The Offer ID parameter consists of the &#39;MS-AZR-&#39; prefix, plus the Offer ID number (e.g., MS-AZR-0026P). See https://azure.microsoft.com/en-us/support/legal/offer-details/ for more information on the list of available Offer IDs, country/region availability, and billing currency.
    - Currency::String : The currency in which the rates need to be provided.
    - Locale::String : The culture in which the resource metadata needs to be localized.
    - RegionInfo::String : 2 letter ISO code where the offer was purchased.
"""
Base.@kwdef mutable struct RateCardQueryParameters <: OpenAPI.APIModel
    OfferDurableId::Union{Nothing, String} = nothing
    Currency::Union{Nothing, String} = nothing
    Locale::Union{Nothing, String} = nothing
    RegionInfo::Union{Nothing, String} = nothing

    function RateCardQueryParameters(OfferDurableId, Currency, Locale, RegionInfo, )
        o = new(OfferDurableId, Currency, Locale, RegionInfo, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type RateCardQueryParameters

const _property_types_RateCardQueryParameters = Dict{Symbol,String}(Symbol("OfferDurableId")=>"String", Symbol("Currency")=>"String", Symbol("Locale")=>"String", Symbol("RegionInfo")=>"String", )
OpenAPI.property_type(::Type{ RateCardQueryParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RateCardQueryParameters[name]))}

function OpenAPI.check_required(o::RateCardQueryParameters)
    o.OfferDurableId === nothing && (return false)
    o.Currency === nothing && (return false)
    o.Locale === nothing && (return false)
    o.RegionInfo === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::RateCardQueryParameters)
    OpenAPI.validate_property(RateCardQueryParameters, Symbol("OfferDurableId"), o.OfferDurableId)
    OpenAPI.validate_property(RateCardQueryParameters, Symbol("Currency"), o.Currency)
    OpenAPI.validate_property(RateCardQueryParameters, Symbol("Locale"), o.Locale)
    OpenAPI.validate_property(RateCardQueryParameters, Symbol("RegionInfo"), o.RegionInfo)
end

function OpenAPI.validate_property(::Type{ RateCardQueryParameters }, name::Symbol, val)

    if name === Symbol("OfferDurableId")
        OpenAPI.validate_param(name, "RateCardQueryParameters", :pattern, val, r"^MS-AZR-\d{4}P(-\d{4}P)*$")
    end



end
