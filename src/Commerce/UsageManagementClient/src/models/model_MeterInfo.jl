# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MeterInfo
Detailed information about the meter.

    MeterInfo(;
        MeterId=nothing,
        MeterName=nothing,
        MeterCategory=nothing,
        MeterSubCategory=nothing,
        Unit=nothing,
        MeterTags=nothing,
        MeterRegion=nothing,
        MeterRates=nothing,
        EffectiveDate=nothing,
        IncludedQuantity=nothing,
    )

    - MeterId::String : The unique identifier of the resource.
    - MeterName::String : The name of the meter, within the given meter category
    - MeterCategory::String : The category of the meter, e.g., &#39;Cloud services&#39;, &#39;Networking&#39;, etc..
    - MeterSubCategory::String : The subcategory of the meter, e.g., &#39;A6 Cloud services&#39;, &#39;ExpressRoute (IXP)&#39;, etc..
    - Unit::String : The unit in which the meter consumption is charged, e.g., &#39;Hours&#39;, &#39;GB&#39;, etc.
    - MeterTags::Vector{String} : Provides additional meter data. &#39;Third Party&#39; indicates a meter with no discount. Blanks indicate First Party.
    - MeterRegion::String : The region in which the Azure service is available.
    - MeterRates::Dict{String, Float32} : The list of key/value pairs for the meter rates, in the format &#39;key&#39;:&#39;value&#39; where key &#x3D; the meter quantity, and value &#x3D; the corresponding price
    - EffectiveDate::ZonedDateTime : Indicates the date from which the meter rate is effective.
    - IncludedQuantity::Float32 : The resource quantity that is included in the offer at no cost. Consumption beyond this quantity will be charged.
"""
Base.@kwdef mutable struct MeterInfo <: OpenAPI.APIModel
    MeterId::Union{Nothing, String} = nothing
    MeterName::Union{Nothing, String} = nothing
    MeterCategory::Union{Nothing, String} = nothing
    MeterSubCategory::Union{Nothing, String} = nothing
    Unit::Union{Nothing, String} = nothing
    MeterTags::Union{Nothing, Vector{String}} = nothing
    MeterRegion::Union{Nothing, String} = nothing
    MeterRates::Union{Nothing, Dict{String, Float32}} = nothing
    EffectiveDate::Union{Nothing, ZonedDateTime} = nothing
    IncludedQuantity::Union{Nothing, Float32} = nothing

    function MeterInfo(MeterId, MeterName, MeterCategory, MeterSubCategory, Unit, MeterTags, MeterRegion, MeterRates, EffectiveDate, IncludedQuantity, )
        o = new(MeterId, MeterName, MeterCategory, MeterSubCategory, Unit, MeterTags, MeterRegion, MeterRates, EffectiveDate, IncludedQuantity, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type MeterInfo

const _property_types_MeterInfo = Dict{Symbol,String}(Symbol("MeterId")=>"String", Symbol("MeterName")=>"String", Symbol("MeterCategory")=>"String", Symbol("MeterSubCategory")=>"String", Symbol("Unit")=>"String", Symbol("MeterTags")=>"Vector{String}", Symbol("MeterRegion")=>"String", Symbol("MeterRates")=>"Dict{String, Float32}", Symbol("EffectiveDate")=>"ZonedDateTime", Symbol("IncludedQuantity")=>"Float32", )
OpenAPI.property_type(::Type{ MeterInfo }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MeterInfo[name]))}

function OpenAPI.check_required(o::MeterInfo)
    true
end

function OpenAPI.validate_properties(o::MeterInfo)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterId"), o.MeterId)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterName"), o.MeterName)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterCategory"), o.MeterCategory)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterSubCategory"), o.MeterSubCategory)
    OpenAPI.validate_property(MeterInfo, Symbol("Unit"), o.Unit)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterTags"), o.MeterTags)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterRegion"), o.MeterRegion)
    OpenAPI.validate_property(MeterInfo, Symbol("MeterRates"), o.MeterRates)
    OpenAPI.validate_property(MeterInfo, Symbol("EffectiveDate"), o.EffectiveDate)
    OpenAPI.validate_property(MeterInfo, Symbol("IncludedQuantity"), o.IncludedQuantity)
end

function OpenAPI.validate_property(::Type{ MeterInfo }, name::Symbol, val)

    if name === Symbol("MeterId")
        OpenAPI.validate_param(name, "MeterInfo", :format, val, "uuid")
    end








    if name === Symbol("EffectiveDate")
        OpenAPI.validate_param(name, "MeterInfo", :format, val, "date-time")
    end

    if name === Symbol("IncludedQuantity")
        OpenAPI.validate_param(name, "MeterInfo", :format, val, "float")
    end
end
