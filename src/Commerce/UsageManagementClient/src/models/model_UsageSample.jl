# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UsageSample
Describes a sample of the usageAggregation.

    UsageSample(;
        subscriptionId=nothing,
        meterId=nothing,
        usageStartTime=nothing,
        usageEndTime=nothing,
        quantity=nothing,
        unit=nothing,
        meterName=nothing,
        meterCategory=nothing,
        meterSubCategory=nothing,
        meterRegion=nothing,
        infoFields=nothing,
        instanceData=nothing,
    )

    - subscriptionId::String : The subscription identifier for the Azure user.
    - meterId::String : Unique ID for the resource that was consumed (aka ResourceID).
    - usageStartTime::ZonedDateTime : UTC start time for the usage bucket to which this usage aggregate belongs.
    - usageEndTime::ZonedDateTime : UTC end time for the usage bucket to which this usage aggregate belongs.
    - quantity::Float32 : The amount of the resource consumption that occurred in this time frame.
    - unit::String : The unit in which the usage for this resource is being counted, e.g. Hours, GB.
    - meterName::String : Friendly name of the resource being consumed.
    - meterCategory::String : Category of the consumed resource.
    - meterSubCategory::String : Sub-category of the consumed resource.
    - meterRegion::String : Region of the meterId used for billing purposes
    - infoFields::InfoField
    - instanceData::String : Key-value pairs of instance details represented as a string.
"""
Base.@kwdef mutable struct UsageSample <: OpenAPI.APIModel
    subscriptionId::Union{Nothing, String} = nothing
    meterId::Union{Nothing, String} = nothing
    usageStartTime::Union{Nothing, ZonedDateTime} = nothing
    usageEndTime::Union{Nothing, ZonedDateTime} = nothing
    quantity::Union{Nothing, Float32} = nothing
    unit::Union{Nothing, String} = nothing
    meterName::Union{Nothing, String} = nothing
    meterCategory::Union{Nothing, String} = nothing
    meterSubCategory::Union{Nothing, String} = nothing
    meterRegion::Union{Nothing, String} = nothing
    infoFields = nothing # spec type: Union{ Nothing, InfoField }
    instanceData::Union{Nothing, String} = nothing

    function UsageSample(subscriptionId, meterId, usageStartTime, usageEndTime, quantity, unit, meterName, meterCategory, meterSubCategory, meterRegion, infoFields, instanceData, )
        OpenAPI.validate_property(UsageSample, Symbol("subscriptionId"), subscriptionId)
        OpenAPI.validate_property(UsageSample, Symbol("meterId"), meterId)
        OpenAPI.validate_property(UsageSample, Symbol("usageStartTime"), usageStartTime)
        OpenAPI.validate_property(UsageSample, Symbol("usageEndTime"), usageEndTime)
        OpenAPI.validate_property(UsageSample, Symbol("quantity"), quantity)
        OpenAPI.validate_property(UsageSample, Symbol("unit"), unit)
        OpenAPI.validate_property(UsageSample, Symbol("meterName"), meterName)
        OpenAPI.validate_property(UsageSample, Symbol("meterCategory"), meterCategory)
        OpenAPI.validate_property(UsageSample, Symbol("meterSubCategory"), meterSubCategory)
        OpenAPI.validate_property(UsageSample, Symbol("meterRegion"), meterRegion)
        OpenAPI.validate_property(UsageSample, Symbol("infoFields"), infoFields)
        OpenAPI.validate_property(UsageSample, Symbol("instanceData"), instanceData)
        return new(subscriptionId, meterId, usageStartTime, usageEndTime, quantity, unit, meterName, meterCategory, meterSubCategory, meterRegion, infoFields, instanceData, )
    end
end # type UsageSample

const _property_types_UsageSample = Dict{Symbol,String}(Symbol("subscriptionId")=>"String", Symbol("meterId")=>"String", Symbol("usageStartTime")=>"ZonedDateTime", Symbol("usageEndTime")=>"ZonedDateTime", Symbol("quantity")=>"Float32", Symbol("unit")=>"String", Symbol("meterName")=>"String", Symbol("meterCategory")=>"String", Symbol("meterSubCategory")=>"String", Symbol("meterRegion")=>"String", Symbol("infoFields")=>"InfoField", Symbol("instanceData")=>"String", )
OpenAPI.property_type(::Type{ UsageSample }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsageSample[name]))}

function check_required(o::UsageSample)
    true
end

function OpenAPI.validate_property(::Type{ UsageSample }, name::Symbol, val)
    if name === Symbol("subscriptionId")
        OpenAPI.validate_param(name, "UsageSample", :format, val, "uuid")
    end
    if name === Symbol("usageStartTime")
        OpenAPI.validate_param(name, "UsageSample", :format, val, "date-time")
    end
    if name === Symbol("usageEndTime")
        OpenAPI.validate_param(name, "UsageSample", :format, val, "date-time")
    end
    if name === Symbol("quantity")
        OpenAPI.validate_param(name, "UsageSample", :format, val, "float")
    end
end
