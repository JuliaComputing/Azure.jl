# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunCommandDocumentBase
Describes the properties of a Run Command metadata.

    RunCommandDocumentBase(;
        var"$schema"=nothing,
        id=nothing,
        osType=nothing,
        label=nothing,
        description=nothing,
    )

    - var"$schema"::String : The VM run command schema.
    - id::String : The VM run command id.
    - osType::String : The Operating System type.
    - label::String : The VM run command label.
    - description::String : The VM run command description.
"""
Base.@kwdef mutable struct RunCommandDocumentBase <: OpenAPI.APIModel
    var"$schema"::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    osType::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function RunCommandDocumentBase(var"$schema", id, osType, label, description, )
        o = new(var"$schema", id, osType, label, description, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type RunCommandDocumentBase

const _property_types_RunCommandDocumentBase = Dict{Symbol,String}(Symbol("\$schema")=>"String", Symbol("id")=>"String", Symbol("osType")=>"String", Symbol("label")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ RunCommandDocumentBase }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunCommandDocumentBase[name]))}

function OpenAPI.check_required(o::RunCommandDocumentBase)
    o.var"$schema" === nothing && (return false)
    o.id === nothing && (return false)
    o.osType === nothing && (return false)
    o.label === nothing && (return false)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::RunCommandDocumentBase)
    OpenAPI.validate_property(RunCommandDocumentBase, Symbol("\$schema"), o.var"$schema")
    OpenAPI.validate_property(RunCommandDocumentBase, Symbol("id"), o.id)
    OpenAPI.validate_property(RunCommandDocumentBase, Symbol("osType"), o.osType)
    OpenAPI.validate_property(RunCommandDocumentBase, Symbol("label"), o.label)
    OpenAPI.validate_property(RunCommandDocumentBase, Symbol("description"), o.description)
end

function OpenAPI.validate_property(::Type{ RunCommandDocumentBase }, name::Symbol, val)



    if name === Symbol("osType")
        OpenAPI.validate_param(name, "RunCommandDocumentBase", :enum, val, ["Windows", "Linux"])
    end



end
