# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineRunCommandProperties
Describes the properties of a Virtual Machine run command.

    VirtualMachineRunCommandProperties(;
        source=nothing,
        parameters=nothing,
        protectedParameters=nothing,
        asyncExecution=false,
        runAsUser=nothing,
        runAsPassword=nothing,
        timeoutInSeconds=nothing,
        outputBlobUri=nothing,
        errorBlobUri=nothing,
        provisioningState=nothing,
        instanceView=nothing,
    )

    - source::VirtualMachineRunCommandScriptSource
    - parameters::Vector{RunCommandInputParameter} : The parameters used by the script.
    - protectedParameters::Vector{RunCommandInputParameter} : The parameters used by the script.
    - asyncExecution::Bool : Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
    - runAsUser::String : Specifies the user account on the VM when executing the run command.
    - runAsPassword::String : Specifies the user account password on the VM when executing the run command.
    - timeoutInSeconds::Int64 : The timeout in seconds to execute the run command.
    - outputBlobUri::String : Specifies the Azure storage blob where script output stream will be uploaded.
    - errorBlobUri::String : Specifies the Azure storage blob where script error stream will be uploaded.
    - provisioningState::String : The provisioning state, which only appears in the response.
    - instanceView::VirtualMachineRunCommandInstanceView
"""
Base.@kwdef mutable struct VirtualMachineRunCommandProperties <: OpenAPI.APIModel
    source = nothing # spec type: Union{ Nothing, VirtualMachineRunCommandScriptSource }
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RunCommandInputParameter} }
    protectedParameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RunCommandInputParameter} }
    asyncExecution::Union{Nothing, Bool} = false
    runAsUser::Union{Nothing, String} = nothing
    runAsPassword::Union{Nothing, String} = nothing
    timeoutInSeconds::Union{Nothing, Int64} = nothing
    outputBlobUri::Union{Nothing, String} = nothing
    errorBlobUri::Union{Nothing, String} = nothing
    provisioningState::Union{Nothing, String} = nothing
    instanceView = nothing # spec type: Union{ Nothing, VirtualMachineRunCommandInstanceView }

    function VirtualMachineRunCommandProperties(source, parameters, protectedParameters, asyncExecution, runAsUser, runAsPassword, timeoutInSeconds, outputBlobUri, errorBlobUri, provisioningState, instanceView, )
        o = new(source, parameters, protectedParameters, asyncExecution, runAsUser, runAsPassword, timeoutInSeconds, outputBlobUri, errorBlobUri, provisioningState, instanceView, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineRunCommandProperties

const _property_types_VirtualMachineRunCommandProperties = Dict{Symbol,String}(Symbol("source")=>"VirtualMachineRunCommandScriptSource", Symbol("parameters")=>"Vector{RunCommandInputParameter}", Symbol("protectedParameters")=>"Vector{RunCommandInputParameter}", Symbol("asyncExecution")=>"Bool", Symbol("runAsUser")=>"String", Symbol("runAsPassword")=>"String", Symbol("timeoutInSeconds")=>"Int64", Symbol("outputBlobUri")=>"String", Symbol("errorBlobUri")=>"String", Symbol("provisioningState")=>"String", Symbol("instanceView")=>"VirtualMachineRunCommandInstanceView", )
OpenAPI.property_type(::Type{ VirtualMachineRunCommandProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineRunCommandProperties[name]))}

function OpenAPI.check_required(o::VirtualMachineRunCommandProperties)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineRunCommandProperties)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("source"), o.source)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("parameters"), o.parameters)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("protectedParameters"), o.protectedParameters)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("asyncExecution"), o.asyncExecution)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("runAsUser"), o.runAsUser)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("runAsPassword"), o.runAsPassword)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("timeoutInSeconds"), o.timeoutInSeconds)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("outputBlobUri"), o.outputBlobUri)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("errorBlobUri"), o.errorBlobUri)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(VirtualMachineRunCommandProperties, Symbol("instanceView"), o.instanceView)
end

function OpenAPI.validate_property(::Type{ VirtualMachineRunCommandProperties }, name::Symbol, val)







    if name === Symbol("timeoutInSeconds")
        OpenAPI.validate_param(name, "VirtualMachineRunCommandProperties", :format, val, "int32")
    end




end
