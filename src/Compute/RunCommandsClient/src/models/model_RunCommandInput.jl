# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunCommandInput
Capture Virtual Machine parameters.

    RunCommandInput(;
        commandId=nothing,
        script=nothing,
        parameters=nothing,
    )

    - commandId::String : The run command id.
    - script::Vector{String} : Optional. The script to be executed.  When this value is given, the given script will override the default script of the command.
    - parameters::Vector{RunCommandInputParameter} : The run command parameters.
"""
Base.@kwdef mutable struct RunCommandInput <: OpenAPI.APIModel
    commandId::Union{Nothing, String} = nothing
    script::Union{Nothing, Vector{String}} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RunCommandInputParameter} }

    function RunCommandInput(commandId, script, parameters, )
        OpenAPI.validate_property(RunCommandInput, Symbol("commandId"), commandId)
        OpenAPI.validate_property(RunCommandInput, Symbol("script"), script)
        OpenAPI.validate_property(RunCommandInput, Symbol("parameters"), parameters)
        return new(commandId, script, parameters, )
    end
end # type RunCommandInput

const _property_types_RunCommandInput = Dict{Symbol,String}(Symbol("commandId")=>"String", Symbol("script")=>"Vector{String}", Symbol("parameters")=>"Vector{RunCommandInputParameter}", )
OpenAPI.property_type(::Type{ RunCommandInput }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunCommandInput[name]))}

function check_required(o::RunCommandInput)
    o.commandId === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunCommandInput }, name::Symbol, val)
end
