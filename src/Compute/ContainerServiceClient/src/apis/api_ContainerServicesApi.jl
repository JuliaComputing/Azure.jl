# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ContainerServicesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ContainerServicesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ContainerServicesApi }) = "https://management.azure.com"

const _returntypes_container_services_create_or_update_ContainerServicesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ContainerService,
    Regex("^" * replace("201", "x"=>".") * "\$") => ContainerService,
    Regex("^" * replace("202", "x"=>".") * "\$") => ContainerService,
)

function _oacinternal_container_services_create_or_update(_api::ContainerServicesApi, resource_group_name::String, container_service_name::String, api_version::String, subscription_id::String, parameters::ContainerService; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_container_services_create_or_update_ContainerServicesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/containerServices/{containerServiceName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "containerServiceName", container_service_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a container service.

Creates or updates a container service with the specified configuration of orchestrator, masters, and agents.

Params:
- resource_group_name::String (required)
- container_service_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ContainerService (required)

Return: ContainerService, OpenAPI.Clients.ApiResponse
"""
function container_services_create_or_update(_api::ContainerServicesApi, resource_group_name::String, container_service_name::String, api_version::String, subscription_id::String, parameters::ContainerService; _mediaType=nothing)
    _ctx = _oacinternal_container_services_create_or_update(_api, resource_group_name, container_service_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function container_services_create_or_update(_api::ContainerServicesApi, response_stream::Channel, resource_group_name::String, container_service_name::String, api_version::String, subscription_id::String, parameters::ContainerService; _mediaType=nothing)
    _ctx = _oacinternal_container_services_create_or_update(_api, resource_group_name, container_service_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_container_services_list_ContainerServicesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ContainerServiceListResult,
)

function _oacinternal_container_services_list(_api::ContainerServicesApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_container_services_list_ContainerServicesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerService/containerServices", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a list of container services in the specified subscription.

Gets a list of container services in the specified subscription. The operation returns properties of each container service including state, orchestrator, number of masters and agents, and FQDNs of masters and agents.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ContainerServiceListResult, OpenAPI.Clients.ApiResponse
"""
function container_services_list(_api::ContainerServicesApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_container_services_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function container_services_list(_api::ContainerServicesApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_container_services_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export container_services_create_or_update
export container_services_list
