# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ContainerServiceMasterProfile
Profile for the container service master.

    ContainerServiceMasterProfile(;
        count=1,
        dnsPrefix=nothing,
        fqdn=nothing,
    )

    - count::Int64 : Number of masters (VMs) in the container service cluster. Allowed values are 1, 3, and 5. The default value is 1.
    - dnsPrefix::String : DNS prefix to be used to create the FQDN for master.
    - fqdn::String : FQDN for the master.
"""
Base.@kwdef mutable struct ContainerServiceMasterProfile <: OpenAPI.APIModel
    count::Union{Nothing, Int64} = 1
    dnsPrefix::Union{Nothing, String} = nothing
    fqdn::Union{Nothing, String} = nothing

    function ContainerServiceMasterProfile(count, dnsPrefix, fqdn, )
        o = new(count, dnsPrefix, fqdn, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ContainerServiceMasterProfile

const _property_types_ContainerServiceMasterProfile = Dict{Symbol,String}(Symbol("count")=>"Int64", Symbol("dnsPrefix")=>"String", Symbol("fqdn")=>"String", )
OpenAPI.property_type(::Type{ ContainerServiceMasterProfile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ContainerServiceMasterProfile[name]))}

function OpenAPI.check_required(o::ContainerServiceMasterProfile)
    o.dnsPrefix === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ContainerServiceMasterProfile)
    OpenAPI.validate_property(ContainerServiceMasterProfile, Symbol("count"), o.count)
    OpenAPI.validate_property(ContainerServiceMasterProfile, Symbol("dnsPrefix"), o.dnsPrefix)
    OpenAPI.validate_property(ContainerServiceMasterProfile, Symbol("fqdn"), o.fqdn)
end

function OpenAPI.validate_property(::Type{ ContainerServiceMasterProfile }, name::Symbol, val)

    if name === Symbol("count")
        OpenAPI.validate_param(name, "ContainerServiceMasterProfile", :enum, val, [1, 3, 5])
    end



end
