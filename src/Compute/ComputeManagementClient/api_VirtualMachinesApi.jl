# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.

struct VirtualMachinesApi <: SwaggerApi
    client::Swagger.Client
end

"""

Assess patches on the VM.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineAssessPatchesResult
"""
function _swaggerinternal_virtualMachinesAssessPatches(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", VirtualMachineAssessPatchesResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/assessPatches", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesAssessPatches(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesAssessPatches(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesAssessPatches(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesAssessPatches(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: parameters::VirtualMachineCaptureParameters (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineCaptureResult
"""
function _swaggerinternal_virtualMachinesCapture(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", VirtualMachineCaptureResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesCapture(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesCapture(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesCapture(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesCapture(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Converts virtual machine disks from blob-based to managed disks. Virtual machine must be stop-deallocated before invoking this operation.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesConvertToManagedDisks(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesConvertToManagedDisks(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesConvertToManagedDisks(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesConvertToManagedDisks(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesConvertToManagedDisks(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to create or update a virtual machine. Please note some properties can be set only during virtual machine creation.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: parameters::VirtualMachine (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachine
"""
function _swaggerinternal_virtualMachinesCreateOrUpdate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PUT", VirtualMachine, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesCreateOrUpdate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesCreateOrUpdate(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesCreateOrUpdate(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesCreateOrUpdate(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Shuts down the virtual machine and releases the compute resources. You are not billed for the compute resources that this virtual machine uses.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesDeallocate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesDeallocate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesDeallocate(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesDeallocate(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesDeallocate(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to delete a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesDelete(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "DELETE", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesDelete(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesDelete(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesDelete(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesDelete(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the virtual machine before performing this operation. <br>For Windows, please refer to [Create a managed image of a generalized VM in Azure](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/capture-image-resource).<br>For Linux, please refer to [How to create an image of a virtual machine or VHD](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/capture-image).
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesGeneralize(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesGeneralize(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesGeneralize(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesGeneralize(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesGeneralize(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Retrieves information about the model view or the instance view of a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: expand::String
Return: VirtualMachine
"""
function _swaggerinternal_virtualMachinesGet(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; expand=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachine, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "\$expand", expand)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesGet(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; expand=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesGet(_api, resourceGroupName, vmName, api_version, subscriptionId; expand=expand, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesGet(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; expand=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesGet(_api, resourceGroupName, vmName, api_version, subscriptionId; expand=expand, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Retrieves information about the run-time state of a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineInstanceView
"""
function _swaggerinternal_virtualMachinesInstanceView(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachineInstanceView, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesInstanceView(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesInstanceView(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesInstanceView(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesInstanceView(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Lists all of the virtual machines in the specified resource group. Use the nextLink property in the response to get the next page of virtual machines.
Param: resourceGroupName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineListResult
"""
function _swaggerinternal_virtualMachinesList(_api::VirtualMachinesApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachineListResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesList(_api::VirtualMachinesApi, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesList(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesList(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesList(_api, resourceGroupName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Lists all of the virtual machines in the specified subscription. Use the nextLink property in the response to get the next page of virtual machines.
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: statusOnly::String
Return: VirtualMachineListResult
"""
function _swaggerinternal_virtualMachinesListAll(_api::VirtualMachinesApi, api_version::String, subscriptionId::String; statusOnly=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachineListResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines", ["azure_auth"])
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_param(_ctx.query, "statusOnly", statusOnly)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesListAll(_api::VirtualMachinesApi, api_version::String, subscriptionId::String; statusOnly=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListAll(_api, api_version, subscriptionId; statusOnly=statusOnly, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesListAll(_api::VirtualMachinesApi, response_stream::Channel, api_version::String, subscriptionId::String; statusOnly=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListAll(_api, api_version, subscriptionId; statusOnly=statusOnly, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Lists all available virtual machine sizes to which the specified virtual machine can be resized.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineSizeListResult
"""
function _swaggerinternal_virtualMachinesListAvailableSizes(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachineSizeListResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesListAvailableSizes(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListAvailableSizes(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesListAvailableSizes(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListAvailableSizes(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Gets all the virtual machines under the specified subscription for the specified location.
Param: location::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachineListResult
"""
function _swaggerinternal_virtualMachinesListByLocation(_api::VirtualMachinesApi, location::String, api_version::String, subscriptionId::String; _mediaType=nothing)

    _ctx = Swagger.Ctx(_api.client, "GET", VirtualMachineListResult, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachines", ["azure_auth"])
    Swagger.set_param(_ctx.path, "location", location)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesListByLocation(_api::VirtualMachinesApi, location::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListByLocation(_api, location, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesListByLocation(_api::VirtualMachinesApi, response_stream::Channel, location::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesListByLocation(_api, location, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to perform maintenance on a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesPerformMaintenance(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesPerformMaintenance(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesPerformMaintenance(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesPerformMaintenance(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesPerformMaintenance(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the same provisioned resources. You are still charged for this virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: skipShutdown::Bool
Return: Nothing
"""
function _swaggerinternal_virtualMachinesPowerOff(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; skipShutdown=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "skipShutdown", skipShutdown)  # type Bool
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesPowerOff(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; skipShutdown=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesPowerOff(_api, resourceGroupName, vmName, api_version, subscriptionId; skipShutdown=skipShutdown, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesPowerOff(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; skipShutdown=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesPowerOff(_api, resourceGroupName, vmName, api_version, subscriptionId; skipShutdown=skipShutdown, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to reapply a virtual machine's state.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesReapply(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reapply", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesReapply(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesReapply(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesReapply(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesReapply(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Shuts down the virtual machine, moves it to a new node, and powers it back on.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesRedeploy(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesRedeploy(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRedeploy(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesRedeploy(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRedeploy(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

Reimages the virtual machine which has an ephemeral OS disk back to its initial state.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: parameters::VirtualMachineReimageParameters
Return: Nothing
"""
function _swaggerinternal_virtualMachinesReimage(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; parameters=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reimage", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesReimage(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; parameters=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesReimage(_api, resourceGroupName, vmName, api_version, subscriptionId; parameters=parameters, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesReimage(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; parameters=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesReimage(_api, resourceGroupName, vmName, api_version, subscriptionId; parameters=parameters, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to restart a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesRestart(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesRestart(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRestart(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesRestart(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRestart(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Param: sasUriExpirationTimeInMinutes::Int32
Return: RetrieveBootDiagnosticsDataResult
"""
function _swaggerinternal_virtualMachinesRetrieveBootDiagnosticsData(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; sasUriExpirationTimeInMinutes=nothing, _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", RetrieveBootDiagnosticsDataResult, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/retrieveBootDiagnosticsData", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "sasUriExpirationTimeInMinutes", sasUriExpirationTimeInMinutes)  # type Int32
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesRetrieveBootDiagnosticsData(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; sasUriExpirationTimeInMinutes=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRetrieveBootDiagnosticsData(_api, resourceGroupName, vmName, api_version, subscriptionId; sasUriExpirationTimeInMinutes=sasUriExpirationTimeInMinutes, _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesRetrieveBootDiagnosticsData(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; sasUriExpirationTimeInMinutes=nothing, _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesRetrieveBootDiagnosticsData(_api, resourceGroupName, vmName, api_version, subscriptionId; sasUriExpirationTimeInMinutes=sasUriExpirationTimeInMinutes, _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to simulate the eviction of spot virtual machine. The eviction will occur within 30 minutes of calling the API
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesSimulateEviction(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/simulateEviction", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesSimulateEviction(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesSimulateEviction(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesSimulateEviction(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesSimulateEviction(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to start a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: Nothing
"""
function _swaggerinternal_virtualMachinesStart(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "POST", Nothing, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start", ["azure_auth"])
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesStart(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesStart(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesStart(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesStart(_api, resourceGroupName, vmName, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

"""

The operation to update a virtual machine.
Param: resourceGroupName::String (required)
Param: vmName::String (required)
Param: parameters::VirtualMachineUpdate (required)
Param: api_version::String (required)
Param: subscriptionId::String (required)
Return: VirtualMachine
"""
function _swaggerinternal_virtualMachinesUpdate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = Swagger.Ctx(_api.client, "PATCH", VirtualMachine, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth"], parameters)
    Swagger.set_param(_ctx.path, "resourceGroupName", resourceGroupName)  # type String
    Swagger.set_param(_ctx.path, "vmName", vmName)  # type String
    Swagger.set_param(_ctx.path, "subscriptionId", subscriptionId)  # type String
    Swagger.set_param(_ctx.query, "api-version", api_version)  # type String
    Swagger.set_header_accept(_ctx, ["application/json"])
    Swagger.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json"] : [_mediaType])
    return _ctx
end

function virtualMachinesUpdate(_api::VirtualMachinesApi, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesUpdate(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx)
end

function virtualMachinesUpdate(_api::VirtualMachinesApi, response_stream::Channel, resourceGroupName::String, vmName::String, parameters, api_version::String, subscriptionId::String; _mediaType=nothing)
    _ctx = _swaggerinternal_virtualMachinesUpdate(_api, resourceGroupName, vmName, parameters, api_version, subscriptionId; _mediaType=_mediaType)
    Swagger.exec(_ctx, response_stream)
end

export virtualMachinesAssessPatches, virtualMachinesCapture, virtualMachinesConvertToManagedDisks, virtualMachinesCreateOrUpdate, virtualMachinesDeallocate, virtualMachinesDelete, virtualMachinesGeneralize, virtualMachinesGet, virtualMachinesInstanceView, virtualMachinesList, virtualMachinesListAll, virtualMachinesListAvailableSizes, virtualMachinesListByLocation, virtualMachinesPerformMaintenance, virtualMachinesPowerOff, virtualMachinesReapply, virtualMachinesRedeploy, virtualMachinesReimage, virtualMachinesRestart, virtualMachinesRetrieveBootDiagnosticsData, virtualMachinesSimulateEviction, virtualMachinesStart, virtualMachinesUpdate
