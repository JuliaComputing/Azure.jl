# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct VirtualMachinesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `VirtualMachinesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ VirtualMachinesApi }) = "https://management.azure.com"

const _returntypes_virtual_machines_assess_patches_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineAssessPatchesResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_assess_patches(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_assess_patches_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/assessPatches", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Assess patches on the VM.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualMachineAssessPatchesResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_assess_patches(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_assess_patches(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_assess_patches(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_assess_patches(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_capture_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineCaptureResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_capture(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineCaptureParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_capture_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/capture", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Captures the VM by copying virtual hard disks of the VM and outputs a template that can be used to create similar VMs.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::VirtualMachineCaptureParameters (required)

Return: VirtualMachineCaptureResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_capture(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineCaptureParameters; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_capture(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_capture(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineCaptureParameters; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_capture(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_convert_to_managed_disks_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_convert_to_managed_disks(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_convert_to_managed_disks_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/convertToManagedDisks", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Converts virtual machine disks from blob-based to managed disks. Virtual machine must be stop-deallocated before invoking this operation.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_convert_to_managed_disks(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_convert_to_managed_disks(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_convert_to_managed_disks(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_convert_to_managed_disks(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_create_or_update_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachine,
    Regex("^" * replace("201", "x"=>".") * "\$") => VirtualMachine,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_create_or_update(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachine; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_virtual_machines_create_or_update_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to create or update a virtual machine. Please note some properties can be set only during virtual machine creation.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::VirtualMachine (required)

Return: VirtualMachine, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_create_or_update(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachine; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_create_or_update(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_create_or_update(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachine; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_create_or_update(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_deallocate_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_deallocate(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; hibernate=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_deallocate_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/deallocate", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "hibernate", hibernate; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Shuts down the virtual machine and releases the compute resources. You are not billed for the compute resources that this virtual machine uses.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- hibernate::Bool

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_deallocate(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; hibernate=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_deallocate(_api, resource_group_name, vm_name, api_version, subscription_id; hibernate=hibernate, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_deallocate(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; hibernate=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_deallocate(_api, resource_group_name, vm_name, api_version, subscription_id; hibernate=hibernate, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_delete_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_delete(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; force_deletion=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_virtual_machines_delete_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "forceDeletion", force_deletion; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to delete a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- force_deletion::Bool

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_delete(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; force_deletion=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_delete(_api, resource_group_name, vm_name, api_version, subscription_id; force_deletion=force_deletion, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_delete(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; force_deletion=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_delete(_api, resource_group_name, vm_name, api_version, subscription_id; force_deletion=force_deletion, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_generalize_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_generalize(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_generalize_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/generalize", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Sets the OS state of the virtual machine to generalized. It is recommended to sysprep the virtual machine before performing this operation. <br>For Windows, please refer to [Create a managed image of a generalized VM in Azure](https://docs.microsoft.com/azure/virtual-machines/windows/capture-image-resource).<br>For Linux, please refer to [How to create an image of a virtual machine or VHD](https://docs.microsoft.com/azure/virtual-machines/linux/capture-image).

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_generalize(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_generalize(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_generalize(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_generalize(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_get_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachine,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_get(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_get_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves information about the model view or the instance view of a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: VirtualMachine, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_get(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_get(_api, resource_group_name, vm_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_get(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_get(_api, resource_group_name, vm_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_install_patches_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineInstallPatchesResult,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_install_patches(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, install_patches_input::VirtualMachineInstallPatchesParameters; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_install_patches_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/installPatches", ["azure_auth", ], install_patches_input)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Installs patches on the VM.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- install_patches_input::VirtualMachineInstallPatchesParameters (required)

Return: VirtualMachineInstallPatchesResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_install_patches(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, install_patches_input::VirtualMachineInstallPatchesParameters; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_install_patches(_api, resource_group_name, vm_name, api_version, subscription_id, install_patches_input; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_install_patches(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, install_patches_input::VirtualMachineInstallPatchesParameters; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_install_patches(_api, resource_group_name, vm_name, api_version, subscription_id, install_patches_input; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_instance_view_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineInstanceView,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_instance_view(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_instance_view_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/instanceView", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves information about the run-time state of a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualMachineInstanceView, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_instance_view(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_instance_view(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_instance_view(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_instance_view(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_list_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_list(_api::VirtualMachinesApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_list_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all of the virtual machines in the specified resource group. Use the nextLink property in the response to get the next page of virtual machines.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- filter::String

Return: VirtualMachineListResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_list(_api::VirtualMachinesApi, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list(_api, resource_group_name, api_version, subscription_id; filter=filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_list(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list(_api, resource_group_name, api_version, subscription_id; filter=filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_list_all_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_list_all(_api::VirtualMachinesApi, api_version::String, subscription_id::String; status_only=nothing, filter=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_list_all_VirtualMachinesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/virtualMachines", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "statusOnly", status_only; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all of the virtual machines in the specified subscription. Use the nextLink property in the response to get the next page of virtual machines.

Params:
- api_version::String (required)
- subscription_id::String (required)
- status_only::String
- filter::String

Return: VirtualMachineListResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_list_all(_api::VirtualMachinesApi, api_version::String, subscription_id::String; status_only=nothing, filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_all(_api, api_version, subscription_id; status_only=status_only, filter=filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_list_all(_api::VirtualMachinesApi, response_stream::Channel, api_version::String, subscription_id::String; status_only=nothing, filter=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_all(_api, api_version, subscription_id; status_only=status_only, filter=filter, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_list_available_sizes_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineSizeListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_list_available_sizes(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_list_available_sizes_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/vmSizes", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all available virtual machine sizes to which the specified virtual machine can be resized.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualMachineSizeListResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_list_available_sizes(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_available_sizes(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_list_available_sizes(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_available_sizes(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_list_by_location_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineListResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_list_by_location(_api::VirtualMachinesApi, location::String, api_version::String, subscription_id::String; _mediaType=nothing)
        OpenAPI.validate_param("location", "virtual_machines_list_by_location", :pattern, location, r"^[-\w\._]+$")

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machines_list_by_location_VirtualMachinesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/virtualMachines", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets all the virtual machines under the specified subscription for the specified location.

Params:
- location::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualMachineListResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_list_by_location(_api::VirtualMachinesApi, location::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_by_location(_api, location, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_list_by_location(_api::VirtualMachinesApi, response_stream::Channel, location::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_list_by_location(_api, location, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_perform_maintenance_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_perform_maintenance(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_perform_maintenance_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/performMaintenance", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to perform maintenance on a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_perform_maintenance(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_perform_maintenance(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_perform_maintenance(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_perform_maintenance(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_power_off_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_power_off(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; skip_shutdown=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_power_off_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/powerOff", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "skipShutdown", skip_shutdown; style="", is_explode=false)  # type Bool
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to power off (stop) a virtual machine. The virtual machine can be restarted with the same provisioned resources. You are still charged for this virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- skip_shutdown::Bool

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_power_off(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; skip_shutdown=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_power_off(_api, resource_group_name, vm_name, api_version, subscription_id; skip_shutdown=skip_shutdown, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_power_off(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; skip_shutdown=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_power_off(_api, resource_group_name, vm_name, api_version, subscription_id; skip_shutdown=skip_shutdown, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_reapply_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_reapply(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_reapply_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reapply", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to reapply a virtual machine's state.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_reapply(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_reapply(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_reapply(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_reapply(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_redeploy_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_redeploy(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_redeploy_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/redeploy", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Shuts down the virtual machine, moves it to a new node, and powers it back on.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_redeploy(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_redeploy(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_redeploy(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_redeploy(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_reimage_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_reimage(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_reimage_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/reimage", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Reimages the virtual machine which has an ephemeral OS disk back to its initial state.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::VirtualMachineReimageParameters

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_reimage(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_reimage(_api, resource_group_name, vm_name, api_version, subscription_id; parameters=parameters, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_reimage(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; parameters=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_reimage(_api, resource_group_name, vm_name, api_version, subscription_id; parameters=parameters, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_restart_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_restart(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_restart_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/restart", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to restart a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_restart(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_restart(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_restart(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_restart(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_retrieve_boot_diagnostics_data_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RetrieveBootDiagnosticsDataResult,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_retrieve_boot_diagnostics_data(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; sas_uri_expiration_time_in_minutes=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_retrieve_boot_diagnostics_data_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/retrieveBootDiagnosticsData", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "sasUriExpirationTimeInMinutes", sas_uri_expiration_time_in_minutes; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to retrieve SAS URIs for a virtual machine's boot diagnostic logs.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- sas_uri_expiration_time_in_minutes::Int64

Return: RetrieveBootDiagnosticsDataResult, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_retrieve_boot_diagnostics_data(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; sas_uri_expiration_time_in_minutes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_retrieve_boot_diagnostics_data(_api, resource_group_name, vm_name, api_version, subscription_id; sas_uri_expiration_time_in_minutes=sas_uri_expiration_time_in_minutes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_retrieve_boot_diagnostics_data(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; sas_uri_expiration_time_in_minutes=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_retrieve_boot_diagnostics_data(_api, resource_group_name, vm_name, api_version, subscription_id; sas_uri_expiration_time_in_minutes=sas_uri_expiration_time_in_minutes, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_simulate_eviction_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_simulate_eviction(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_simulate_eviction_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/simulateEviction", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to simulate the eviction of spot virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_simulate_eviction(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_simulate_eviction(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_simulate_eviction(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_simulate_eviction(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_start_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_start(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_virtual_machines_start_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}/start", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to start a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_start(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_start(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_start(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_start(_api, resource_group_name, vm_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machines_update_VirtualMachinesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachine,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machines_update(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_virtual_machines_update_VirtualMachinesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "vmName", vm_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""The operation to update a virtual machine.

Params:
- resource_group_name::String (required)
- vm_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::VirtualMachineUpdate (required)

Return: VirtualMachine, OpenAPI.Clients.ApiResponse
"""
function virtual_machines_update(_api::VirtualMachinesApi, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineUpdate; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_update(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machines_update(_api::VirtualMachinesApi, response_stream::Channel, resource_group_name::String, vm_name::String, api_version::String, subscription_id::String, parameters::VirtualMachineUpdate; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machines_update(_api, resource_group_name, vm_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export virtual_machines_assess_patches
export virtual_machines_capture
export virtual_machines_convert_to_managed_disks
export virtual_machines_create_or_update
export virtual_machines_deallocate
export virtual_machines_delete
export virtual_machines_generalize
export virtual_machines_get
export virtual_machines_install_patches
export virtual_machines_instance_view
export virtual_machines_list
export virtual_machines_list_all
export virtual_machines_list_available_sizes
export virtual_machines_list_by_location
export virtual_machines_perform_maintenance
export virtual_machines_power_off
export virtual_machines_reapply
export virtual_machines_redeploy
export virtual_machines_reimage
export virtual_machines_restart
export virtual_machines_retrieve_boot_diagnostics_data
export virtual_machines_simulate_eviction
export virtual_machines_start
export virtual_machines_update
