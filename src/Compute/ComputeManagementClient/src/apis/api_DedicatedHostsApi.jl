# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DedicatedHostsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DedicatedHostsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DedicatedHostsApi }) = "https://management.azure.com"

const _returntypes_dedicated_hosts_create_or_update_DedicatedHostsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DedicatedHost,
    Regex("^" * replace("201", "x"=>".") * "\$") => DedicatedHost,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_dedicated_hosts_create_or_update(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHost; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_dedicated_hosts_create_or_update_DedicatedHostsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostGroupName", host_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostName", host_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or update a dedicated host .

Params:
- resource_group_name::String (required)
- host_group_name::String (required)
- host_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::DedicatedHost (required)

Return: DedicatedHost, OpenAPI.Clients.ApiResponse
"""
function dedicated_hosts_create_or_update(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHost; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_create_or_update(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function dedicated_hosts_create_or_update(_api::DedicatedHostsApi, response_stream::Channel, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHost; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_create_or_update(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_dedicated_hosts_delete_DedicatedHostsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_dedicated_hosts_delete(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_dedicated_hosts_delete_DedicatedHostsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostGroupName", host_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostName", host_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a dedicated host.

Params:
- resource_group_name::String (required)
- host_group_name::String (required)
- host_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function dedicated_hosts_delete(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_delete(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function dedicated_hosts_delete(_api::DedicatedHostsApi, response_stream::Channel, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_delete(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_dedicated_hosts_get_DedicatedHostsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DedicatedHost,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_dedicated_hosts_get(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_dedicated_hosts_get_DedicatedHostsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostGroupName", host_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostName", host_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves information about a dedicated host.

Params:
- resource_group_name::String (required)
- host_group_name::String (required)
- host_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: DedicatedHost, OpenAPI.Clients.ApiResponse
"""
function dedicated_hosts_get(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_get(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function dedicated_hosts_get(_api::DedicatedHostsApi, response_stream::Channel, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_get(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_dedicated_hosts_update_DedicatedHostsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DedicatedHost,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_dedicated_hosts_update(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHostUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_dedicated_hosts_update_DedicatedHostsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}/hosts/{hostName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostGroupName", host_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "hostName", host_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an dedicated host .

Params:
- resource_group_name::String (required)
- host_group_name::String (required)
- host_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::DedicatedHostUpdate (required)

Return: DedicatedHost, OpenAPI.Clients.ApiResponse
"""
function dedicated_hosts_update(_api::DedicatedHostsApi, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHostUpdate; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_update(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function dedicated_hosts_update(_api::DedicatedHostsApi, response_stream::Channel, resource_group_name::String, host_group_name::String, host_name::String, api_version::String, subscription_id::String, parameters::DedicatedHostUpdate; _mediaType=nothing)
    _ctx = _oacinternal_dedicated_hosts_update(_api, resource_group_name, host_group_name, host_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export dedicated_hosts_create_or_update
export dedicated_hosts_delete
export dedicated_hosts_get
export dedicated_hosts_update
