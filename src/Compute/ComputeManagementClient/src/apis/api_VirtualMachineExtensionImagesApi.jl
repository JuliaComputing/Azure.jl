# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct VirtualMachineExtensionImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `VirtualMachineExtensionImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ VirtualMachineExtensionImagesApi }) = "https://management.azure.com"

const _returntypes_virtual_machine_extension_images_get_VirtualMachineExtensionImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => VirtualMachineExtensionImage,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machine_extension_images_get(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, type::String, version::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machine_extension_images_get_VirtualMachineExtensionImagesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions/{version}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "publisherName", publisher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "type", type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "version", version)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a virtual machine extension image.

Params:
- location::String (required)
- publisher_name::String (required)
- type::String (required)
- version::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: VirtualMachineExtensionImage, OpenAPI.Clients.ApiResponse
"""
function virtual_machine_extension_images_get(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, type::String, version::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_get(_api, location, publisher_name, type, version, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machine_extension_images_get(_api::VirtualMachineExtensionImagesApi, response_stream::Channel, location::String, publisher_name::String, type::String, version::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_get(_api, location, publisher_name, type, version, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machine_extension_images_list_types_VirtualMachineExtensionImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{VirtualMachineExtensionImage},
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machine_extension_images_list_types(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machine_extension_images_list_types_VirtualMachineExtensionImagesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "publisherName", publisher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a list of virtual machine extension image types.

Params:
- location::String (required)
- publisher_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Vector{VirtualMachineExtensionImage}, OpenAPI.Clients.ApiResponse
"""
function virtual_machine_extension_images_list_types(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_list_types(_api, location, publisher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machine_extension_images_list_types(_api::VirtualMachineExtensionImagesApi, response_stream::Channel, location::String, publisher_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_list_types(_api, location, publisher_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_virtual_machine_extension_images_list_versions_VirtualMachineExtensionImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Vector{VirtualMachineExtensionImage},
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_virtual_machine_extension_images_list_versions(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, type::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, orderby=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_virtual_machine_extension_images_list_versions_VirtualMachineExtensionImagesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/publishers/{publisherName}/artifacttypes/vmextension/types/{type}/versions", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "location", location)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "publisherName", publisher_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "type", type)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$filter", filter; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$top", top; style="", is_explode=false)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "\$orderby", orderby; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets a list of virtual machine extension image versions.

Params:
- location::String (required)
- publisher_name::String (required)
- type::String (required)
- api_version::String (required)
- subscription_id::String (required)
- filter::String
- top::Int64
- orderby::String

Return: Vector{VirtualMachineExtensionImage}, OpenAPI.Clients.ApiResponse
"""
function virtual_machine_extension_images_list_versions(_api::VirtualMachineExtensionImagesApi, location::String, publisher_name::String, type::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, orderby=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_list_versions(_api, location, publisher_name, type, api_version, subscription_id; filter=filter, top=top, orderby=orderby, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function virtual_machine_extension_images_list_versions(_api::VirtualMachineExtensionImagesApi, response_stream::Channel, location::String, publisher_name::String, type::String, api_version::String, subscription_id::String; filter=nothing, top=nothing, orderby=nothing, _mediaType=nothing)
    _ctx = _oacinternal_virtual_machine_extension_images_list_versions(_api, location, publisher_name, type, api_version, subscription_id; filter=filter, top=top, orderby=orderby, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export virtual_machine_extension_images_get
export virtual_machine_extension_images_list_types
export virtual_machine_extension_images_list_versions
