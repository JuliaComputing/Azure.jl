# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ImagesApi }) = "https://management.azure.com"

const _returntypes_images_create_or_update_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Image,
    Regex("^" * replace("201", "x"=>".") * "\$") => Image,
)

function _oacinternal_images_create_or_update(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::Image; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_images_create_or_update_ImagesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "imageName", image_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create or update an image.

Params:
- resource_group_name::String (required)
- image_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::Image (required)

Return: Image, OpenAPI.Clients.ApiResponse
"""
function images_create_or_update(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::Image; _mediaType=nothing)
    _ctx = _oacinternal_images_create_or_update(_api, resource_group_name, image_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_create_or_update(_api::ImagesApi, response_stream::Channel, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::Image; _mediaType=nothing)
    _ctx = _oacinternal_images_create_or_update(_api, resource_group_name, image_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_images_delete_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_images_delete(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_images_delete_ImagesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "imageName", image_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes an Image.

Params:
- resource_group_name::String (required)
- image_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function images_delete(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_delete(_api, resource_group_name, image_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_delete(_api::ImagesApi, response_stream::Channel, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_delete(_api, resource_group_name, image_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_images_get_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Image,
)

function _oacinternal_images_get(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_images_get_ImagesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "imageName", image_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "\$expand", expand)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets an image.

Params:
- resource_group_name::String (required)
- image_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- expand::String

Return: Image, OpenAPI.Clients.ApiResponse
"""
function images_get(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_images_get(_api, resource_group_name, image_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_get(_api::ImagesApi, response_stream::Channel, resource_group_name::String, image_name::String, api_version::String, subscription_id::String; expand=nothing, _mediaType=nothing)
    _ctx = _oacinternal_images_get(_api, resource_group_name, image_name, api_version, subscription_id; expand=expand, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_images_list_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImageListResult,
)

function _oacinternal_images_list(_api::ImagesApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_images_list_ImagesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/images", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the list of Images in the subscription. Use nextLink property in the response to get the next page of Images. Do this till nextLink is null to fetch all the Images.

Params:
- api_version::String (required)
- subscription_id::String (required)

Return: ImageListResult, OpenAPI.Clients.ApiResponse
"""
function images_list(_api::ImagesApi, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_list(_api::ImagesApi, response_stream::Channel, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_list(_api, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_images_list_by_resource_group_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImageListResult,
)

function _oacinternal_images_list_by_resource_group(_api::ImagesApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_images_list_by_resource_group_ImagesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the list of images under a resource group.

Params:
- resource_group_name::String (required)
- api_version::String (required)
- subscription_id::String (required)

Return: ImageListResult, OpenAPI.Clients.ApiResponse
"""
function images_list_by_resource_group(_api::ImagesApi, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_list_by_resource_group(_api::ImagesApi, response_stream::Channel, resource_group_name::String, api_version::String, subscription_id::String; _mediaType=nothing)
    _ctx = _oacinternal_images_list_by_resource_group(_api, resource_group_name, api_version, subscription_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_images_update_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Image,
    Regex("^" * replace("201", "x"=>".") * "\$") => Image,
)

function _oacinternal_images_update(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::ImageUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_images_update_ImagesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/images/{imageName}", ["azure_auth", ], parameters)
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "imageName", image_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Update an image.

Params:
- resource_group_name::String (required)
- image_name::String (required)
- api_version::String (required)
- subscription_id::String (required)
- parameters::ImageUpdate (required)

Return: Image, OpenAPI.Clients.ApiResponse
"""
function images_update(_api::ImagesApi, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::ImageUpdate; _mediaType=nothing)
    _ctx = _oacinternal_images_update(_api, resource_group_name, image_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function images_update(_api::ImagesApi, response_stream::Channel, resource_group_name::String, image_name::String, api_version::String, subscription_id::String, parameters::ImageUpdate; _mediaType=nothing)
    _ctx = _oacinternal_images_update(_api, resource_group_name, image_name, api_version, subscription_id, parameters; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export images_create_or_update
export images_delete
export images_get
export images_list
export images_list_by_resource_group
export images_update
