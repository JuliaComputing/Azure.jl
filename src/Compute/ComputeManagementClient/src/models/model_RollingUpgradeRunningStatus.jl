# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RollingUpgradeRunningStatus
Information about the current running state of the overall upgrade.

    RollingUpgradeRunningStatus(;
        code=nothing,
        startTime=nothing,
        lastAction=nothing,
        lastActionTime=nothing,
    )

    - code::String : Code indicating the current status of the upgrade.
    - startTime::ZonedDateTime : Start time of the upgrade.
    - lastAction::String : The last action performed on the rolling upgrade.
    - lastActionTime::ZonedDateTime : Last action time of the upgrade.
"""
Base.@kwdef mutable struct RollingUpgradeRunningStatus <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    startTime::Union{Nothing, ZonedDateTime} = nothing
    lastAction::Union{Nothing, String} = nothing
    lastActionTime::Union{Nothing, ZonedDateTime} = nothing

    function RollingUpgradeRunningStatus(code, startTime, lastAction, lastActionTime, )
        OpenAPI.validate_property(RollingUpgradeRunningStatus, Symbol("code"), code)
        OpenAPI.validate_property(RollingUpgradeRunningStatus, Symbol("startTime"), startTime)
        OpenAPI.validate_property(RollingUpgradeRunningStatus, Symbol("lastAction"), lastAction)
        OpenAPI.validate_property(RollingUpgradeRunningStatus, Symbol("lastActionTime"), lastActionTime)
        return new(code, startTime, lastAction, lastActionTime, )
    end
end # type RollingUpgradeRunningStatus

const _property_types_RollingUpgradeRunningStatus = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("startTime")=>"ZonedDateTime", Symbol("lastAction")=>"String", Symbol("lastActionTime")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ RollingUpgradeRunningStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RollingUpgradeRunningStatus[name]))}

function check_required(o::RollingUpgradeRunningStatus)
    true
end

function OpenAPI.validate_property(::Type{ RollingUpgradeRunningStatus }, name::Symbol, val)
    if name === Symbol("code")
        OpenAPI.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, ["RollingForward", "Cancelled", "Completed", "Faulted"])
    end
    if name === Symbol("startTime")
        OpenAPI.validate_param(name, "RollingUpgradeRunningStatus", :format, val, "date-time")
    end
    if name === Symbol("lastAction")
        OpenAPI.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, ["Start", "Cancel"])
    end
    if name === Symbol("lastActionTime")
        OpenAPI.validate_param(name, "RollingUpgradeRunningStatus", :format, val, "date-time")
    end
end
