# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Sku
Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set is currently on, you need to deallocate the VMs in the scale set before you modify the SKU name.

    Sku(;
        name=nothing,
        tier=nothing,
        capacity=nothing,
    )

    - name::String : The sku name.
    - tier::String : Specifies the tier of virtual machines in a scale set.&lt;br /&gt;&lt;br /&gt; Possible Values:&lt;br /&gt;&lt;br /&gt; **Standard**&lt;br /&gt;&lt;br /&gt; **Basic**
    - capacity::Int64 : Specifies the number of virtual machines in the scale set.
"""
Base.@kwdef mutable struct Sku <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    tier::Union{Nothing, String} = nothing
    capacity::Union{Nothing, Int64} = nothing

    function Sku(name, tier, capacity, )
        OpenAPI.validate_property(Sku, Symbol("name"), name)
        OpenAPI.validate_property(Sku, Symbol("tier"), tier)
        OpenAPI.validate_property(Sku, Symbol("capacity"), capacity)
        return new(name, tier, capacity, )
    end
end # type Sku

const _property_types_Sku = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("tier")=>"String", Symbol("capacity")=>"Int64", )
OpenAPI.property_type(::Type{ Sku }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Sku[name]))}

function check_required(o::Sku)
    true
end

function OpenAPI.validate_property(::Type{ Sku }, name::Symbol, val)
    if name === Symbol("capacity")
        OpenAPI.validate_param(name, "Sku", :format, val, "int64")
    end
end
