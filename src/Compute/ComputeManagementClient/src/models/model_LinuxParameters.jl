# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LinuxParameters
Input for InstallPatches on a Linux VM, as directly received by the API

    LinuxParameters(;
        classificationsToInclude=nothing,
        packageNameMasksToInclude=nothing,
        packageNameMasksToExclude=nothing,
        maintenanceRunId=nothing,
    )

    - classificationsToInclude::Vector{String} : The update classifications to select when installing patches for Linux.
    - packageNameMasksToInclude::Vector{String} : packages to include in the patch operation. Format: packageName_packageVersion
    - packageNameMasksToExclude::Vector{String} : packages to exclude in the patch operation. Format: packageName_packageVersion
    - maintenanceRunId::String : This is used as a maintenance run identifier for Auto VM Guest Patching in Linux.
"""
Base.@kwdef mutable struct LinuxParameters <: OpenAPI.APIModel
    classificationsToInclude::Union{Nothing, Vector{String}} = nothing
    packageNameMasksToInclude::Union{Nothing, Vector{String}} = nothing
    packageNameMasksToExclude::Union{Nothing, Vector{String}} = nothing
    maintenanceRunId::Union{Nothing, String} = nothing

    function LinuxParameters(classificationsToInclude, packageNameMasksToInclude, packageNameMasksToExclude, maintenanceRunId, )
        o = new(classificationsToInclude, packageNameMasksToInclude, packageNameMasksToExclude, maintenanceRunId, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type LinuxParameters

const _property_types_LinuxParameters = Dict{Symbol,String}(Symbol("classificationsToInclude")=>"Vector{String}", Symbol("packageNameMasksToInclude")=>"Vector{String}", Symbol("packageNameMasksToExclude")=>"Vector{String}", Symbol("maintenanceRunId")=>"String", )
OpenAPI.property_type(::Type{ LinuxParameters }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LinuxParameters[name]))}

function OpenAPI.check_required(o::LinuxParameters)
    true
end

function OpenAPI.validate_properties(o::LinuxParameters)
    OpenAPI.validate_property(LinuxParameters, Symbol("classificationsToInclude"), o.classificationsToInclude)
    OpenAPI.validate_property(LinuxParameters, Symbol("packageNameMasksToInclude"), o.packageNameMasksToInclude)
    OpenAPI.validate_property(LinuxParameters, Symbol("packageNameMasksToExclude"), o.packageNameMasksToExclude)
    OpenAPI.validate_property(LinuxParameters, Symbol("maintenanceRunId"), o.maintenanceRunId)
end

function OpenAPI.validate_property(::Type{ LinuxParameters }, name::Symbol, val)

    if name === Symbol("classificationsToInclude")
        OpenAPI.validate_param(name, "LinuxParameters", :enum, val, ["Critical", "Security", "Other"])
    end




end
