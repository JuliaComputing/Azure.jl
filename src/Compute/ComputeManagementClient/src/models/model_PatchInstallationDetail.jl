# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PatchInstallationDetail
Information about a specific patch that was encountered during an installation action.

    PatchInstallationDetail(;
        patchId=nothing,
        name=nothing,
        version=nothing,
        kbId=nothing,
        classifications=nothing,
        installationState=nothing,
    )

    - patchId::String : A unique identifier for the patch.
    - name::String : The friendly name of the patch.
    - version::String : The version string of the package. It may conform to Semantic Versioning. Only applies to Linux.
    - kbId::String : The KBID of the patch. Only applies to Windows patches.
    - classifications::Vector{String} : The classification(s) of the patch as provided by the patch publisher.
    - installationState::String : The state of the patch after the installation operation completed.
"""
Base.@kwdef mutable struct PatchInstallationDetail <: OpenAPI.APIModel
    patchId::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    version::Union{Nothing, String} = nothing
    kbId::Union{Nothing, String} = nothing
    classifications::Union{Nothing, Vector{String}} = nothing
    installationState::Union{Nothing, String} = nothing

    function PatchInstallationDetail(patchId, name, version, kbId, classifications, installationState, )
        o = new(patchId, name, version, kbId, classifications, installationState, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PatchInstallationDetail

const _property_types_PatchInstallationDetail = Dict{Symbol,String}(Symbol("patchId")=>"String", Symbol("name")=>"String", Symbol("version")=>"String", Symbol("kbId")=>"String", Symbol("classifications")=>"Vector{String}", Symbol("installationState")=>"String", )
OpenAPI.property_type(::Type{ PatchInstallationDetail }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchInstallationDetail[name]))}

function OpenAPI.check_required(o::PatchInstallationDetail)
    true
end

function OpenAPI.validate_properties(o::PatchInstallationDetail)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("patchId"), o.patchId)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("name"), o.name)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("version"), o.version)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("kbId"), o.kbId)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("classifications"), o.classifications)
    OpenAPI.validate_property(PatchInstallationDetail, Symbol("installationState"), o.installationState)
end

function OpenAPI.validate_property(::Type{ PatchInstallationDetail }, name::Symbol, val)






    if name === Symbol("installationState")
        OpenAPI.validate_param(name, "PatchInstallationDetail", :enum, val, ["Unknown", "Installed", "Failed", "Excluded", "NotSelected", "Pending"])
    end

end
