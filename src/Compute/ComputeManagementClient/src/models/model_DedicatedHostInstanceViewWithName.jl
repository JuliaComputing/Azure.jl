# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DedicatedHostInstanceViewWithName
The instance view of a dedicated host that includes the name of the dedicated host. It is used for the response to the instance view of a dedicated host group.

    DedicatedHostInstanceViewWithName(;
        name=nothing,
        assetId=nothing,
        availableCapacity=nothing,
        statuses=nothing,
    )

    - name::String : The name of the dedicated host.
    - assetId::String : Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
    - availableCapacity::DedicatedHostAvailableCapacity
    - statuses::Vector{InstanceViewStatus} : The resource status information.
"""
Base.@kwdef mutable struct DedicatedHostInstanceViewWithName <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    assetId::Union{Nothing, String} = nothing
    availableCapacity = nothing # spec type: Union{ Nothing, DedicatedHostAvailableCapacity }
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InstanceViewStatus} }

    function DedicatedHostInstanceViewWithName(name, assetId, availableCapacity, statuses, )
        o = new(name, assetId, availableCapacity, statuses, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type DedicatedHostInstanceViewWithName

const _property_types_DedicatedHostInstanceViewWithName = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("assetId")=>"String", Symbol("availableCapacity")=>"DedicatedHostAvailableCapacity", Symbol("statuses")=>"Vector{InstanceViewStatus}", )
OpenAPI.property_type(::Type{ DedicatedHostInstanceViewWithName }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DedicatedHostInstanceViewWithName[name]))}

function OpenAPI.check_required(o::DedicatedHostInstanceViewWithName)
    true
end

function OpenAPI.validate_properties(o::DedicatedHostInstanceViewWithName)
    OpenAPI.validate_property(DedicatedHostInstanceViewWithName, Symbol("name"), o.name)
    OpenAPI.validate_property(DedicatedHostInstanceViewWithName, Symbol("assetId"), o.assetId)
    OpenAPI.validate_property(DedicatedHostInstanceViewWithName, Symbol("availableCapacity"), o.availableCapacity)
    OpenAPI.validate_property(DedicatedHostInstanceViewWithName, Symbol("statuses"), o.statuses)
end

function OpenAPI.validate_property(::Type{ DedicatedHostInstanceViewWithName }, name::Symbol, val)




end
