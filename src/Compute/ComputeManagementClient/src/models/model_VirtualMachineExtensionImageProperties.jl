# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineExtensionImageProperties
Describes the properties of a Virtual Machine Extension Image.

    VirtualMachineExtensionImageProperties(;
        operatingSystem=nothing,
        computeRole=nothing,
        handlerSchema=nothing,
        vmScaleSetEnabled=nothing,
        supportsMultipleExtensions=nothing,
    )

    - operatingSystem::String : The operating system this extension supports.
    - computeRole::String : The type of role (IaaS or PaaS) this extension supports.
    - handlerSchema::String : The schema defined by publisher, where extension consumers should provide settings in a matching schema.
    - vmScaleSetEnabled::Bool : Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there might be cases where a publisher wants to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
    - supportsMultipleExtensions::Bool : Whether the handler can support multiple extensions.
"""
Base.@kwdef mutable struct VirtualMachineExtensionImageProperties <: OpenAPI.APIModel
    operatingSystem::Union{Nothing, String} = nothing
    computeRole::Union{Nothing, String} = nothing
    handlerSchema::Union{Nothing, String} = nothing
    vmScaleSetEnabled::Union{Nothing, Bool} = nothing
    supportsMultipleExtensions::Union{Nothing, Bool} = nothing

    function VirtualMachineExtensionImageProperties(operatingSystem, computeRole, handlerSchema, vmScaleSetEnabled, supportsMultipleExtensions, )
        o = new(operatingSystem, computeRole, handlerSchema, vmScaleSetEnabled, supportsMultipleExtensions, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineExtensionImageProperties

const _property_types_VirtualMachineExtensionImageProperties = Dict{Symbol,String}(Symbol("operatingSystem")=>"String", Symbol("computeRole")=>"String", Symbol("handlerSchema")=>"String", Symbol("vmScaleSetEnabled")=>"Bool", Symbol("supportsMultipleExtensions")=>"Bool", )
OpenAPI.property_type(::Type{ VirtualMachineExtensionImageProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineExtensionImageProperties[name]))}

function OpenAPI.check_required(o::VirtualMachineExtensionImageProperties)
    o.operatingSystem === nothing && (return false)
    o.computeRole === nothing && (return false)
    o.handlerSchema === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineExtensionImageProperties)
    OpenAPI.validate_property(VirtualMachineExtensionImageProperties, Symbol("operatingSystem"), o.operatingSystem)
    OpenAPI.validate_property(VirtualMachineExtensionImageProperties, Symbol("computeRole"), o.computeRole)
    OpenAPI.validate_property(VirtualMachineExtensionImageProperties, Symbol("handlerSchema"), o.handlerSchema)
    OpenAPI.validate_property(VirtualMachineExtensionImageProperties, Symbol("vmScaleSetEnabled"), o.vmScaleSetEnabled)
    OpenAPI.validate_property(VirtualMachineExtensionImageProperties, Symbol("supportsMultipleExtensions"), o.supportsMultipleExtensions)
end

function OpenAPI.validate_property(::Type{ VirtualMachineExtensionImageProperties }, name::Symbol, val)





end
