# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DedicatedHostInstanceView
The instance view of a dedicated host.

    DedicatedHostInstanceView(;
        assetId=nothing,
        availableCapacity=nothing,
        statuses=nothing,
    )

    - assetId::String : Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
    - availableCapacity::DedicatedHostAvailableCapacity
    - statuses::Vector{InstanceViewStatus} : The resource status information.
"""
Base.@kwdef mutable struct DedicatedHostInstanceView <: OpenAPI.APIModel
    assetId::Union{Nothing, String} = nothing
    availableCapacity = nothing # spec type: Union{ Nothing, DedicatedHostAvailableCapacity }
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InstanceViewStatus} }

    function DedicatedHostInstanceView(assetId, availableCapacity, statuses, )
        OpenAPI.validate_property(DedicatedHostInstanceView, Symbol("assetId"), assetId)
        OpenAPI.validate_property(DedicatedHostInstanceView, Symbol("availableCapacity"), availableCapacity)
        OpenAPI.validate_property(DedicatedHostInstanceView, Symbol("statuses"), statuses)
        return new(assetId, availableCapacity, statuses, )
    end
end # type DedicatedHostInstanceView

const _property_types_DedicatedHostInstanceView = Dict{Symbol,String}(Symbol("assetId")=>"String", Symbol("availableCapacity")=>"DedicatedHostAvailableCapacity", Symbol("statuses")=>"Vector{InstanceViewStatus}", )
OpenAPI.property_type(::Type{ DedicatedHostInstanceView }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DedicatedHostInstanceView[name]))}

function check_required(o::DedicatedHostInstanceView)
    true
end

function OpenAPI.validate_property(::Type{ DedicatedHostInstanceView }, name::Symbol, val)
end
