# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ProximityPlacementGroupProperties
Describes the properties of a Proximity Placement Group.

    ProximityPlacementGroupProperties(;
        proximityPlacementGroupType=nothing,
        virtualMachines=nothing,
        virtualMachineScaleSets=nothing,
        availabilitySets=nothing,
        colocationStatus=nothing,
    )

    - proximityPlacementGroupType::String : Specifies the type of the proximity placement group. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Standard** : Co-locate resources within an Azure region or Availability Zone. &lt;br&gt;&lt;br&gt; **Ultra** : For future use.
    - virtualMachines::Vector{SubResourceWithColocationStatus} : A list of references to all virtual machines in the proximity placement group.
    - virtualMachineScaleSets::Vector{SubResourceWithColocationStatus} : A list of references to all virtual machine scale sets in the proximity placement group.
    - availabilitySets::Vector{SubResourceWithColocationStatus} : A list of references to all availability sets in the proximity placement group.
    - colocationStatus::InstanceViewStatus
"""
Base.@kwdef mutable struct ProximityPlacementGroupProperties <: OpenAPI.APIModel
    proximityPlacementGroupType::Union{Nothing, String} = nothing
    virtualMachines::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} }
    virtualMachineScaleSets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} }
    availabilitySets::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResourceWithColocationStatus} }
    colocationStatus = nothing # spec type: Union{ Nothing, InstanceViewStatus }

    function ProximityPlacementGroupProperties(proximityPlacementGroupType, virtualMachines, virtualMachineScaleSets, availabilitySets, colocationStatus, )
        OpenAPI.validate_property(ProximityPlacementGroupProperties, Symbol("proximityPlacementGroupType"), proximityPlacementGroupType)
        OpenAPI.validate_property(ProximityPlacementGroupProperties, Symbol("virtualMachines"), virtualMachines)
        OpenAPI.validate_property(ProximityPlacementGroupProperties, Symbol("virtualMachineScaleSets"), virtualMachineScaleSets)
        OpenAPI.validate_property(ProximityPlacementGroupProperties, Symbol("availabilitySets"), availabilitySets)
        OpenAPI.validate_property(ProximityPlacementGroupProperties, Symbol("colocationStatus"), colocationStatus)
        return new(proximityPlacementGroupType, virtualMachines, virtualMachineScaleSets, availabilitySets, colocationStatus, )
    end
end # type ProximityPlacementGroupProperties

const _property_types_ProximityPlacementGroupProperties = Dict{Symbol,String}(Symbol("proximityPlacementGroupType")=>"String", Symbol("virtualMachines")=>"Vector{SubResourceWithColocationStatus}", Symbol("virtualMachineScaleSets")=>"Vector{SubResourceWithColocationStatus}", Symbol("availabilitySets")=>"Vector{SubResourceWithColocationStatus}", Symbol("colocationStatus")=>"InstanceViewStatus", )
OpenAPI.property_type(::Type{ ProximityPlacementGroupProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProximityPlacementGroupProperties[name]))}

function check_required(o::ProximityPlacementGroupProperties)
    true
end

function OpenAPI.validate_property(::Type{ ProximityPlacementGroupProperties }, name::Symbol, val)
    if name === Symbol("proximityPlacementGroupType")
        OpenAPI.validate_param(name, "ProximityPlacementGroupProperties", :enum, val, ["Standard", "Ultra"])
    end
end
