# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ComputeOperationValueDisplay
Describes the properties of a Compute Operation Value Display.

    ComputeOperationValueDisplay(;
        operation=nothing,
        resource=nothing,
        description=nothing,
        provider=nothing,
    )

    - operation::String : The display name of the compute operation.
    - resource::String : The display name of the resource the operation applies to.
    - description::String : The description of the operation.
    - provider::String : The resource provider for the operation.
"""
Base.@kwdef mutable struct ComputeOperationValueDisplay <: OpenAPI.APIModel
    operation::Union{Nothing, String} = nothing
    resource::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    provider::Union{Nothing, String} = nothing

    function ComputeOperationValueDisplay(operation, resource, description, provider, )
        OpenAPI.validate_property(ComputeOperationValueDisplay, Symbol("operation"), operation)
        OpenAPI.validate_property(ComputeOperationValueDisplay, Symbol("resource"), resource)
        OpenAPI.validate_property(ComputeOperationValueDisplay, Symbol("description"), description)
        OpenAPI.validate_property(ComputeOperationValueDisplay, Symbol("provider"), provider)
        return new(operation, resource, description, provider, )
    end
end # type ComputeOperationValueDisplay

const _property_types_ComputeOperationValueDisplay = Dict{Symbol,String}(Symbol("operation")=>"String", Symbol("resource")=>"String", Symbol("description")=>"String", Symbol("provider")=>"String", )
OpenAPI.property_type(::Type{ ComputeOperationValueDisplay }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ComputeOperationValueDisplay[name]))}

function check_required(o::ComputeOperationValueDisplay)
    true
end

function OpenAPI.validate_property(::Type{ ComputeOperationValueDisplay }, name::Symbol, val)
end
