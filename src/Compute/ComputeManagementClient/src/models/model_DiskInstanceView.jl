# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiskInstanceView
The instance view of the disk.

    DiskInstanceView(;
        name=nothing,
        encryptionSettings=nothing,
        statuses=nothing,
    )

    - name::String : The disk name.
    - encryptionSettings::Vector{DiskEncryptionSettings} : Specifies the encryption settings for the OS Disk. &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
    - statuses::Vector{InstanceViewStatus} : The resource status information.
"""
Base.@kwdef mutable struct DiskInstanceView <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    encryptionSettings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DiskEncryptionSettings} }
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InstanceViewStatus} }

    function DiskInstanceView(name, encryptionSettings, statuses, )
        OpenAPI.validate_property(DiskInstanceView, Symbol("name"), name)
        OpenAPI.validate_property(DiskInstanceView, Symbol("encryptionSettings"), encryptionSettings)
        OpenAPI.validate_property(DiskInstanceView, Symbol("statuses"), statuses)
        return new(name, encryptionSettings, statuses, )
    end
end # type DiskInstanceView

const _property_types_DiskInstanceView = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("encryptionSettings")=>"Vector{DiskEncryptionSettings}", Symbol("statuses")=>"Vector{InstanceViewStatus}", )
OpenAPI.property_type(::Type{ DiskInstanceView }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskInstanceView[name]))}

function check_required(o::DiskInstanceView)
    true
end

function OpenAPI.validate_property(::Type{ DiskInstanceView }, name::Symbol, val)
end
