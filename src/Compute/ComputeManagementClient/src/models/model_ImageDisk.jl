# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImageDisk
Describes a image disk.

    ImageDisk(;
        snapshot=nothing,
        managedDisk=nothing,
        blobUri=nothing,
        caching=nothing,
        diskSizeGB=nothing,
        storageAccountType=nothing,
        diskEncryptionSet=nothing,
    )

    - snapshot::SubResource
    - managedDisk::SubResource
    - blobUri::String : The Virtual Hard Disk.
    - caching::String : Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
    - diskSizeGB::Int64 : Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
    - storageAccountType::StorageAccountType
    - diskEncryptionSet::DiskEncryptionSetParameters
"""
Base.@kwdef mutable struct ImageDisk <: OpenAPI.APIModel
    snapshot = nothing # spec type: Union{ Nothing, SubResource }
    managedDisk = nothing # spec type: Union{ Nothing, SubResource }
    blobUri::Union{Nothing, String} = nothing
    caching::Union{Nothing, String} = nothing
    diskSizeGB::Union{Nothing, Int64} = nothing
    storageAccountType = nothing # spec type: Union{ Nothing, StorageAccountType }
    diskEncryptionSet = nothing # spec type: Union{ Nothing, DiskEncryptionSetParameters }

    function ImageDisk(snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
        o = new(snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ImageDisk

const _property_types_ImageDisk = Dict{Symbol,String}(Symbol("snapshot")=>"SubResource", Symbol("managedDisk")=>"SubResource", Symbol("blobUri")=>"String", Symbol("caching")=>"String", Symbol("diskSizeGB")=>"Int64", Symbol("storageAccountType")=>"StorageAccountType", Symbol("diskEncryptionSet")=>"DiskEncryptionSetParameters", )
OpenAPI.property_type(::Type{ ImageDisk }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageDisk[name]))}

function OpenAPI.check_required(o::ImageDisk)
    true
end

function OpenAPI.validate_properties(o::ImageDisk)
    OpenAPI.validate_property(ImageDisk, Symbol("snapshot"), o.snapshot)
    OpenAPI.validate_property(ImageDisk, Symbol("managedDisk"), o.managedDisk)
    OpenAPI.validate_property(ImageDisk, Symbol("blobUri"), o.blobUri)
    OpenAPI.validate_property(ImageDisk, Symbol("caching"), o.caching)
    OpenAPI.validate_property(ImageDisk, Symbol("diskSizeGB"), o.diskSizeGB)
    OpenAPI.validate_property(ImageDisk, Symbol("storageAccountType"), o.storageAccountType)
    OpenAPI.validate_property(ImageDisk, Symbol("diskEncryptionSet"), o.diskEncryptionSet)
end

function OpenAPI.validate_property(::Type{ ImageDisk }, name::Symbol, val)




    if name === Symbol("caching")
        OpenAPI.validate_param(name, "ImageDisk", :enum, val, ["None", "ReadOnly", "ReadWrite"])
    end


    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "ImageDisk", :format, val, "int32")
    end


end
