# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CapacityReservation
Specifies information about the capacity reservation.

    CapacityReservation(;
        properties=nothing,
        sku=nothing,
        zones=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        location=nothing,
        tags=nothing,
    )

    - properties::CapacityReservationProperties
    - sku::Sku
    - zones::Vector{String} : Availability Zone to use for this capacity reservation. The zone has to be single value and also should be part for the list of zones specified during the capacity reservation group creation. The zone can be assigned only during creation. If not provided, the reservation supports only non-zonal deployments. If provided, enforces VM/VMSS using this capacity reservation to be in same zone.
    - id::String : Resource Id
    - name::String : Resource name
    - type::String : Resource type
    - location::String : Resource location
    - tags::Dict{String, String} : Resource tags
"""
Base.@kwdef mutable struct CapacityReservation <: OpenAPI.APIModel
    properties = nothing # spec type: Union{ Nothing, CapacityReservationProperties }
    sku = nothing # spec type: Union{ Nothing, Sku }
    zones::Union{Nothing, Vector{String}} = nothing
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    tags::Union{Nothing, Dict{String, String}} = nothing

    function CapacityReservation(properties, sku, zones, id, name, type, location, tags, )
        o = new(properties, sku, zones, id, name, type, location, tags, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type CapacityReservation

const _property_types_CapacityReservation = Dict{Symbol,String}(Symbol("properties")=>"CapacityReservationProperties", Symbol("sku")=>"Sku", Symbol("zones")=>"Vector{String}", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ CapacityReservation }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CapacityReservation[name]))}

function OpenAPI.check_required(o::CapacityReservation)
    o.sku === nothing && (return false)
    o.location === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::CapacityReservation)
    OpenAPI.validate_property(CapacityReservation, Symbol("properties"), o.properties)
    OpenAPI.validate_property(CapacityReservation, Symbol("sku"), o.sku)
    OpenAPI.validate_property(CapacityReservation, Symbol("zones"), o.zones)
    OpenAPI.validate_property(CapacityReservation, Symbol("id"), o.id)
    OpenAPI.validate_property(CapacityReservation, Symbol("name"), o.name)
    OpenAPI.validate_property(CapacityReservation, Symbol("type"), o.type)
    OpenAPI.validate_property(CapacityReservation, Symbol("location"), o.location)
    OpenAPI.validate_property(CapacityReservation, Symbol("tags"), o.tags)
end

function OpenAPI.validate_property(::Type{ CapacityReservation }, name::Symbol, val)








end
