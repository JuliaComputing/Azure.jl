# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Plan
Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.

    Plan(;
        name=nothing,
        publisher=nothing,
        product=nothing,
        promotionCode=nothing,
    )

    - name::String : The plan ID.
    - publisher::String : The publisher ID.
    - product::String : Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
    - promotionCode::String : The promotion code.
"""
Base.@kwdef mutable struct Plan <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    publisher::Union{Nothing, String} = nothing
    product::Union{Nothing, String} = nothing
    promotionCode::Union{Nothing, String} = nothing

    function Plan(name, publisher, product, promotionCode, )
        OpenAPI.validate_property(Plan, Symbol("name"), name)
        OpenAPI.validate_property(Plan, Symbol("publisher"), publisher)
        OpenAPI.validate_property(Plan, Symbol("product"), product)
        OpenAPI.validate_property(Plan, Symbol("promotionCode"), promotionCode)
        return new(name, publisher, product, promotionCode, )
    end
end # type Plan

const _property_types_Plan = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("publisher")=>"String", Symbol("product")=>"String", Symbol("promotionCode")=>"String", )
OpenAPI.property_type(::Type{ Plan }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Plan[name]))}

function check_required(o::Plan)
    true
end

function OpenAPI.validate_property(::Type{ Plan }, name::Symbol, val)
end
