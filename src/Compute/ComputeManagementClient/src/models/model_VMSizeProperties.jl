# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VMSizeProperties
Specifies VM Size Property settings on the virtual machine.

    VMSizeProperties(;
        vCPUsAvailable=nothing,
        vCPUsPerCore=nothing,
    )

    - vCPUsAvailable::Int64 : Specifies the number of vCPUs available for the VM. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available for that VM size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) .
    - vCPUsPerCore::Int64 : Specifies the vCPU to physical core ratio. &lt;br&gt;&lt;br&gt; When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api response of [List all available virtual machine sizes in a region](https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list) &lt;br&gt;&lt;br&gt; Setting this property to 1 also means that hyper-threading is disabled.
"""
Base.@kwdef mutable struct VMSizeProperties <: OpenAPI.APIModel
    vCPUsAvailable::Union{Nothing, Int64} = nothing
    vCPUsPerCore::Union{Nothing, Int64} = nothing

    function VMSizeProperties(vCPUsAvailable, vCPUsPerCore, )
        o = new(vCPUsAvailable, vCPUsPerCore, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VMSizeProperties

const _property_types_VMSizeProperties = Dict{Symbol,String}(Symbol("vCPUsAvailable")=>"Int64", Symbol("vCPUsPerCore")=>"Int64", )
OpenAPI.property_type(::Type{ VMSizeProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VMSizeProperties[name]))}

function OpenAPI.check_required(o::VMSizeProperties)
    true
end

function OpenAPI.validate_properties(o::VMSizeProperties)
    OpenAPI.validate_property(VMSizeProperties, Symbol("vCPUsAvailable"), o.vCPUsAvailable)
    OpenAPI.validate_property(VMSizeProperties, Symbol("vCPUsPerCore"), o.vCPUsPerCore)
end

function OpenAPI.validate_property(::Type{ VMSizeProperties }, name::Symbol, val)

    if name === Symbol("vCPUsAvailable")
        OpenAPI.validate_param(name, "VMSizeProperties", :format, val, "int32")
    end

    if name === Symbol("vCPUsPerCore")
        OpenAPI.validate_param(name, "VMSizeProperties", :format, val, "int32")
    end
end
