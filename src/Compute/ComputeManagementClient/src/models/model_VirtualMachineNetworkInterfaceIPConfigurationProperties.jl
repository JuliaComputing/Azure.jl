# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineNetworkInterfaceIPConfigurationProperties
Describes a virtual machine network interface IP configuration properties.

    VirtualMachineNetworkInterfaceIPConfigurationProperties(;
        subnet=nothing,
        primary=nothing,
        publicIPAddressConfiguration=nothing,
        privateIPAddressVersion=nothing,
        applicationSecurityGroups=nothing,
        applicationGatewayBackendAddressPools=nothing,
        loadBalancerBackendAddressPools=nothing,
    )

    - subnet::SubResource
    - primary::Bool : Specifies the primary network interface in case the virtual machine has more than 1 network interface.
    - publicIPAddressConfiguration::VirtualMachinePublicIPAddressConfiguration
    - privateIPAddressVersion::String : Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: &#39;IPv4&#39; and &#39;IPv6&#39;.
    - applicationSecurityGroups::Vector{SubResource} : Specifies an array of references to application security group.
    - applicationGatewayBackendAddressPools::Vector{SubResource} : Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend address pools of multiple application gateways. Multiple virtual machines cannot use the same application gateway.
    - loadBalancerBackendAddressPools::Vector{SubResource} : Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address pools of one public and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load balancer].
"""
Base.@kwdef mutable struct VirtualMachineNetworkInterfaceIPConfigurationProperties <: OpenAPI.APIModel
    subnet = nothing # spec type: Union{ Nothing, SubResource }
    primary::Union{Nothing, Bool} = nothing
    publicIPAddressConfiguration = nothing # spec type: Union{ Nothing, VirtualMachinePublicIPAddressConfiguration }
    privateIPAddressVersion::Union{Nothing, String} = nothing
    applicationSecurityGroups::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    applicationGatewayBackendAddressPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }
    loadBalancerBackendAddressPools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResource} }

    function VirtualMachineNetworkInterfaceIPConfigurationProperties(subnet, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationSecurityGroups, applicationGatewayBackendAddressPools, loadBalancerBackendAddressPools, )
        o = new(subnet, primary, publicIPAddressConfiguration, privateIPAddressVersion, applicationSecurityGroups, applicationGatewayBackendAddressPools, loadBalancerBackendAddressPools, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineNetworkInterfaceIPConfigurationProperties

const _property_types_VirtualMachineNetworkInterfaceIPConfigurationProperties = Dict{Symbol,String}(Symbol("subnet")=>"SubResource", Symbol("primary")=>"Bool", Symbol("publicIPAddressConfiguration")=>"VirtualMachinePublicIPAddressConfiguration", Symbol("privateIPAddressVersion")=>"String", Symbol("applicationSecurityGroups")=>"Vector{SubResource}", Symbol("applicationGatewayBackendAddressPools")=>"Vector{SubResource}", Symbol("loadBalancerBackendAddressPools")=>"Vector{SubResource}", )
OpenAPI.property_type(::Type{ VirtualMachineNetworkInterfaceIPConfigurationProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineNetworkInterfaceIPConfigurationProperties[name]))}

function OpenAPI.check_required(o::VirtualMachineNetworkInterfaceIPConfigurationProperties)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineNetworkInterfaceIPConfigurationProperties)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("subnet"), o.subnet)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("primary"), o.primary)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("publicIPAddressConfiguration"), o.publicIPAddressConfiguration)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("privateIPAddressVersion"), o.privateIPAddressVersion)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("applicationSecurityGroups"), o.applicationSecurityGroups)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("applicationGatewayBackendAddressPools"), o.applicationGatewayBackendAddressPools)
    OpenAPI.validate_property(VirtualMachineNetworkInterfaceIPConfigurationProperties, Symbol("loadBalancerBackendAddressPools"), o.loadBalancerBackendAddressPools)
end

function OpenAPI.validate_property(::Type{ VirtualMachineNetworkInterfaceIPConfigurationProperties }, name::Symbol, val)




    if name === Symbol("privateIPAddressVersion")
        OpenAPI.validate_param(name, "VirtualMachineNetworkInterfaceIPConfigurationProperties", :enum, val, ["IPv4", "IPv6"])
    end




end
