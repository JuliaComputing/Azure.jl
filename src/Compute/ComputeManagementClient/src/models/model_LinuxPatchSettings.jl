# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""LinuxPatchSettings
Specifies settings related to VM Guest Patching on Linux.

    LinuxPatchSettings(;
        patchMode=nothing,
        assessmentMode=nothing,
    )

    - patchMode::String : Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - The virtual machine&#39;s default patching configuration is used. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform. The property provisionVMAgent must be true
    - assessmentMode::String : Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
"""
Base.@kwdef mutable struct LinuxPatchSettings <: OpenAPI.APIModel
    patchMode::Union{Nothing, String} = nothing
    assessmentMode::Union{Nothing, String} = nothing

    function LinuxPatchSettings(patchMode, assessmentMode, )
        o = new(patchMode, assessmentMode, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type LinuxPatchSettings

const _property_types_LinuxPatchSettings = Dict{Symbol,String}(Symbol("patchMode")=>"String", Symbol("assessmentMode")=>"String", )
OpenAPI.property_type(::Type{ LinuxPatchSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LinuxPatchSettings[name]))}

function OpenAPI.check_required(o::LinuxPatchSettings)
    true
end

function OpenAPI.validate_properties(o::LinuxPatchSettings)
    OpenAPI.validate_property(LinuxPatchSettings, Symbol("patchMode"), o.patchMode)
    OpenAPI.validate_property(LinuxPatchSettings, Symbol("assessmentMode"), o.assessmentMode)
end

function OpenAPI.validate_property(::Type{ LinuxPatchSettings }, name::Symbol, val)

    if name === Symbol("patchMode")
        OpenAPI.validate_param(name, "LinuxPatchSettings", :enum, val, ["ImageDefault", "AutomaticByPlatform"])
    end


    if name === Symbol("assessmentMode")
        OpenAPI.validate_param(name, "LinuxPatchSettings", :enum, val, ["ImageDefault", "AutomaticByPlatform"])
    end

end
