# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VMGalleryApplication
Specifies the required information to reference a compute gallery application version

    VMGalleryApplication(;
        tags=nothing,
        order=nothing,
        packageReferenceId=nothing,
        configurationReference=nothing,
    )

    - tags::String : Optional, Specifies a passthrough value for more generic context.
    - order::Int64 : Optional, Specifies the order in which the packages have to be installed
    - packageReferenceId::String : Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
    - configurationReference::String : Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
"""
Base.@kwdef mutable struct VMGalleryApplication <: OpenAPI.APIModel
    tags::Union{Nothing, String} = nothing
    order::Union{Nothing, Int64} = nothing
    packageReferenceId::Union{Nothing, String} = nothing
    configurationReference::Union{Nothing, String} = nothing

    function VMGalleryApplication(tags, order, packageReferenceId, configurationReference, )
        o = new(tags, order, packageReferenceId, configurationReference, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VMGalleryApplication

const _property_types_VMGalleryApplication = Dict{Symbol,String}(Symbol("tags")=>"String", Symbol("order")=>"Int64", Symbol("packageReferenceId")=>"String", Symbol("configurationReference")=>"String", )
OpenAPI.property_type(::Type{ VMGalleryApplication }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VMGalleryApplication[name]))}

function OpenAPI.check_required(o::VMGalleryApplication)
    o.packageReferenceId === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::VMGalleryApplication)
    OpenAPI.validate_property(VMGalleryApplication, Symbol("tags"), o.tags)
    OpenAPI.validate_property(VMGalleryApplication, Symbol("order"), o.order)
    OpenAPI.validate_property(VMGalleryApplication, Symbol("packageReferenceId"), o.packageReferenceId)
    OpenAPI.validate_property(VMGalleryApplication, Symbol("configurationReference"), o.configurationReference)
end

function OpenAPI.validate_property(::Type{ VMGalleryApplication }, name::Symbol, val)


    if name === Symbol("order")
        OpenAPI.validate_param(name, "VMGalleryApplication", :format, val, "int32")
    end


end
