# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OSDisk
Specifies information about the operating system disk used by the virtual machine. &lt;br&gt;&lt;br&gt; For more information about disks, see [About disks and VHDs for Azure virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-about-disks-vhds?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json).

    OSDisk(;
        osType=nothing,
        encryptionSettings=nothing,
        name=nothing,
        vhd=nothing,
        image=nothing,
        caching=nothing,
        writeAcceleratorEnabled=nothing,
        diffDiskSettings=nothing,
        createOption=nothing,
        diskSizeGB=nothing,
        managedDisk=nothing,
    )

    - osType::String : This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or a specialized VHD. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
    - encryptionSettings::DiskEncryptionSettings
    - name::String : The disk name.
    - vhd::VirtualHardDisk
    - image::VirtualHardDisk
    - caching::Caching
    - writeAcceleratorEnabled::Bool : Specifies whether writeAccelerator should be enabled or disabled on the disk.
    - diffDiskSettings::DiffDiskSettings
    - createOption::CreateOption
    - diskSizeGB::Int64 : Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
    - managedDisk::ManagedDiskParameters
"""
Base.@kwdef mutable struct OSDisk <: OpenAPI.APIModel
    osType::Union{Nothing, String} = nothing
    encryptionSettings = nothing # spec type: Union{ Nothing, DiskEncryptionSettings }
    name::Union{Nothing, String} = nothing
    vhd = nothing # spec type: Union{ Nothing, VirtualHardDisk }
    image = nothing # spec type: Union{ Nothing, VirtualHardDisk }
    caching = nothing # spec type: Union{ Nothing, Caching }
    writeAcceleratorEnabled::Union{Nothing, Bool} = nothing
    diffDiskSettings = nothing # spec type: Union{ Nothing, DiffDiskSettings }
    createOption = nothing # spec type: Union{ Nothing, CreateOption }
    diskSizeGB::Union{Nothing, Int64} = nothing
    managedDisk = nothing # spec type: Union{ Nothing, ManagedDiskParameters }

    function OSDisk(osType, encryptionSettings, name, vhd, image, caching, writeAcceleratorEnabled, diffDiskSettings, createOption, diskSizeGB, managedDisk, )
        OpenAPI.validate_property(OSDisk, Symbol("osType"), osType)
        OpenAPI.validate_property(OSDisk, Symbol("encryptionSettings"), encryptionSettings)
        OpenAPI.validate_property(OSDisk, Symbol("name"), name)
        OpenAPI.validate_property(OSDisk, Symbol("vhd"), vhd)
        OpenAPI.validate_property(OSDisk, Symbol("image"), image)
        OpenAPI.validate_property(OSDisk, Symbol("caching"), caching)
        OpenAPI.validate_property(OSDisk, Symbol("writeAcceleratorEnabled"), writeAcceleratorEnabled)
        OpenAPI.validate_property(OSDisk, Symbol("diffDiskSettings"), diffDiskSettings)
        OpenAPI.validate_property(OSDisk, Symbol("createOption"), createOption)
        OpenAPI.validate_property(OSDisk, Symbol("diskSizeGB"), diskSizeGB)
        OpenAPI.validate_property(OSDisk, Symbol("managedDisk"), managedDisk)
        return new(osType, encryptionSettings, name, vhd, image, caching, writeAcceleratorEnabled, diffDiskSettings, createOption, diskSizeGB, managedDisk, )
    end
end # type OSDisk

const _property_types_OSDisk = Dict{Symbol,String}(Symbol("osType")=>"String", Symbol("encryptionSettings")=>"DiskEncryptionSettings", Symbol("name")=>"String", Symbol("vhd")=>"VirtualHardDisk", Symbol("image")=>"VirtualHardDisk", Symbol("caching")=>"Caching", Symbol("writeAcceleratorEnabled")=>"Bool", Symbol("diffDiskSettings")=>"DiffDiskSettings", Symbol("createOption")=>"CreateOption", Symbol("diskSizeGB")=>"Int64", Symbol("managedDisk")=>"ManagedDiskParameters", )
OpenAPI.property_type(::Type{ OSDisk }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OSDisk[name]))}

function check_required(o::OSDisk)
    o.createOption === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OSDisk }, name::Symbol, val)
    if name === Symbol("osType")
        OpenAPI.validate_param(name, "OSDisk", :enum, val, ["Windows", "Linux"])
    end
    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "OSDisk", :format, val, "int32")
    end
end
