# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineProperties
Describes the properties of a Virtual Machine.

    VirtualMachineProperties(;
        hardwareProfile=nothing,
        storageProfile=nothing,
        additionalCapabilities=nothing,
        osProfile=nothing,
        networkProfile=nothing,
        securityProfile=nothing,
        diagnosticsProfile=nothing,
        availabilitySet=nothing,
        virtualMachineScaleSet=nothing,
        proximityPlacementGroup=nothing,
        priority=nothing,
        evictionPolicy=nothing,
        billingProfile=nothing,
        host=nothing,
        hostGroup=nothing,
        provisioningState=nothing,
        instanceView=nothing,
        licenseType=nothing,
        vmId=nothing,
        extensionsTimeBudget=nothing,
        platformFaultDomain=nothing,
        scheduledEventsProfile=nothing,
        userData=nothing,
        capacityReservation=nothing,
        applicationProfile=nothing,
        timeCreated=nothing,
    )

    - hardwareProfile::HardwareProfile
    - storageProfile::StorageProfile
    - additionalCapabilities::AdditionalCapabilities
    - osProfile::OSProfile
    - networkProfile::NetworkProfile
    - securityProfile::SecurityProfile
    - diagnosticsProfile::DiagnosticsProfile
    - availabilitySet::SubResource
    - virtualMachineScaleSet::SubResource
    - proximityPlacementGroup::SubResource
    - priority::Priority
    - evictionPolicy::EvictionPolicy
    - billingProfile::BillingProfile
    - host::SubResource
    - hostGroup::SubResource
    - provisioningState::String : The provisioning state, which only appears in the response.
    - instanceView::VirtualMachineInstanceView
    - licenseType::String : Specifies that the image or disk that is being used was licensed on-premises. &lt;br&gt;&lt;br&gt; Possible values for Windows Server operating system are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; Possible values for Linux Server operating system are: &lt;br&gt;&lt;br&gt; RHEL_BYOS (for RHEL) &lt;br&gt;&lt;br&gt; SLES_BYOS (for SUSE) &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing) &lt;br&gt;&lt;br&gt; [Azure Hybrid Use Benefit for Linux Server](https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
    - vmId::String : Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
    - extensionsTimeBudget::String : Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01
    - platformFaultDomain::Int64 : Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned to a fault domain that best maintains balance across available fault domains.&lt;br&gt;&lt;li&gt;This is applicable only if the &#39;virtualMachineScaleSet&#39; property of this Virtual Machine is set.&lt;li&gt;The Virtual Machine Scale Set that is referenced, must have &#39;platformFaultDomainCount&#39; &amp;gt; 1.&lt;li&gt;This property cannot be updated once the Virtual Machine is created.&lt;li&gt;Fault domain assignment can be viewed in the Virtual Machine Instance View.&lt;br&gt;&lt;br&gt;Minimum api‐version: 2020‐12‐01
    - scheduledEventsProfile::ScheduledEventsProfile
    - userData::String : UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here. &lt;br&gt;&lt;br&gt;Minimum api-version: 2021-03-01
    - capacityReservation::CapacityReservationProfile
    - applicationProfile::ApplicationProfile
    - timeCreated::ZonedDateTime : Specifies the time at which the Virtual Machine resource was created.&lt;br&gt;&lt;br&gt;Minimum api-version: 2021-11-01.
"""
Base.@kwdef mutable struct VirtualMachineProperties <: OpenAPI.APIModel
    hardwareProfile = nothing # spec type: Union{ Nothing, HardwareProfile }
    storageProfile = nothing # spec type: Union{ Nothing, StorageProfile }
    additionalCapabilities = nothing # spec type: Union{ Nothing, AdditionalCapabilities }
    osProfile = nothing # spec type: Union{ Nothing, OSProfile }
    networkProfile = nothing # spec type: Union{ Nothing, NetworkProfile }
    securityProfile = nothing # spec type: Union{ Nothing, SecurityProfile }
    diagnosticsProfile = nothing # spec type: Union{ Nothing, DiagnosticsProfile }
    availabilitySet = nothing # spec type: Union{ Nothing, SubResource }
    virtualMachineScaleSet = nothing # spec type: Union{ Nothing, SubResource }
    proximityPlacementGroup = nothing # spec type: Union{ Nothing, SubResource }
    priority = nothing # spec type: Union{ Nothing, Priority }
    evictionPolicy = nothing # spec type: Union{ Nothing, EvictionPolicy }
    billingProfile = nothing # spec type: Union{ Nothing, BillingProfile }
    host = nothing # spec type: Union{ Nothing, SubResource }
    hostGroup = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState::Union{Nothing, String} = nothing
    instanceView = nothing # spec type: Union{ Nothing, VirtualMachineInstanceView }
    licenseType::Union{Nothing, String} = nothing
    vmId::Union{Nothing, String} = nothing
    extensionsTimeBudget::Union{Nothing, String} = nothing
    platformFaultDomain::Union{Nothing, Int64} = nothing
    scheduledEventsProfile = nothing # spec type: Union{ Nothing, ScheduledEventsProfile }
    userData::Union{Nothing, String} = nothing
    capacityReservation = nothing # spec type: Union{ Nothing, CapacityReservationProfile }
    applicationProfile = nothing # spec type: Union{ Nothing, ApplicationProfile }
    timeCreated::Union{Nothing, ZonedDateTime} = nothing

    function VirtualMachineProperties(hardwareProfile, storageProfile, additionalCapabilities, osProfile, networkProfile, securityProfile, diagnosticsProfile, availabilitySet, virtualMachineScaleSet, proximityPlacementGroup, priority, evictionPolicy, billingProfile, host, hostGroup, provisioningState, instanceView, licenseType, vmId, extensionsTimeBudget, platformFaultDomain, scheduledEventsProfile, userData, capacityReservation, applicationProfile, timeCreated, )
        o = new(hardwareProfile, storageProfile, additionalCapabilities, osProfile, networkProfile, securityProfile, diagnosticsProfile, availabilitySet, virtualMachineScaleSet, proximityPlacementGroup, priority, evictionPolicy, billingProfile, host, hostGroup, provisioningState, instanceView, licenseType, vmId, extensionsTimeBudget, platformFaultDomain, scheduledEventsProfile, userData, capacityReservation, applicationProfile, timeCreated, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineProperties

const _property_types_VirtualMachineProperties = Dict{Symbol,String}(Symbol("hardwareProfile")=>"HardwareProfile", Symbol("storageProfile")=>"StorageProfile", Symbol("additionalCapabilities")=>"AdditionalCapabilities", Symbol("osProfile")=>"OSProfile", Symbol("networkProfile")=>"NetworkProfile", Symbol("securityProfile")=>"SecurityProfile", Symbol("diagnosticsProfile")=>"DiagnosticsProfile", Symbol("availabilitySet")=>"SubResource", Symbol("virtualMachineScaleSet")=>"SubResource", Symbol("proximityPlacementGroup")=>"SubResource", Symbol("priority")=>"Priority", Symbol("evictionPolicy")=>"EvictionPolicy", Symbol("billingProfile")=>"BillingProfile", Symbol("host")=>"SubResource", Symbol("hostGroup")=>"SubResource", Symbol("provisioningState")=>"String", Symbol("instanceView")=>"VirtualMachineInstanceView", Symbol("licenseType")=>"String", Symbol("vmId")=>"String", Symbol("extensionsTimeBudget")=>"String", Symbol("platformFaultDomain")=>"Int64", Symbol("scheduledEventsProfile")=>"ScheduledEventsProfile", Symbol("userData")=>"String", Symbol("capacityReservation")=>"CapacityReservationProfile", Symbol("applicationProfile")=>"ApplicationProfile", Symbol("timeCreated")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ VirtualMachineProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineProperties[name]))}

function OpenAPI.check_required(o::VirtualMachineProperties)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineProperties)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("hardwareProfile"), o.hardwareProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("storageProfile"), o.storageProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("additionalCapabilities"), o.additionalCapabilities)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("osProfile"), o.osProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("networkProfile"), o.networkProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("securityProfile"), o.securityProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("diagnosticsProfile"), o.diagnosticsProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("availabilitySet"), o.availabilitySet)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("virtualMachineScaleSet"), o.virtualMachineScaleSet)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("proximityPlacementGroup"), o.proximityPlacementGroup)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("priority"), o.priority)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("evictionPolicy"), o.evictionPolicy)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("billingProfile"), o.billingProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("host"), o.host)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("hostGroup"), o.hostGroup)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("instanceView"), o.instanceView)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("licenseType"), o.licenseType)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("vmId"), o.vmId)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("extensionsTimeBudget"), o.extensionsTimeBudget)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("platformFaultDomain"), o.platformFaultDomain)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("scheduledEventsProfile"), o.scheduledEventsProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("userData"), o.userData)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("capacityReservation"), o.capacityReservation)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("applicationProfile"), o.applicationProfile)
    OpenAPI.validate_property(VirtualMachineProperties, Symbol("timeCreated"), o.timeCreated)
end

function OpenAPI.validate_property(::Type{ VirtualMachineProperties }, name::Symbol, val)





















    if name === Symbol("platformFaultDomain")
        OpenAPI.validate_param(name, "VirtualMachineProperties", :format, val, "int32")
    end





    if name === Symbol("timeCreated")
        OpenAPI.validate_param(name, "VirtualMachineProperties", :format, val, "date-time")
    end
end
