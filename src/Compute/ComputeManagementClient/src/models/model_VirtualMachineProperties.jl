# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineProperties
Describes the properties of a Virtual Machine.

    VirtualMachineProperties(;
        hardwareProfile=nothing,
        storageProfile=nothing,
        additionalCapabilities=nothing,
        osProfile=nothing,
        networkProfile=nothing,
        securityProfile=nothing,
        diagnosticsProfile=nothing,
        availabilitySet=nothing,
        virtualMachineScaleSet=nothing,
        proximityPlacementGroup=nothing,
        priority=nothing,
        evictionPolicy=nothing,
        billingProfile=nothing,
        host=nothing,
        hostGroup=nothing,
        provisioningState=nothing,
        instanceView=nothing,
        licenseType=nothing,
        vmId=nothing,
        extensionsTimeBudget=nothing,
    )

    - hardwareProfile::HardwareProfile
    - storageProfile::StorageProfile
    - additionalCapabilities::AdditionalCapabilities
    - osProfile::OSProfile
    - networkProfile::NetworkProfile
    - securityProfile::SecurityProfile
    - diagnosticsProfile::DiagnosticsProfile
    - availabilitySet::SubResource
    - virtualMachineScaleSet::SubResource
    - proximityPlacementGroup::SubResource
    - priority::Priority
    - evictionPolicy::EvictionPolicy
    - billingProfile::BillingProfile
    - host::SubResource
    - hostGroup::SubResource
    - provisioningState::String : The provisioning state, which only appears in the response.
    - instanceView::VirtualMachineInstanceView
    - licenseType::String : Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
    - vmId::String : Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
    - extensionsTimeBudget::String : Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default value is 90 minutes (PT1H30M). &lt;br&gt;&lt;br&gt; Minimum api-version: 2020-06-01
"""
Base.@kwdef mutable struct VirtualMachineProperties <: OpenAPI.APIModel
    hardwareProfile = nothing # spec type: Union{ Nothing, HardwareProfile }
    storageProfile = nothing # spec type: Union{ Nothing, StorageProfile }
    additionalCapabilities = nothing # spec type: Union{ Nothing, AdditionalCapabilities }
    osProfile = nothing # spec type: Union{ Nothing, OSProfile }
    networkProfile = nothing # spec type: Union{ Nothing, NetworkProfile }
    securityProfile = nothing # spec type: Union{ Nothing, SecurityProfile }
    diagnosticsProfile = nothing # spec type: Union{ Nothing, DiagnosticsProfile }
    availabilitySet = nothing # spec type: Union{ Nothing, SubResource }
    virtualMachineScaleSet = nothing # spec type: Union{ Nothing, SubResource }
    proximityPlacementGroup = nothing # spec type: Union{ Nothing, SubResource }
    priority = nothing # spec type: Union{ Nothing, Priority }
    evictionPolicy = nothing # spec type: Union{ Nothing, EvictionPolicy }
    billingProfile = nothing # spec type: Union{ Nothing, BillingProfile }
    host = nothing # spec type: Union{ Nothing, SubResource }
    hostGroup = nothing # spec type: Union{ Nothing, SubResource }
    provisioningState::Union{Nothing, String} = nothing
    instanceView = nothing # spec type: Union{ Nothing, VirtualMachineInstanceView }
    licenseType::Union{Nothing, String} = nothing
    vmId::Union{Nothing, String} = nothing
    extensionsTimeBudget::Union{Nothing, String} = nothing

    function VirtualMachineProperties(hardwareProfile, storageProfile, additionalCapabilities, osProfile, networkProfile, securityProfile, diagnosticsProfile, availabilitySet, virtualMachineScaleSet, proximityPlacementGroup, priority, evictionPolicy, billingProfile, host, hostGroup, provisioningState, instanceView, licenseType, vmId, extensionsTimeBudget, )
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("hardwareProfile"), hardwareProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("storageProfile"), storageProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("additionalCapabilities"), additionalCapabilities)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("osProfile"), osProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("networkProfile"), networkProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("securityProfile"), securityProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("diagnosticsProfile"), diagnosticsProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("availabilitySet"), availabilitySet)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("virtualMachineScaleSet"), virtualMachineScaleSet)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("proximityPlacementGroup"), proximityPlacementGroup)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("priority"), priority)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("evictionPolicy"), evictionPolicy)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("billingProfile"), billingProfile)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("host"), host)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("hostGroup"), hostGroup)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("instanceView"), instanceView)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("licenseType"), licenseType)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("vmId"), vmId)
        OpenAPI.validate_property(VirtualMachineProperties, Symbol("extensionsTimeBudget"), extensionsTimeBudget)
        return new(hardwareProfile, storageProfile, additionalCapabilities, osProfile, networkProfile, securityProfile, diagnosticsProfile, availabilitySet, virtualMachineScaleSet, proximityPlacementGroup, priority, evictionPolicy, billingProfile, host, hostGroup, provisioningState, instanceView, licenseType, vmId, extensionsTimeBudget, )
    end
end # type VirtualMachineProperties

const _property_types_VirtualMachineProperties = Dict{Symbol,String}(Symbol("hardwareProfile")=>"HardwareProfile", Symbol("storageProfile")=>"StorageProfile", Symbol("additionalCapabilities")=>"AdditionalCapabilities", Symbol("osProfile")=>"OSProfile", Symbol("networkProfile")=>"NetworkProfile", Symbol("securityProfile")=>"SecurityProfile", Symbol("diagnosticsProfile")=>"DiagnosticsProfile", Symbol("availabilitySet")=>"SubResource", Symbol("virtualMachineScaleSet")=>"SubResource", Symbol("proximityPlacementGroup")=>"SubResource", Symbol("priority")=>"Priority", Symbol("evictionPolicy")=>"EvictionPolicy", Symbol("billingProfile")=>"BillingProfile", Symbol("host")=>"SubResource", Symbol("hostGroup")=>"SubResource", Symbol("provisioningState")=>"String", Symbol("instanceView")=>"VirtualMachineInstanceView", Symbol("licenseType")=>"String", Symbol("vmId")=>"String", Symbol("extensionsTimeBudget")=>"String", )
OpenAPI.property_type(::Type{ VirtualMachineProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineProperties[name]))}

function check_required(o::VirtualMachineProperties)
    true
end

function OpenAPI.validate_property(::Type{ VirtualMachineProperties }, name::Symbol, val)
end
