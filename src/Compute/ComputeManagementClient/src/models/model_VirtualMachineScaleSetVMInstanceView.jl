# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineScaleSetVMInstanceView
The instance view of a virtual machine scale set VM.

    VirtualMachineScaleSetVMInstanceView(;
        platformUpdateDomain=nothing,
        platformFaultDomain=nothing,
        rdpThumbPrint=nothing,
        vmAgent=nothing,
        maintenanceRedeployStatus=nothing,
        disks=nothing,
        extensions=nothing,
        vmHealth=nothing,
        bootDiagnostics=nothing,
        statuses=nothing,
        assignedHost=nothing,
        placementGroupId=nothing,
    )

    - platformUpdateDomain::Int64 : The Update Domain count.
    - platformFaultDomain::Int64 : The Fault Domain count.
    - rdpThumbPrint::String : The Remote desktop certificate thumbprint.
    - vmAgent::VirtualMachineAgentInstanceView
    - maintenanceRedeployStatus::MaintenanceRedeployStatus
    - disks::Vector{DiskInstanceView} : The disks information.
    - extensions::Vector{VirtualMachineExtensionInstanceView} : The extensions information.
    - vmHealth::VirtualMachineHealthStatus
    - bootDiagnostics::BootDiagnosticsInstanceView
    - statuses::Vector{InstanceViewStatus} : The resource status information.
    - assignedHost::String : Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
    - placementGroupId::String : The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
"""
Base.@kwdef mutable struct VirtualMachineScaleSetVMInstanceView <: OpenAPI.APIModel
    platformUpdateDomain::Union{Nothing, Int64} = nothing
    platformFaultDomain::Union{Nothing, Int64} = nothing
    rdpThumbPrint::Union{Nothing, String} = nothing
    vmAgent = nothing # spec type: Union{ Nothing, VirtualMachineAgentInstanceView }
    maintenanceRedeployStatus = nothing # spec type: Union{ Nothing, MaintenanceRedeployStatus }
    disks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DiskInstanceView} }
    extensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualMachineExtensionInstanceView} }
    vmHealth = nothing # spec type: Union{ Nothing, VirtualMachineHealthStatus }
    bootDiagnostics = nothing # spec type: Union{ Nothing, BootDiagnosticsInstanceView }
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InstanceViewStatus} }
    assignedHost::Union{Nothing, String} = nothing
    placementGroupId::Union{Nothing, String} = nothing

    function VirtualMachineScaleSetVMInstanceView(platformUpdateDomain, platformFaultDomain, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, extensions, vmHealth, bootDiagnostics, statuses, assignedHost, placementGroupId, )
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("platformUpdateDomain"), platformUpdateDomain)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("platformFaultDomain"), platformFaultDomain)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("rdpThumbPrint"), rdpThumbPrint)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("vmAgent"), vmAgent)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("maintenanceRedeployStatus"), maintenanceRedeployStatus)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("disks"), disks)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("extensions"), extensions)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("vmHealth"), vmHealth)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("bootDiagnostics"), bootDiagnostics)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("statuses"), statuses)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("assignedHost"), assignedHost)
        OpenAPI.validate_property(VirtualMachineScaleSetVMInstanceView, Symbol("placementGroupId"), placementGroupId)
        return new(platformUpdateDomain, platformFaultDomain, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, extensions, vmHealth, bootDiagnostics, statuses, assignedHost, placementGroupId, )
    end
end # type VirtualMachineScaleSetVMInstanceView

const _property_types_VirtualMachineScaleSetVMInstanceView = Dict{Symbol,String}(Symbol("platformUpdateDomain")=>"Int64", Symbol("platformFaultDomain")=>"Int64", Symbol("rdpThumbPrint")=>"String", Symbol("vmAgent")=>"VirtualMachineAgentInstanceView", Symbol("maintenanceRedeployStatus")=>"MaintenanceRedeployStatus", Symbol("disks")=>"Vector{DiskInstanceView}", Symbol("extensions")=>"Vector{VirtualMachineExtensionInstanceView}", Symbol("vmHealth")=>"VirtualMachineHealthStatus", Symbol("bootDiagnostics")=>"BootDiagnosticsInstanceView", Symbol("statuses")=>"Vector{InstanceViewStatus}", Symbol("assignedHost")=>"String", Symbol("placementGroupId")=>"String", )
OpenAPI.property_type(::Type{ VirtualMachineScaleSetVMInstanceView }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineScaleSetVMInstanceView[name]))}

function check_required(o::VirtualMachineScaleSetVMInstanceView)
    true
end

function OpenAPI.validate_property(::Type{ VirtualMachineScaleSetVMInstanceView }, name::Symbol, val)
    if name === Symbol("platformUpdateDomain")
        OpenAPI.validate_param(name, "VirtualMachineScaleSetVMInstanceView", :format, val, "int32")
    end
    if name === Symbol("platformFaultDomain")
        OpenAPI.validate_param(name, "VirtualMachineScaleSetVMInstanceView", :format, val, "int32")
    end
end
