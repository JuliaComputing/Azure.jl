# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImageOSDisk
Describes an Operating System disk.

    ImageOSDisk(;
        osType=nothing,
        osState=nothing,
        snapshot=nothing,
        managedDisk=nothing,
        blobUri=nothing,
        caching=nothing,
        diskSizeGB=nothing,
        storageAccountType=nothing,
        diskEncryptionSet=nothing,
    )

    - osType::String : This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom image. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **Windows** &lt;br&gt;&lt;br&gt; **Linux**
    - osState::String : The OS State.
    - snapshot::SubResource
    - managedDisk::SubResource
    - blobUri::String : The Virtual Hard Disk.
    - caching::String : Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
    - diskSizeGB::Int64 : Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
    - storageAccountType::StorageAccountType
    - diskEncryptionSet::DiskEncryptionSetParameters
"""
Base.@kwdef mutable struct ImageOSDisk <: OpenAPI.APIModel
    osType::Union{Nothing, String} = nothing
    osState::Union{Nothing, String} = nothing
    snapshot = nothing # spec type: Union{ Nothing, SubResource }
    managedDisk = nothing # spec type: Union{ Nothing, SubResource }
    blobUri::Union{Nothing, String} = nothing
    caching::Union{Nothing, String} = nothing
    diskSizeGB::Union{Nothing, Int64} = nothing
    storageAccountType = nothing # spec type: Union{ Nothing, StorageAccountType }
    diskEncryptionSet = nothing # spec type: Union{ Nothing, DiskEncryptionSetParameters }

    function ImageOSDisk(osType, osState, snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
        o = new(osType, osState, snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type ImageOSDisk

const _property_types_ImageOSDisk = Dict{Symbol,String}(Symbol("osType")=>"String", Symbol("osState")=>"String", Symbol("snapshot")=>"SubResource", Symbol("managedDisk")=>"SubResource", Symbol("blobUri")=>"String", Symbol("caching")=>"String", Symbol("diskSizeGB")=>"Int64", Symbol("storageAccountType")=>"StorageAccountType", Symbol("diskEncryptionSet")=>"DiskEncryptionSetParameters", )
OpenAPI.property_type(::Type{ ImageOSDisk }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageOSDisk[name]))}

function OpenAPI.check_required(o::ImageOSDisk)
    o.osType === nothing && (return false)
    o.osState === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::ImageOSDisk)
    OpenAPI.validate_property(ImageOSDisk, Symbol("osType"), o.osType)
    OpenAPI.validate_property(ImageOSDisk, Symbol("osState"), o.osState)
    OpenAPI.validate_property(ImageOSDisk, Symbol("snapshot"), o.snapshot)
    OpenAPI.validate_property(ImageOSDisk, Symbol("managedDisk"), o.managedDisk)
    OpenAPI.validate_property(ImageOSDisk, Symbol("blobUri"), o.blobUri)
    OpenAPI.validate_property(ImageOSDisk, Symbol("caching"), o.caching)
    OpenAPI.validate_property(ImageOSDisk, Symbol("diskSizeGB"), o.diskSizeGB)
    OpenAPI.validate_property(ImageOSDisk, Symbol("storageAccountType"), o.storageAccountType)
    OpenAPI.validate_property(ImageOSDisk, Symbol("diskEncryptionSet"), o.diskEncryptionSet)
end

function OpenAPI.validate_property(::Type{ ImageOSDisk }, name::Symbol, val)

    if name === Symbol("osType")
        OpenAPI.validate_param(name, "ImageOSDisk", :enum, val, ["Windows", "Linux"])
    end


    if name === Symbol("osState")
        OpenAPI.validate_param(name, "ImageOSDisk", :enum, val, ["Generalized", "Specialized"])
    end





    if name === Symbol("caching")
        OpenAPI.validate_param(name, "ImageOSDisk", :enum, val, ["None", "ReadOnly", "ReadWrite"])
    end


    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "ImageOSDisk", :format, val, "int32")
    end


end
