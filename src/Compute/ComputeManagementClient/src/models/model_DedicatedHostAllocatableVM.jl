# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DedicatedHostAllocatableVM
Represents the dedicated host unutilized capacity in terms of a specific VM size.

    DedicatedHostAllocatableVM(;
        vmSize=nothing,
        count=nothing,
    )

    - vmSize::String : VM size in terms of which the unutilized capacity is represented.
    - count::Float64 : Maximum number of VMs of size vmSize that can fit in the dedicated host&#39;s remaining capacity.
"""
Base.@kwdef mutable struct DedicatedHostAllocatableVM <: OpenAPI.APIModel
    vmSize::Union{Nothing, String} = nothing
    count::Union{Nothing, Float64} = nothing

    function DedicatedHostAllocatableVM(vmSize, count, )
        OpenAPI.validate_property(DedicatedHostAllocatableVM, Symbol("vmSize"), vmSize)
        OpenAPI.validate_property(DedicatedHostAllocatableVM, Symbol("count"), count)
        return new(vmSize, count, )
    end
end # type DedicatedHostAllocatableVM

const _property_types_DedicatedHostAllocatableVM = Dict{Symbol,String}(Symbol("vmSize")=>"String", Symbol("count")=>"Float64", )
OpenAPI.property_type(::Type{ DedicatedHostAllocatableVM }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DedicatedHostAllocatableVM[name]))}

function check_required(o::DedicatedHostAllocatableVM)
    true
end

function OpenAPI.validate_property(::Type{ DedicatedHostAllocatableVM }, name::Symbol, val)
    if name === Symbol("count")
        OpenAPI.validate_param(name, "DedicatedHostAllocatableVM", :format, val, "double")
    end
end
