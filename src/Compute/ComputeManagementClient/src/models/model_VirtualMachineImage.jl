# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineImage
Describes a Virtual Machine Image.

    VirtualMachineImage(;
        id=nothing,
        name=nothing,
        location=nothing,
        tags=nothing,
        properties=nothing,
    )

    - id::String : Resource Id
    - name::String : The name of the resource.
    - location::String : The supported Azure location of the resource.
    - tags::Dict{String, String} : Specifies the tags that are assigned to the virtual machine. For more information about using tags, see [Using tags to organize your Azure resources](https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md).
    - properties::VirtualMachineImageProperties
"""
Base.@kwdef mutable struct VirtualMachineImage <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    tags::Union{Nothing, Dict{String, String}} = nothing
    properties = nothing # spec type: Union{ Nothing, VirtualMachineImageProperties }

    function VirtualMachineImage(id, name, location, tags, properties, )
        OpenAPI.validate_property(VirtualMachineImage, Symbol("id"), id)
        OpenAPI.validate_property(VirtualMachineImage, Symbol("name"), name)
        OpenAPI.validate_property(VirtualMachineImage, Symbol("location"), location)
        OpenAPI.validate_property(VirtualMachineImage, Symbol("tags"), tags)
        OpenAPI.validate_property(VirtualMachineImage, Symbol("properties"), properties)
        return new(id, name, location, tags, properties, )
    end
end # type VirtualMachineImage

const _property_types_VirtualMachineImage = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", Symbol("properties")=>"VirtualMachineImageProperties", )
OpenAPI.property_type(::Type{ VirtualMachineImage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineImage[name]))}

function check_required(o::VirtualMachineImage)
    o.name === nothing && (return false)
    o.location === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ VirtualMachineImage }, name::Symbol, val)
end
