# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""UefiSettings
Specifies the security settings like secure boot and vTPM used while creating the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01

    UefiSettings(;
        secureBootEnabled=nothing,
        vTpmEnabled=nothing,
    )

    - secureBootEnabled::Bool : Specifies whether secure boot should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
    - vTpmEnabled::Bool : Specifies whether vTPM should be enabled on the virtual machine. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-12-01
"""
Base.@kwdef mutable struct UefiSettings <: OpenAPI.APIModel
    secureBootEnabled::Union{Nothing, Bool} = nothing
    vTpmEnabled::Union{Nothing, Bool} = nothing

    function UefiSettings(secureBootEnabled, vTpmEnabled, )
        o = new(secureBootEnabled, vTpmEnabled, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type UefiSettings

const _property_types_UefiSettings = Dict{Symbol,String}(Symbol("secureBootEnabled")=>"Bool", Symbol("vTpmEnabled")=>"Bool", )
OpenAPI.property_type(::Type{ UefiSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UefiSettings[name]))}

function OpenAPI.check_required(o::UefiSettings)
    true
end

function OpenAPI.validate_properties(o::UefiSettings)
    OpenAPI.validate_property(UefiSettings, Symbol("secureBootEnabled"), o.secureBootEnabled)
    OpenAPI.validate_property(UefiSettings, Symbol("vTpmEnabled"), o.vTpmEnabled)
end

function OpenAPI.validate_property(::Type{ UefiSettings }, name::Symbol, val)


end
