# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PatchSettings
Specifies settings related to VM Guest Patching on Windows.

    PatchSettings(;
        patchMode=nothing,
        enableHotpatching=nothing,
        assessmentMode=nothing,
    )

    - patchMode::String : Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale set with OrchestrationMode as Flexible.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false&lt;br /&gt;&lt;br /&gt; **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. &lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true 
    - enableHotpatching::Bool : Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the &#39;provisionVMAgent&#39; must be set to true and &#39;patchMode&#39; must be set to &#39;AutomaticByPlatform&#39;.
    - assessmentMode::String : Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **ImageDefault** - You control the timing of patch assessments on a virtual machine.&lt;br /&gt;&lt;br /&gt; **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true. 
"""
Base.@kwdef mutable struct PatchSettings <: OpenAPI.APIModel
    patchMode::Union{Nothing, String} = nothing
    enableHotpatching::Union{Nothing, Bool} = nothing
    assessmentMode::Union{Nothing, String} = nothing

    function PatchSettings(patchMode, enableHotpatching, assessmentMode, )
        o = new(patchMode, enableHotpatching, assessmentMode, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type PatchSettings

const _property_types_PatchSettings = Dict{Symbol,String}(Symbol("patchMode")=>"String", Symbol("enableHotpatching")=>"Bool", Symbol("assessmentMode")=>"String", )
OpenAPI.property_type(::Type{ PatchSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchSettings[name]))}

function OpenAPI.check_required(o::PatchSettings)
    true
end

function OpenAPI.validate_properties(o::PatchSettings)
    OpenAPI.validate_property(PatchSettings, Symbol("patchMode"), o.patchMode)
    OpenAPI.validate_property(PatchSettings, Symbol("enableHotpatching"), o.enableHotpatching)
    OpenAPI.validate_property(PatchSettings, Symbol("assessmentMode"), o.assessmentMode)
end

function OpenAPI.validate_property(::Type{ PatchSettings }, name::Symbol, val)

    if name === Symbol("patchMode")
        OpenAPI.validate_param(name, "PatchSettings", :enum, val, ["Manual", "AutomaticByOS", "AutomaticByPlatform"])
    end



    if name === Symbol("assessmentMode")
        OpenAPI.validate_param(name, "PatchSettings", :enum, val, ["ImageDefault", "AutomaticByPlatform"])
    end

end
