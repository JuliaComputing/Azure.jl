# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""PatchSettings

    PatchSettings(;
        patchMode=nothing,
    )

    - patchMode::String : Specifies the mode of in-guest patching to IaaS virtual machine.&lt;br /&gt;&lt;br /&gt; Possible values are:&lt;br /&gt;&lt;br /&gt; **Manual** - You  control the application of patches to a virtual machine. You do this by applying patches manually inside the VM. In this mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates must be false&lt;br /&gt;&lt;br /&gt; **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates must be true. &lt;br /&gt;&lt;br /&gt; ** AutomaticByPlatform** - the virtual machine will automatically updated by the OS. The properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true 
"""
Base.@kwdef mutable struct PatchSettings <: OpenAPI.APIModel
    patchMode::Union{Nothing, String} = nothing

    function PatchSettings(patchMode, )
        OpenAPI.validate_property(PatchSettings, Symbol("patchMode"), patchMode)
        return new(patchMode, )
    end
end # type PatchSettings

const _property_types_PatchSettings = Dict{Symbol,String}(Symbol("patchMode")=>"String", )
OpenAPI.property_type(::Type{ PatchSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_PatchSettings[name]))}

function check_required(o::PatchSettings)
    true
end

function OpenAPI.validate_property(::Type{ PatchSettings }, name::Symbol, val)
    if name === Symbol("patchMode")
        OpenAPI.validate_param(name, "PatchSettings", :enum, val, ["Manual", "AutomaticByOS", "AutomaticByPlatform"])
    end
end
