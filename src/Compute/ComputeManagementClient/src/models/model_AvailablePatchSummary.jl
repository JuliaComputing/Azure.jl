# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""AvailablePatchSummary
Describes the properties of an virtual machine instance view for available patch summary.

    AvailablePatchSummary(;
        status=nothing,
        assessmentActivityId=nothing,
        rebootPending=nothing,
        criticalAndSecurityPatchCount=nothing,
        otherPatchCount=nothing,
        startTime=nothing,
        lastModifiedTime=nothing,
        error=nothing,
    )

    - status::String : The overall success or failure status of the operation. It remains \&quot;InProgress\&quot; until the operation completes. At that point it will become \&quot;Unknown\&quot;, \&quot;Failed\&quot;, \&quot;Succeeded\&quot;, or \&quot;CompletedWithWarnings.\&quot;
    - assessmentActivityId::String : The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
    - rebootPending::Bool : The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete installation but the reboot has not yet occurred.
    - criticalAndSecurityPatchCount::Int64 : The number of critical or security patches that have been detected as available and not yet installed.
    - otherPatchCount::Int64 : The number of all available patches excluding critical and security.
    - startTime::ZonedDateTime : The UTC timestamp when the operation began.
    - lastModifiedTime::ZonedDateTime : The UTC timestamp when the operation began.
    - error::ApiError
"""
Base.@kwdef mutable struct AvailablePatchSummary <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    assessmentActivityId::Union{Nothing, String} = nothing
    rebootPending::Union{Nothing, Bool} = nothing
    criticalAndSecurityPatchCount::Union{Nothing, Int64} = nothing
    otherPatchCount::Union{Nothing, Int64} = nothing
    startTime::Union{Nothing, ZonedDateTime} = nothing
    lastModifiedTime::Union{Nothing, ZonedDateTime} = nothing
    error = nothing # spec type: Union{ Nothing, ApiError }

    function AvailablePatchSummary(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, startTime, lastModifiedTime, error, )
        o = new(status, assessmentActivityId, rebootPending, criticalAndSecurityPatchCount, otherPatchCount, startTime, lastModifiedTime, error, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type AvailablePatchSummary

const _property_types_AvailablePatchSummary = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("assessmentActivityId")=>"String", Symbol("rebootPending")=>"Bool", Symbol("criticalAndSecurityPatchCount")=>"Int64", Symbol("otherPatchCount")=>"Int64", Symbol("startTime")=>"ZonedDateTime", Symbol("lastModifiedTime")=>"ZonedDateTime", Symbol("error")=>"ApiError", )
OpenAPI.property_type(::Type{ AvailablePatchSummary }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_AvailablePatchSummary[name]))}

function OpenAPI.check_required(o::AvailablePatchSummary)
    true
end

function OpenAPI.validate_properties(o::AvailablePatchSummary)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("status"), o.status)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("assessmentActivityId"), o.assessmentActivityId)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("rebootPending"), o.rebootPending)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("criticalAndSecurityPatchCount"), o.criticalAndSecurityPatchCount)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("otherPatchCount"), o.otherPatchCount)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("startTime"), o.startTime)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("lastModifiedTime"), o.lastModifiedTime)
    OpenAPI.validate_property(AvailablePatchSummary, Symbol("error"), o.error)
end

function OpenAPI.validate_property(::Type{ AvailablePatchSummary }, name::Symbol, val)

    if name === Symbol("status")
        OpenAPI.validate_param(name, "AvailablePatchSummary", :enum, val, ["Unknown", "InProgress", "Failed", "Succeeded", "CompletedWithWarnings"])
    end




    if name === Symbol("criticalAndSecurityPatchCount")
        OpenAPI.validate_param(name, "AvailablePatchSummary", :format, val, "int32")
    end

    if name === Symbol("otherPatchCount")
        OpenAPI.validate_param(name, "AvailablePatchSummary", :format, val, "int32")
    end

    if name === Symbol("startTime")
        OpenAPI.validate_param(name, "AvailablePatchSummary", :format, val, "date-time")
    end

    if name === Symbol("lastModifiedTime")
        OpenAPI.validate_param(name, "AvailablePatchSummary", :format, val, "date-time")
    end

end
