# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachine_allOf

    VirtualMachineAllOf(;
        plan=nothing,
        properties=nothing,
        resources=nothing,
        identity=nothing,
        zones=nothing,
    )

    - plan::Plan
    - properties::VirtualMachineProperties
    - resources::Vector{VirtualMachineExtension} : The virtual machine child extension resources.
    - identity::VirtualMachineIdentity
    - zones::Vector{String} : The virtual machine zones.
"""
Base.@kwdef mutable struct VirtualMachineAllOf <: OpenAPI.APIModel
    plan = nothing # spec type: Union{ Nothing, Plan }
    properties = nothing # spec type: Union{ Nothing, VirtualMachineProperties }
    resources::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualMachineExtension} }
    identity = nothing # spec type: Union{ Nothing, VirtualMachineIdentity }
    zones::Union{Nothing, Vector{String}} = nothing

    function VirtualMachineAllOf(plan, properties, resources, identity, zones, )
        OpenAPI.validate_property(VirtualMachineAllOf, Symbol("plan"), plan)
        OpenAPI.validate_property(VirtualMachineAllOf, Symbol("properties"), properties)
        OpenAPI.validate_property(VirtualMachineAllOf, Symbol("resources"), resources)
        OpenAPI.validate_property(VirtualMachineAllOf, Symbol("identity"), identity)
        OpenAPI.validate_property(VirtualMachineAllOf, Symbol("zones"), zones)
        return new(plan, properties, resources, identity, zones, )
    end
end # type VirtualMachineAllOf

const _property_types_VirtualMachineAllOf = Dict{Symbol,String}(Symbol("plan")=>"Plan", Symbol("properties")=>"VirtualMachineProperties", Symbol("resources")=>"Vector{VirtualMachineExtension}", Symbol("identity")=>"VirtualMachineIdentity", Symbol("zones")=>"Vector{String}", )
OpenAPI.property_type(::Type{ VirtualMachineAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineAllOf[name]))}

function check_required(o::VirtualMachineAllOf)
    true
end

function OpenAPI.validate_property(::Type{ VirtualMachineAllOf }, name::Symbol, val)
end
