# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineInstallPatchesResult
The result summary of an installation operation.

    VirtualMachineInstallPatchesResult(;
        status=nothing,
        installationActivityId=nothing,
        rebootStatus=nothing,
        maintenanceWindowExceeded=nothing,
        excludedPatchCount=nothing,
        notSelectedPatchCount=nothing,
        pendingPatchCount=nothing,
        installedPatchCount=nothing,
        failedPatchCount=nothing,
        patches=nothing,
        startDateTime=nothing,
        error=nothing,
    )

    - status::String : The overall success or failure status of the operation. It remains \&quot;InProgress\&quot; until the operation completes. At that point it will become \&quot;Failed\&quot;, \&quot;Succeeded\&quot;, \&quot;Unknown\&quot; or \&quot;CompletedWithWarnings.\&quot;
    - installationActivityId::String : The activity ID of the operation that produced this result. It is used to correlate across CRP and extension logs.
    - rebootStatus::String : The reboot state of the VM following completion of the operation.
    - maintenanceWindowExceeded::Bool : Whether the operation ran out of time before it completed all its intended actions.
    - excludedPatchCount::Int64 : The number of patches that were not installed due to the user blocking their installation.
    - notSelectedPatchCount::Int64 : The number of patches that were detected as available for install, but did not meet the operation&#39;s criteria.
    - pendingPatchCount::Int64 : The number of patches that were identified as meeting the installation criteria, but were not able to be installed. Typically this happens when maintenanceWindowExceeded &#x3D;&#x3D; true.
    - installedPatchCount::Int64 : The number of patches successfully installed.
    - failedPatchCount::Int64 : The number of patches that could not be installed due to some issue. See errors for details.
    - patches::Vector{PatchInstallationDetail} : The patches that were installed during the operation.
    - startDateTime::ZonedDateTime : The UTC timestamp when the operation began.
    - error::ApiError
"""
Base.@kwdef mutable struct VirtualMachineInstallPatchesResult <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    installationActivityId::Union{Nothing, String} = nothing
    rebootStatus::Union{Nothing, String} = nothing
    maintenanceWindowExceeded::Union{Nothing, Bool} = nothing
    excludedPatchCount::Union{Nothing, Int64} = nothing
    notSelectedPatchCount::Union{Nothing, Int64} = nothing
    pendingPatchCount::Union{Nothing, Int64} = nothing
    installedPatchCount::Union{Nothing, Int64} = nothing
    failedPatchCount::Union{Nothing, Int64} = nothing
    patches::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{PatchInstallationDetail} }
    startDateTime::Union{Nothing, ZonedDateTime} = nothing
    error = nothing # spec type: Union{ Nothing, ApiError }

    function VirtualMachineInstallPatchesResult(status, installationActivityId, rebootStatus, maintenanceWindowExceeded, excludedPatchCount, notSelectedPatchCount, pendingPatchCount, installedPatchCount, failedPatchCount, patches, startDateTime, error, )
        o = new(status, installationActivityId, rebootStatus, maintenanceWindowExceeded, excludedPatchCount, notSelectedPatchCount, pendingPatchCount, installedPatchCount, failedPatchCount, patches, startDateTime, error, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineInstallPatchesResult

const _property_types_VirtualMachineInstallPatchesResult = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("installationActivityId")=>"String", Symbol("rebootStatus")=>"String", Symbol("maintenanceWindowExceeded")=>"Bool", Symbol("excludedPatchCount")=>"Int64", Symbol("notSelectedPatchCount")=>"Int64", Symbol("pendingPatchCount")=>"Int64", Symbol("installedPatchCount")=>"Int64", Symbol("failedPatchCount")=>"Int64", Symbol("patches")=>"Vector{PatchInstallationDetail}", Symbol("startDateTime")=>"ZonedDateTime", Symbol("error")=>"ApiError", )
OpenAPI.property_type(::Type{ VirtualMachineInstallPatchesResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineInstallPatchesResult[name]))}

function OpenAPI.check_required(o::VirtualMachineInstallPatchesResult)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineInstallPatchesResult)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("status"), o.status)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("installationActivityId"), o.installationActivityId)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("rebootStatus"), o.rebootStatus)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("maintenanceWindowExceeded"), o.maintenanceWindowExceeded)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("excludedPatchCount"), o.excludedPatchCount)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("notSelectedPatchCount"), o.notSelectedPatchCount)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("pendingPatchCount"), o.pendingPatchCount)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("installedPatchCount"), o.installedPatchCount)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("failedPatchCount"), o.failedPatchCount)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("patches"), o.patches)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("startDateTime"), o.startDateTime)
    OpenAPI.validate_property(VirtualMachineInstallPatchesResult, Symbol("error"), o.error)
end

function OpenAPI.validate_property(::Type{ VirtualMachineInstallPatchesResult }, name::Symbol, val)

    if name === Symbol("status")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :enum, val, ["Unknown", "InProgress", "Failed", "Succeeded", "CompletedWithWarnings"])
    end



    if name === Symbol("rebootStatus")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :enum, val, ["Unknown", "NotNeeded", "Required", "Started", "Failed", "Completed"])
    end



    if name === Symbol("excludedPatchCount")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "int32")
    end

    if name === Symbol("notSelectedPatchCount")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "int32")
    end

    if name === Symbol("pendingPatchCount")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "int32")
    end

    if name === Symbol("installedPatchCount")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "int32")
    end

    if name === Symbol("failedPatchCount")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "int32")
    end


    if name === Symbol("startDateTime")
        OpenAPI.validate_param(name, "VirtualMachineInstallPatchesResult", :format, val, "date-time")
    end

end
