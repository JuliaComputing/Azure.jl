# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiskEncryptionSettings
Describes a Encryption Settings for a Disk

    DiskEncryptionSettings(;
        diskEncryptionKey=nothing,
        keyEncryptionKey=nothing,
        enabled=nothing,
    )

    - diskEncryptionKey::KeyVaultSecretReference
    - keyEncryptionKey::KeyVaultKeyReference
    - enabled::Bool : Specifies whether disk encryption should be enabled on the virtual machine.
"""
Base.@kwdef mutable struct DiskEncryptionSettings <: OpenAPI.APIModel
    diskEncryptionKey = nothing # spec type: Union{ Nothing, KeyVaultSecretReference }
    keyEncryptionKey = nothing # spec type: Union{ Nothing, KeyVaultKeyReference }
    enabled::Union{Nothing, Bool} = nothing

    function DiskEncryptionSettings(diskEncryptionKey, keyEncryptionKey, enabled, )
        OpenAPI.validate_property(DiskEncryptionSettings, Symbol("diskEncryptionKey"), diskEncryptionKey)
        OpenAPI.validate_property(DiskEncryptionSettings, Symbol("keyEncryptionKey"), keyEncryptionKey)
        OpenAPI.validate_property(DiskEncryptionSettings, Symbol("enabled"), enabled)
        return new(diskEncryptionKey, keyEncryptionKey, enabled, )
    end
end # type DiskEncryptionSettings

const _property_types_DiskEncryptionSettings = Dict{Symbol,String}(Symbol("diskEncryptionKey")=>"KeyVaultSecretReference", Symbol("keyEncryptionKey")=>"KeyVaultKeyReference", Symbol("enabled")=>"Bool", )
OpenAPI.property_type(::Type{ DiskEncryptionSettings }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskEncryptionSettings[name]))}

function check_required(o::DiskEncryptionSettings)
    true
end

function OpenAPI.validate_property(::Type{ DiskEncryptionSettings }, name::Symbol, val)
end
