# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImageDataDisk
Describes a data disk.

    ImageDataDisk(;
        lun=nothing,
        snapshot=nothing,
        managedDisk=nothing,
        blobUri=nothing,
        caching=nothing,
        diskSizeGB=nothing,
        storageAccountType=nothing,
        diskEncryptionSet=nothing,
    )

    - lun::Int64 : Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and therefore must be unique for each data disk attached to a VM.
    - snapshot::SubResource
    - managedDisk::SubResource
    - blobUri::String : The Virtual Hard Disk.
    - caching::String : Specifies the caching requirements. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; **None** &lt;br&gt;&lt;br&gt; **ReadOnly** &lt;br&gt;&lt;br&gt; **ReadWrite** &lt;br&gt;&lt;br&gt; Default: **None for Standard storage. ReadOnly for Premium storage**
    - diskSizeGB::Int64 : Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual machine image. &lt;br&gt;&lt;br&gt; This value cannot be larger than 1023 GB
    - storageAccountType::StorageAccountType
    - diskEncryptionSet::DiskEncryptionSetParameters
"""
Base.@kwdef mutable struct ImageDataDisk <: OpenAPI.APIModel
    lun::Union{Nothing, Int64} = nothing
    snapshot = nothing # spec type: Union{ Nothing, SubResource }
    managedDisk = nothing # spec type: Union{ Nothing, SubResource }
    blobUri::Union{Nothing, String} = nothing
    caching::Union{Nothing, String} = nothing
    diskSizeGB::Union{Nothing, Int64} = nothing
    storageAccountType = nothing # spec type: Union{ Nothing, StorageAccountType }
    diskEncryptionSet = nothing # spec type: Union{ Nothing, DiskEncryptionSetParameters }

    function ImageDataDisk(lun, snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
        OpenAPI.validate_property(ImageDataDisk, Symbol("lun"), lun)
        OpenAPI.validate_property(ImageDataDisk, Symbol("snapshot"), snapshot)
        OpenAPI.validate_property(ImageDataDisk, Symbol("managedDisk"), managedDisk)
        OpenAPI.validate_property(ImageDataDisk, Symbol("blobUri"), blobUri)
        OpenAPI.validate_property(ImageDataDisk, Symbol("caching"), caching)
        OpenAPI.validate_property(ImageDataDisk, Symbol("diskSizeGB"), diskSizeGB)
        OpenAPI.validate_property(ImageDataDisk, Symbol("storageAccountType"), storageAccountType)
        OpenAPI.validate_property(ImageDataDisk, Symbol("diskEncryptionSet"), diskEncryptionSet)
        return new(lun, snapshot, managedDisk, blobUri, caching, diskSizeGB, storageAccountType, diskEncryptionSet, )
    end
end # type ImageDataDisk

const _property_types_ImageDataDisk = Dict{Symbol,String}(Symbol("lun")=>"Int64", Symbol("snapshot")=>"SubResource", Symbol("managedDisk")=>"SubResource", Symbol("blobUri")=>"String", Symbol("caching")=>"String", Symbol("diskSizeGB")=>"Int64", Symbol("storageAccountType")=>"StorageAccountType", Symbol("diskEncryptionSet")=>"DiskEncryptionSetParameters", )
OpenAPI.property_type(::Type{ ImageDataDisk }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageDataDisk[name]))}

function check_required(o::ImageDataDisk)
    o.lun === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ImageDataDisk }, name::Symbol, val)
    if name === Symbol("lun")
        OpenAPI.validate_param(name, "ImageDataDisk", :format, val, "int32")
    end
    if name === Symbol("caching")
        OpenAPI.validate_param(name, "ImageDataDisk", :enum, val, ["None", "ReadOnly", "ReadWrite"])
    end
    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "ImageDataDisk", :format, val, "int32")
    end
end
