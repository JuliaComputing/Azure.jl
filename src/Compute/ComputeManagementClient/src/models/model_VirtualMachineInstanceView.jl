# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineInstanceView
The instance view of a virtual machine.

    VirtualMachineInstanceView(;
        platformUpdateDomain=nothing,
        platformFaultDomain=nothing,
        computerName=nothing,
        osName=nothing,
        osVersion=nothing,
        hyperVGeneration=nothing,
        rdpThumbPrint=nothing,
        vmAgent=nothing,
        maintenanceRedeployStatus=nothing,
        disks=nothing,
        extensions=nothing,
        vmHealth=nothing,
        bootDiagnostics=nothing,
        assignedHost=nothing,
        statuses=nothing,
        patchStatus=nothing,
    )

    - platformUpdateDomain::Int64 : Specifies the update domain of the virtual machine.
    - platformFaultDomain::Int64 : Specifies the fault domain of the virtual machine.
    - computerName::String : The computer name assigned to the virtual machine.
    - osName::String : The Operating System running on the virtual machine.
    - osVersion::String : The version of Operating System running on the virtual machine.
    - hyperVGeneration::String : Specifies the HyperVGeneration Type associated with a resource
    - rdpThumbPrint::String : The Remote desktop certificate thumbprint.
    - vmAgent::VirtualMachineAgentInstanceView
    - maintenanceRedeployStatus::MaintenanceRedeployStatus
    - disks::Vector{DiskInstanceView} : The virtual machine disk information.
    - extensions::Vector{VirtualMachineExtensionInstanceView} : The extensions information.
    - vmHealth::VirtualMachineHealthStatus
    - bootDiagnostics::BootDiagnosticsInstanceView
    - assignedHost::String : Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when the virtual machine is associated with a dedicated host group that has automatic placement enabled. &lt;br&gt;&lt;br&gt;Minimum api-version: 2020-06-01.
    - statuses::Vector{InstanceViewStatus} : The resource status information.
    - patchStatus::VirtualMachinePatchStatus
"""
Base.@kwdef mutable struct VirtualMachineInstanceView <: OpenAPI.APIModel
    platformUpdateDomain::Union{Nothing, Int64} = nothing
    platformFaultDomain::Union{Nothing, Int64} = nothing
    computerName::Union{Nothing, String} = nothing
    osName::Union{Nothing, String} = nothing
    osVersion::Union{Nothing, String} = nothing
    hyperVGeneration::Union{Nothing, String} = nothing
    rdpThumbPrint::Union{Nothing, String} = nothing
    vmAgent = nothing # spec type: Union{ Nothing, VirtualMachineAgentInstanceView }
    maintenanceRedeployStatus = nothing # spec type: Union{ Nothing, MaintenanceRedeployStatus }
    disks::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DiskInstanceView} }
    extensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{VirtualMachineExtensionInstanceView} }
    vmHealth = nothing # spec type: Union{ Nothing, VirtualMachineHealthStatus }
    bootDiagnostics = nothing # spec type: Union{ Nothing, BootDiagnosticsInstanceView }
    assignedHost::Union{Nothing, String} = nothing
    statuses::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{InstanceViewStatus} }
    patchStatus = nothing # spec type: Union{ Nothing, VirtualMachinePatchStatus }

    function VirtualMachineInstanceView(platformUpdateDomain, platformFaultDomain, computerName, osName, osVersion, hyperVGeneration, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, extensions, vmHealth, bootDiagnostics, assignedHost, statuses, patchStatus, )
        o = new(platformUpdateDomain, platformFaultDomain, computerName, osName, osVersion, hyperVGeneration, rdpThumbPrint, vmAgent, maintenanceRedeployStatus, disks, extensions, vmHealth, bootDiagnostics, assignedHost, statuses, patchStatus, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type VirtualMachineInstanceView

const _property_types_VirtualMachineInstanceView = Dict{Symbol,String}(Symbol("platformUpdateDomain")=>"Int64", Symbol("platformFaultDomain")=>"Int64", Symbol("computerName")=>"String", Symbol("osName")=>"String", Symbol("osVersion")=>"String", Symbol("hyperVGeneration")=>"String", Symbol("rdpThumbPrint")=>"String", Symbol("vmAgent")=>"VirtualMachineAgentInstanceView", Symbol("maintenanceRedeployStatus")=>"MaintenanceRedeployStatus", Symbol("disks")=>"Vector{DiskInstanceView}", Symbol("extensions")=>"Vector{VirtualMachineExtensionInstanceView}", Symbol("vmHealth")=>"VirtualMachineHealthStatus", Symbol("bootDiagnostics")=>"BootDiagnosticsInstanceView", Symbol("assignedHost")=>"String", Symbol("statuses")=>"Vector{InstanceViewStatus}", Symbol("patchStatus")=>"VirtualMachinePatchStatus", )
OpenAPI.property_type(::Type{ VirtualMachineInstanceView }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineInstanceView[name]))}

function OpenAPI.check_required(o::VirtualMachineInstanceView)
    true
end

function OpenAPI.validate_properties(o::VirtualMachineInstanceView)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("platformUpdateDomain"), o.platformUpdateDomain)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("platformFaultDomain"), o.platformFaultDomain)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("computerName"), o.computerName)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("osName"), o.osName)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("osVersion"), o.osVersion)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("hyperVGeneration"), o.hyperVGeneration)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("rdpThumbPrint"), o.rdpThumbPrint)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("vmAgent"), o.vmAgent)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("maintenanceRedeployStatus"), o.maintenanceRedeployStatus)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("disks"), o.disks)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("extensions"), o.extensions)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("vmHealth"), o.vmHealth)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("bootDiagnostics"), o.bootDiagnostics)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("assignedHost"), o.assignedHost)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("statuses"), o.statuses)
    OpenAPI.validate_property(VirtualMachineInstanceView, Symbol("patchStatus"), o.patchStatus)
end

function OpenAPI.validate_property(::Type{ VirtualMachineInstanceView }, name::Symbol, val)

    if name === Symbol("platformUpdateDomain")
        OpenAPI.validate_param(name, "VirtualMachineInstanceView", :format, val, "int32")
    end

    if name === Symbol("platformFaultDomain")
        OpenAPI.validate_param(name, "VirtualMachineInstanceView", :format, val, "int32")
    end




    if name === Symbol("hyperVGeneration")
        OpenAPI.validate_param(name, "VirtualMachineInstanceView", :enum, val, ["V1", "V2"])
    end











end
