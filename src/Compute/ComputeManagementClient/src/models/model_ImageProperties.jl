# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ImageProperties
Describes the properties of an Image.

    ImageProperties(;
        sourceVirtualMachine=nothing,
        storageProfile=nothing,
        provisioningState=nothing,
        hyperVGeneration=nothing,
    )

    - sourceVirtualMachine::SubResource
    - storageProfile::ImageStorageProfile
    - provisioningState::String : The provisioning state.
    - hyperVGeneration::HyperVGenerationType
"""
Base.@kwdef mutable struct ImageProperties <: OpenAPI.APIModel
    sourceVirtualMachine = nothing # spec type: Union{ Nothing, SubResource }
    storageProfile = nothing # spec type: Union{ Nothing, ImageStorageProfile }
    provisioningState::Union{Nothing, String} = nothing
    hyperVGeneration = nothing # spec type: Union{ Nothing, HyperVGenerationType }

    function ImageProperties(sourceVirtualMachine, storageProfile, provisioningState, hyperVGeneration, )
        OpenAPI.validate_property(ImageProperties, Symbol("sourceVirtualMachine"), sourceVirtualMachine)
        OpenAPI.validate_property(ImageProperties, Symbol("storageProfile"), storageProfile)
        OpenAPI.validate_property(ImageProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(ImageProperties, Symbol("hyperVGeneration"), hyperVGeneration)
        return new(sourceVirtualMachine, storageProfile, provisioningState, hyperVGeneration, )
    end
end # type ImageProperties

const _property_types_ImageProperties = Dict{Symbol,String}(Symbol("sourceVirtualMachine")=>"SubResource", Symbol("storageProfile")=>"ImageStorageProfile", Symbol("provisioningState")=>"String", Symbol("hyperVGeneration")=>"HyperVGenerationType", )
OpenAPI.property_type(::Type{ ImageProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ImageProperties[name]))}

function check_required(o::ImageProperties)
    true
end

function OpenAPI.validate_property(::Type{ ImageProperties }, name::Symbol, val)
end
