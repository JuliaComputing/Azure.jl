# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""VirtualMachineScaleSetVMProfile
Describes a virtual machine scale set virtual machine profile.

    VirtualMachineScaleSetVMProfile(;
        osProfile=nothing,
        storageProfile=nothing,
        networkProfile=nothing,
        securityProfile=nothing,
        diagnosticsProfile=nothing,
        extensionProfile=nothing,
        licenseType=nothing,
        priority=nothing,
        evictionPolicy=nothing,
        billingProfile=nothing,
        scheduledEventsProfile=nothing,
    )

    - osProfile::VirtualMachineScaleSetOSProfile
    - storageProfile::VirtualMachineScaleSetStorageProfile
    - networkProfile::VirtualMachineScaleSetNetworkProfile
    - securityProfile::SecurityProfile
    - diagnosticsProfile::DiagnosticsProfile
    - extensionProfile::VirtualMachineScaleSetExtensionProfile
    - licenseType::String : Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc&#x3D;%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
    - priority::Priority
    - evictionPolicy::EvictionPolicy
    - billingProfile::BillingProfile
    - scheduledEventsProfile::ScheduledEventsProfile
"""
Base.@kwdef mutable struct VirtualMachineScaleSetVMProfile <: OpenAPI.APIModel
    osProfile = nothing # spec type: Union{ Nothing, VirtualMachineScaleSetOSProfile }
    storageProfile = nothing # spec type: Union{ Nothing, VirtualMachineScaleSetStorageProfile }
    networkProfile = nothing # spec type: Union{ Nothing, VirtualMachineScaleSetNetworkProfile }
    securityProfile = nothing # spec type: Union{ Nothing, SecurityProfile }
    diagnosticsProfile = nothing # spec type: Union{ Nothing, DiagnosticsProfile }
    extensionProfile = nothing # spec type: Union{ Nothing, VirtualMachineScaleSetExtensionProfile }
    licenseType::Union{Nothing, String} = nothing
    priority = nothing # spec type: Union{ Nothing, Priority }
    evictionPolicy = nothing # spec type: Union{ Nothing, EvictionPolicy }
    billingProfile = nothing # spec type: Union{ Nothing, BillingProfile }
    scheduledEventsProfile = nothing # spec type: Union{ Nothing, ScheduledEventsProfile }

    function VirtualMachineScaleSetVMProfile(osProfile, storageProfile, networkProfile, securityProfile, diagnosticsProfile, extensionProfile, licenseType, priority, evictionPolicy, billingProfile, scheduledEventsProfile, )
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("osProfile"), osProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("storageProfile"), storageProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("networkProfile"), networkProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("securityProfile"), securityProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("diagnosticsProfile"), diagnosticsProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("extensionProfile"), extensionProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("licenseType"), licenseType)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("priority"), priority)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("evictionPolicy"), evictionPolicy)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("billingProfile"), billingProfile)
        OpenAPI.validate_property(VirtualMachineScaleSetVMProfile, Symbol("scheduledEventsProfile"), scheduledEventsProfile)
        return new(osProfile, storageProfile, networkProfile, securityProfile, diagnosticsProfile, extensionProfile, licenseType, priority, evictionPolicy, billingProfile, scheduledEventsProfile, )
    end
end # type VirtualMachineScaleSetVMProfile

const _property_types_VirtualMachineScaleSetVMProfile = Dict{Symbol,String}(Symbol("osProfile")=>"VirtualMachineScaleSetOSProfile", Symbol("storageProfile")=>"VirtualMachineScaleSetStorageProfile", Symbol("networkProfile")=>"VirtualMachineScaleSetNetworkProfile", Symbol("securityProfile")=>"SecurityProfile", Symbol("diagnosticsProfile")=>"DiagnosticsProfile", Symbol("extensionProfile")=>"VirtualMachineScaleSetExtensionProfile", Symbol("licenseType")=>"String", Symbol("priority")=>"Priority", Symbol("evictionPolicy")=>"EvictionPolicy", Symbol("billingProfile")=>"BillingProfile", Symbol("scheduledEventsProfile")=>"ScheduledEventsProfile", )
OpenAPI.property_type(::Type{ VirtualMachineScaleSetVMProfile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_VirtualMachineScaleSetVMProfile[name]))}

function check_required(o::VirtualMachineScaleSetVMProfile)
    true
end

function OpenAPI.validate_property(::Type{ VirtualMachineScaleSetVMProfile }, name::Symbol, val)
end
