# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DedicatedHostProperties
Properties of the dedicated host.

    DedicatedHostProperties(;
        platformFaultDomain=nothing,
        autoReplaceOnFailure=nothing,
        hostId=nothing,
        virtualMachines=nothing,
        licenseType=nothing,
        provisioningTime=nothing,
        provisioningState=nothing,
        instanceView=nothing,
    )

    - platformFaultDomain::Int64 : Fault domain of the dedicated host within a dedicated host group.
    - autoReplaceOnFailure::Bool : Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to &#39;true&#39; when not provided.
    - hostId::String : A unique id generated and assigned to the dedicated host by the platform. &lt;br&gt;&lt;br&gt; Does not change throughout the lifetime of the host.
    - virtualMachines::Vector{SubResourceReadOnly} : A list of references to all virtual machines in the Dedicated Host.
    - licenseType::DedicatedHostLicenseType
    - provisioningTime::ZonedDateTime : The date when the host was first provisioned.
    - provisioningState::String : The provisioning state, which only appears in the response.
    - instanceView::DedicatedHostInstanceView
"""
Base.@kwdef mutable struct DedicatedHostProperties <: OpenAPI.APIModel
    platformFaultDomain::Union{Nothing, Int64} = nothing
    autoReplaceOnFailure::Union{Nothing, Bool} = nothing
    hostId::Union{Nothing, String} = nothing
    virtualMachines::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SubResourceReadOnly} }
    licenseType = nothing # spec type: Union{ Nothing, DedicatedHostLicenseType }
    provisioningTime::Union{Nothing, ZonedDateTime} = nothing
    provisioningState::Union{Nothing, String} = nothing
    instanceView = nothing # spec type: Union{ Nothing, DedicatedHostInstanceView }

    function DedicatedHostProperties(platformFaultDomain, autoReplaceOnFailure, hostId, virtualMachines, licenseType, provisioningTime, provisioningState, instanceView, )
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("platformFaultDomain"), platformFaultDomain)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("autoReplaceOnFailure"), autoReplaceOnFailure)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("hostId"), hostId)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("virtualMachines"), virtualMachines)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("licenseType"), licenseType)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("provisioningTime"), provisioningTime)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(DedicatedHostProperties, Symbol("instanceView"), instanceView)
        return new(platformFaultDomain, autoReplaceOnFailure, hostId, virtualMachines, licenseType, provisioningTime, provisioningState, instanceView, )
    end
end # type DedicatedHostProperties

const _property_types_DedicatedHostProperties = Dict{Symbol,String}(Symbol("platformFaultDomain")=>"Int64", Symbol("autoReplaceOnFailure")=>"Bool", Symbol("hostId")=>"String", Symbol("virtualMachines")=>"Vector{SubResourceReadOnly}", Symbol("licenseType")=>"DedicatedHostLicenseType", Symbol("provisioningTime")=>"ZonedDateTime", Symbol("provisioningState")=>"String", Symbol("instanceView")=>"DedicatedHostInstanceView", )
OpenAPI.property_type(::Type{ DedicatedHostProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DedicatedHostProperties[name]))}

function check_required(o::DedicatedHostProperties)
    true
end

function OpenAPI.validate_property(::Type{ DedicatedHostProperties }, name::Symbol, val)
    if name === Symbol("platformFaultDomain")
        OpenAPI.validate_param(name, "DedicatedHostProperties", :format, val, "int32")
    end
    if name === Symbol("platformFaultDomain")
        OpenAPI.validate_param(name, "DedicatedHostProperties", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "DedicatedHostProperties", :minimum, val, 0, false)
    end
    if name === Symbol("provisioningTime")
        OpenAPI.validate_param(name, "DedicatedHostProperties", :format, val, "date-time")
    end
end
