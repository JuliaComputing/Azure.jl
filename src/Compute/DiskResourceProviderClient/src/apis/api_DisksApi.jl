# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DisksApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DisksApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DisksApi }) = "https://management.azure.com"

const _returntypes_disks_create_or_update_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Disk,
    Regex("^" * replace("202", "x"=>".") * "\$") => Disk,
)

function _oacinternal_disks_create_or_update(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::Disk; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_disks_create_or_update_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}", ["azure_auth", ], disk)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)
- disk::Disk (required)

Return: Disk, OpenAPI.Clients.ApiResponse
"""
function disks_create_or_update(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::Disk; _mediaType=nothing)
    _ctx = _oacinternal_disks_create_or_update(_api, subscription_id, resource_group_name, disk_name, api_version, disk; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_create_or_update(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::Disk; _mediaType=nothing)
    _ctx = _oacinternal_disks_create_or_update(_api, subscription_id, resource_group_name, disk_name, api_version, disk; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_delete_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_disks_delete(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_disks_delete_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disks_delete(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_delete(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_delete(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_delete(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_get_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Disk,
)

function _oacinternal_disks_get(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disks_get_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets information about a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)

Return: Disk, OpenAPI.Clients.ApiResponse
"""
function disks_get(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_get(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_get(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_get(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_grant_access_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AccessUri,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_disks_grant_access(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, grant_access_data::GrantAccessData; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_disks_grant_access_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/beginGetAccess", ["azure_auth", ], grant_access_data)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Grants access to a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)
- grant_access_data::GrantAccessData (required)

Return: AccessUri, OpenAPI.Clients.ApiResponse
"""
function disks_grant_access(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, grant_access_data::GrantAccessData; _mediaType=nothing)
    _ctx = _oacinternal_disks_grant_access(_api, subscription_id, resource_group_name, disk_name, api_version, grant_access_data; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_grant_access(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, grant_access_data::GrantAccessData; _mediaType=nothing)
    _ctx = _oacinternal_disks_grant_access(_api, subscription_id, resource_group_name, disk_name, api_version, grant_access_data; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_list_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskList,
)

function _oacinternal_disks_list(_api::DisksApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disks_list_DisksApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/disks", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disks under a subscription.

Params:
- subscription_id::String (required)
- api_version::String (required)

Return: DiskList, OpenAPI.Clients.ApiResponse
"""
function disks_list(_api::DisksApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_list(_api::DisksApi, response_stream::Channel, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_list_by_resource_group_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskList,
)

function _oacinternal_disks_list_by_resource_group(_api::DisksApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disks_list_by_resource_group_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disks under a resource group.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- api_version::String (required)

Return: DiskList, OpenAPI.Clients.ApiResponse
"""
function disks_list_by_resource_group(_api::DisksApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_list_by_resource_group(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_revoke_access_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
)

function _oacinternal_disks_revoke_access(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_disks_revoke_access_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}/endGetAccess", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, [])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Revokes access to a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disks_revoke_access(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_revoke_access(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_revoke_access(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disks_revoke_access(_api, subscription_id, resource_group_name, disk_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disks_update_DisksApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Disk,
    Regex("^" * replace("202", "x"=>".") * "\$") => Disk,
)

function _oacinternal_disks_update(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::DiskUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_disks_update_DisksApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/disks/{diskName}", ["azure_auth", ], disk)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskName", disk_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version; style="", is_explode=false)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates (patches) a disk.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_name::String (required)
- api_version::String (required)
- disk::DiskUpdate (required)

Return: Disk, OpenAPI.Clients.ApiResponse
"""
function disks_update(_api::DisksApi, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::DiskUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disks_update(_api, subscription_id, resource_group_name, disk_name, api_version, disk; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disks_update(_api::DisksApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_name::String, api_version::String, disk::DiskUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disks_update(_api, subscription_id, resource_group_name, disk_name, api_version, disk; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export disks_create_or_update
export disks_delete
export disks_get
export disks_grant_access
export disks_list
export disks_list_by_resource_group
export disks_revoke_access
export disks_update
