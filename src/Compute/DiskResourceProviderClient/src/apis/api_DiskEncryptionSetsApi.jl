# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DiskEncryptionSetsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DiskEncryptionSetsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DiskEncryptionSetsApi }) = "https://management.azure.com"

const _returntypes_disk_encryption_sets_create_or_update_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskEncryptionSet,
    Regex("^" * replace("202", "x"=>".") * "\$") => DiskEncryptionSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_create_or_update(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSet; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_disk_encryption_sets_create_or_update_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}", ["azure_auth", ], disk_encryption_set)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskEncryptionSetName", disk_encryption_set_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a disk encryption set

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_encryption_set_name::String (required)
- api_version::String (required)
- disk_encryption_set::DiskEncryptionSet (required)

Return: DiskEncryptionSet, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_create_or_update(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSet; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_create_or_update(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version, disk_encryption_set; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_create_or_update(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSet; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_create_or_update(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version, disk_encryption_set; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_encryption_sets_delete_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_delete(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_disk_encryption_sets_delete_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskEncryptionSetName", disk_encryption_set_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a disk encryption set.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_encryption_set_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_delete(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_delete(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_delete(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_delete(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_encryption_sets_get_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskEncryptionSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_get(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_encryption_sets_get_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskEncryptionSetName", disk_encryption_set_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets information about a disk encryption set.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_encryption_set_name::String (required)
- api_version::String (required)

Return: DiskEncryptionSet, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_get(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_get(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_get(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_get(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_encryption_sets_list_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskEncryptionSetList,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_list(_api::DiskEncryptionSetsApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_encryption_sets_list_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskEncryptionSets", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disk encryption sets under a subscription.

Params:
- subscription_id::String (required)
- api_version::String (required)

Return: DiskEncryptionSetList, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_list(_api::DiskEncryptionSetsApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_list(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_encryption_sets_list_by_resource_group_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskEncryptionSetList,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_list_by_resource_group(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_encryption_sets_list_by_resource_group_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disk encryption sets under a resource group.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- api_version::String (required)

Return: DiskEncryptionSetList, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_list_by_resource_group(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_list_by_resource_group(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_encryption_sets_update_DiskEncryptionSetsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskEncryptionSet,
    Regex("^" * replace("202", "x"=>".") * "\$") => DiskEncryptionSet,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_encryption_sets_update(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSetUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_disk_encryption_sets_update_DiskEncryptionSetsApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}", ["azure_auth", ], disk_encryption_set)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskEncryptionSetName", disk_encryption_set_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates (patches) a disk encryption set.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_encryption_set_name::String (required)
- api_version::String (required)
- disk_encryption_set::DiskEncryptionSetUpdate (required)

Return: DiskEncryptionSet, OpenAPI.Clients.ApiResponse
"""
function disk_encryption_sets_update(_api::DiskEncryptionSetsApi, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSetUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_update(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version, disk_encryption_set; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_encryption_sets_update(_api::DiskEncryptionSetsApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_encryption_set_name::String, api_version::String, disk_encryption_set::DiskEncryptionSetUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disk_encryption_sets_update(_api, subscription_id, resource_group_name, disk_encryption_set_name, api_version, disk_encryption_set; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export disk_encryption_sets_create_or_update
export disk_encryption_sets_delete
export disk_encryption_sets_get
export disk_encryption_sets_list
export disk_encryption_sets_list_by_resource_group
export disk_encryption_sets_update
