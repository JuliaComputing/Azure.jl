# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct DiskAccessesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `DiskAccessesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ DiskAccessesApi }) = "https://management.azure.com"

const _returntypes_disk_accesses_create_or_update_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskAccess,
    Regex("^" * replace("202", "x"=>".") * "\$") => DiskAccess,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_create_or_update(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccess; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_disk_accesses_create_or_update_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}", ["azure_auth", ], disk_access)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskAccessName", disk_access_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates or updates a disk access resource

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_access_name::String (required)
- api_version::String (required)
- disk_access::DiskAccess (required)

Return: DiskAccess, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_create_or_update(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccess; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_create_or_update(_api, subscription_id, resource_group_name, disk_access_name, api_version, disk_access; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_create_or_update(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccess; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_create_or_update(_api, subscription_id, resource_group_name, disk_access_name, api_version, disk_access; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_delete_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("202", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_delete(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_disk_accesses_delete_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskAccessName", disk_access_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Deletes a disk access resource.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_access_name::String (required)
- api_version::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_delete(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_delete(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_delete(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_delete(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_get_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskAccess,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_get(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_accesses_get_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskAccessName", disk_access_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets information about a disk access resource.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_access_name::String (required)
- api_version::String (required)

Return: DiskAccess, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_get(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_get(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_get(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_get(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_get_private_link_resources_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => PrivateLinkResourceListResult,
)

function _oacinternal_disk_accesses_get_private_link_resources(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_accesses_get_private_link_resources_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}/privateLinkResources", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskAccessName", disk_access_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Gets the private link resources possible under disk access resource

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_access_name::String (required)
- api_version::String (required)

Return: PrivateLinkResourceListResult, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_get_private_link_resources(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_get_private_link_resources(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_get_private_link_resources(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_get_private_link_resources(_api, subscription_id, resource_group_name, disk_access_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_list_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskAccessList,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_list(_api::DiskAccessesApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_accesses_list_DiskAccessesApi, "/subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskAccesses", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disk access resources under a subscription.

Params:
- subscription_id::String (required)
- api_version::String (required)

Return: DiskAccessList, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_list(_api::DiskAccessesApi, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_list(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_list(_api, subscription_id, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_list_by_resource_group_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskAccessList,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_list_by_resource_group(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_disk_accesses_list_by_resource_group_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses", ["azure_auth", ])
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists all the disk access resources under a resource group.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- api_version::String (required)

Return: DiskAccessList, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_list_by_resource_group(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_list_by_resource_group(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, api_version::String; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_list_by_resource_group(_api, subscription_id, resource_group_name, api_version; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_disk_accesses_update_DiskAccessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DiskAccess,
    Regex("^" * replace("202", "x"=>".") * "\$") => DiskAccess,
    Regex("^" * replace("0", "x"=>".") * "\$") => CloudError,
)

function _oacinternal_disk_accesses_update(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccessUpdate; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PATCH", _returntypes_disk_accesses_update_DiskAccessesApi, "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskAccesses/{diskAccessName}", ["azure_auth", ], disk_access)
    OpenAPI.Clients.set_param(_ctx.path, "subscriptionId", subscription_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "resourceGroupName", resource_group_name)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "diskAccessName", disk_access_name)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "api-version", api_version)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Updates (patches) a disk access resource.

Params:
- subscription_id::String (required)
- resource_group_name::String (required)
- disk_access_name::String (required)
- api_version::String (required)
- disk_access::DiskAccessUpdate (required)

Return: DiskAccess, OpenAPI.Clients.ApiResponse
"""
function disk_accesses_update(_api::DiskAccessesApi, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccessUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_update(_api, subscription_id, resource_group_name, disk_access_name, api_version, disk_access; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function disk_accesses_update(_api::DiskAccessesApi, response_stream::Channel, subscription_id::String, resource_group_name::String, disk_access_name::String, api_version::String, disk_access::DiskAccessUpdate; _mediaType=nothing)
    _ctx = _oacinternal_disk_accesses_update(_api, subscription_id, resource_group_name, disk_access_name, api_version, disk_access; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export disk_accesses_create_or_update
export disk_accesses_delete
export disk_accesses_get
export disk_accesses_get_private_link_resources
export disk_accesses_list
export disk_accesses_list_by_resource_group
export disk_accesses_update
