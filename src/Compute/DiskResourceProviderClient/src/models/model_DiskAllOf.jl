# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Disk_allOf

    DiskAllOf(;
        managedBy=nothing,
        managedByExtended=nothing,
        sku=nothing,
        zones=nothing,
        properties=nothing,
    )

    - managedBy::String : A relative URI containing the ID of the VM that has the disk attached.
    - managedByExtended::Vector{String} : List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
    - sku::DiskSku
    - zones::Vector{String} : The Logical zone list for Disk.
    - properties::DiskProperties
"""
Base.@kwdef mutable struct DiskAllOf <: OpenAPI.APIModel
    managedBy::Union{Nothing, String} = nothing
    managedByExtended::Union{Nothing, Vector{String}} = nothing
    sku = nothing # spec type: Union{ Nothing, DiskSku }
    zones::Union{Nothing, Vector{String}} = nothing
    properties = nothing # spec type: Union{ Nothing, DiskProperties }

    function DiskAllOf(managedBy, managedByExtended, sku, zones, properties, )
        OpenAPI.validate_property(DiskAllOf, Symbol("managedBy"), managedBy)
        OpenAPI.validate_property(DiskAllOf, Symbol("managedByExtended"), managedByExtended)
        OpenAPI.validate_property(DiskAllOf, Symbol("sku"), sku)
        OpenAPI.validate_property(DiskAllOf, Symbol("zones"), zones)
        OpenAPI.validate_property(DiskAllOf, Symbol("properties"), properties)
        return new(managedBy, managedByExtended, sku, zones, properties, )
    end
end # type DiskAllOf

const _property_types_DiskAllOf = Dict{Symbol,String}(Symbol("managedBy")=>"String", Symbol("managedByExtended")=>"Vector{String}", Symbol("sku")=>"DiskSku", Symbol("zones")=>"Vector{String}", Symbol("properties")=>"DiskProperties", )
OpenAPI.property_type(::Type{ DiskAllOf }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskAllOf[name]))}

function check_required(o::DiskAllOf)
    true
end

function OpenAPI.validate_property(::Type{ DiskAllOf }, name::Symbol, val)
end
