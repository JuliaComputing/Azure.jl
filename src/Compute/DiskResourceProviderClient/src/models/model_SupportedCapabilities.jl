# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SupportedCapabilities
List of supported capabilities persisted on the disk resource for VM use.

    SupportedCapabilities(;
        diskControllerTypes=nothing,
        acceleratedNetwork=nothing,
        architecture=nothing,
    )

    - diskControllerTypes::String : The disk controllers that an OS disk supports. If set it can be SCSI or SCSI, NVME or NVME, SCSI.
    - acceleratedNetwork::Bool : True if the image from which the OS disk is created supports accelerated networking.
    - architecture::String : CPU architecture supported by an OS disk.
"""
Base.@kwdef mutable struct SupportedCapabilities <: OpenAPI.APIModel
    diskControllerTypes::Union{Nothing, String} = nothing
    acceleratedNetwork::Union{Nothing, Bool} = nothing
    architecture::Union{Nothing, String} = nothing

    function SupportedCapabilities(diskControllerTypes, acceleratedNetwork, architecture, )
        o = new(diskControllerTypes, acceleratedNetwork, architecture, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type SupportedCapabilities

const _property_types_SupportedCapabilities = Dict{Symbol,String}(Symbol("diskControllerTypes")=>"String", Symbol("acceleratedNetwork")=>"Bool", Symbol("architecture")=>"String", )
OpenAPI.property_type(::Type{ SupportedCapabilities }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SupportedCapabilities[name]))}

function OpenAPI.check_required(o::SupportedCapabilities)
    true
end

function OpenAPI.validate_properties(o::SupportedCapabilities)
    OpenAPI.validate_property(SupportedCapabilities, Symbol("diskControllerTypes"), o.diskControllerTypes)
    OpenAPI.validate_property(SupportedCapabilities, Symbol("acceleratedNetwork"), o.acceleratedNetwork)
    OpenAPI.validate_property(SupportedCapabilities, Symbol("architecture"), o.architecture)
end

function OpenAPI.validate_property(::Type{ SupportedCapabilities }, name::Symbol, val)



    if name === Symbol("architecture")
        OpenAPI.validate_param(name, "SupportedCapabilities", :enum, val, ["x64", "Arm64"])
    end

end
