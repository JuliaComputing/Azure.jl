# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionSetProperties

    EncryptionSetProperties(;
        encryptionType=nothing,
        activeKey=nothing,
        previousKeys=nothing,
        provisioningState=nothing,
    )

    - encryptionType::EncryptionType
    - activeKey::KeyVaultAndKeyReference
    - previousKeys::Vector{KeyVaultAndKeyReference} : A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
    - provisioningState::String : The disk encryption set provisioning state.
"""
Base.@kwdef mutable struct EncryptionSetProperties <: OpenAPI.APIModel
    encryptionType = nothing # spec type: Union{ Nothing, EncryptionType }
    activeKey = nothing # spec type: Union{ Nothing, KeyVaultAndKeyReference }
    previousKeys::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{KeyVaultAndKeyReference} }
    provisioningState::Union{Nothing, String} = nothing

    function EncryptionSetProperties(encryptionType, activeKey, previousKeys, provisioningState, )
        OpenAPI.validate_property(EncryptionSetProperties, Symbol("encryptionType"), encryptionType)
        OpenAPI.validate_property(EncryptionSetProperties, Symbol("activeKey"), activeKey)
        OpenAPI.validate_property(EncryptionSetProperties, Symbol("previousKeys"), previousKeys)
        OpenAPI.validate_property(EncryptionSetProperties, Symbol("provisioningState"), provisioningState)
        return new(encryptionType, activeKey, previousKeys, provisioningState, )
    end
end # type EncryptionSetProperties

const _property_types_EncryptionSetProperties = Dict{Symbol,String}(Symbol("encryptionType")=>"EncryptionType", Symbol("activeKey")=>"KeyVaultAndKeyReference", Symbol("previousKeys")=>"Vector{KeyVaultAndKeyReference}", Symbol("provisioningState")=>"String", )
OpenAPI.property_type(::Type{ EncryptionSetProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionSetProperties[name]))}

function check_required(o::EncryptionSetProperties)
    true
end

function OpenAPI.validate_property(::Type{ EncryptionSetProperties }, name::Symbol, val)
end
