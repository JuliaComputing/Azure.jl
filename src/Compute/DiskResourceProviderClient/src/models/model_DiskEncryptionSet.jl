# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiskEncryptionSet
disk encryption set resource.

    DiskEncryptionSet(;
        identity=nothing,
        properties=nothing,
        id=nothing,
        name=nothing,
        type=nothing,
        location=nothing,
        tags=nothing,
    )

    - identity::EncryptionSetIdentity
    - properties::EncryptionSetProperties
    - id::String : Resource Id
    - name::String : Resource name
    - type::String : Resource type
    - location::String : Resource location
    - tags::Dict{String, String} : Resource tags
"""
Base.@kwdef mutable struct DiskEncryptionSet <: OpenAPI.APIModel
    identity = nothing # spec type: Union{ Nothing, EncryptionSetIdentity }
    properties = nothing # spec type: Union{ Nothing, EncryptionSetProperties }
    id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    location::Union{Nothing, String} = nothing
    tags::Union{Nothing, Dict{String, String}} = nothing

    function DiskEncryptionSet(identity, properties, id, name, type, location, tags, )
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("identity"), identity)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("properties"), properties)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("id"), id)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("name"), name)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("type"), type)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("location"), location)
        OpenAPI.validate_property(DiskEncryptionSet, Symbol("tags"), tags)
        return new(identity, properties, id, name, type, location, tags, )
    end
end # type DiskEncryptionSet

const _property_types_DiskEncryptionSet = Dict{Symbol,String}(Symbol("identity")=>"EncryptionSetIdentity", Symbol("properties")=>"EncryptionSetProperties", Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", )
OpenAPI.property_type(::Type{ DiskEncryptionSet }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskEncryptionSet[name]))}

function check_required(o::DiskEncryptionSet)
    o.location === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DiskEncryptionSet }, name::Symbol, val)
end
