# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiskProperties
Disk resource properties.

    DiskProperties(;
        timeCreated=nothing,
        osType=nothing,
        hyperVGeneration=nothing,
        purchasePlan=nothing,
        supportedCapabilities=nothing,
        creationData=nothing,
        diskSizeGB=nothing,
        diskSizeBytes=nothing,
        uniqueId=nothing,
        encryptionSettingsCollection=nothing,
        provisioningState=nothing,
        diskIOPSReadWrite=nothing,
        diskMBpsReadWrite=nothing,
        diskIOPSReadOnly=nothing,
        diskMBpsReadOnly=nothing,
        diskState=nothing,
        encryption=nothing,
        maxShares=nothing,
        shareInfo=nothing,
        networkAccessPolicy=nothing,
        diskAccessId=nothing,
        burstingEnabledTime=nothing,
        tier=nothing,
        burstingEnabled=nothing,
        propertyUpdatesInProgress=nothing,
        supportsHibernation=nothing,
        securityProfile=nothing,
        completionPercent=nothing,
        publicNetworkAccess=nothing,
        dataAccessAuthMode=nothing,
        optimizedForFrequentAttach=nothing,
        LastOwnershipUpdateTime=nothing,
    )

    - timeCreated::ZonedDateTime : The time when the disk was created.
    - osType::String : The Operating System type.
    - hyperVGeneration::String : The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
    - purchasePlan::PurchasePlan
    - supportedCapabilities::SupportedCapabilities
    - creationData::CreationData
    - diskSizeGB::Int64 : If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
    - diskSizeBytes::Int64 : The size of the disk in bytes. This field is read only.
    - uniqueId::String : Unique Guid identifying the resource.
    - encryptionSettingsCollection::EncryptionSettingsCollection
    - provisioningState::String : The disk provisioning state.
    - diskIOPSReadWrite::Int64 : The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
    - diskMBpsReadWrite::Int64 : The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
    - diskIOPSReadOnly::Int64 : The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
    - diskMBpsReadOnly::Int64 : The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
    - diskState::DiskState
    - encryption::Encryption
    - maxShares::Int64 : The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
    - shareInfo::Vector{ShareInfoElement} : Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than one for disks to allow attaching them to multiple VMs.
    - networkAccessPolicy::NetworkAccessPolicy
    - diskAccessId::String : ARM id of the DiskAccess resource for using private endpoints on disks.
    - burstingEnabledTime::ZonedDateTime : Latest time when bursting was last enabled on a disk.
    - tier::String : Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/. Does not apply to Ultra disks.
    - burstingEnabled::Bool : Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default. Does not apply to Ultra disks.
    - propertyUpdatesInProgress::PropertyUpdatesInProgress
    - supportsHibernation::Bool : Indicates the OS on a disk supports hibernation.
    - securityProfile::DiskSecurityProfile
    - completionPercent::Float64 : Percentage complete for the background copy when a resource is created via the CopyStart operation.
    - publicNetworkAccess::PublicNetworkAccess
    - dataAccessAuthMode::DataAccessAuthMode
    - optimizedForFrequentAttach::Bool : Setting this property to true improves reliability and performance of data disks that are frequently (more than 5 times a day) by detached from one virtual machine and attached to another. This property should not be set for disks that are not detached and attached frequently as it causes the disks to not align with the fault domain of the virtual machine.
    - LastOwnershipUpdateTime::ZonedDateTime : The UTC time when the ownership state of the disk was last changed i.e., the time the disk was last attached or detached from a VM or the time when the VM to which the disk was attached was deallocated or started.
"""
Base.@kwdef mutable struct DiskProperties <: OpenAPI.APIModel
    timeCreated::Union{Nothing, ZonedDateTime} = nothing
    osType::Union{Nothing, String} = nothing
    hyperVGeneration::Union{Nothing, String} = nothing
    purchasePlan = nothing # spec type: Union{ Nothing, PurchasePlan }
    supportedCapabilities = nothing # spec type: Union{ Nothing, SupportedCapabilities }
    creationData = nothing # spec type: Union{ Nothing, CreationData }
    diskSizeGB::Union{Nothing, Int64} = nothing
    diskSizeBytes::Union{Nothing, Int64} = nothing
    uniqueId::Union{Nothing, String} = nothing
    encryptionSettingsCollection = nothing # spec type: Union{ Nothing, EncryptionSettingsCollection }
    provisioningState::Union{Nothing, String} = nothing
    diskIOPSReadWrite::Union{Nothing, Int64} = nothing
    diskMBpsReadWrite::Union{Nothing, Int64} = nothing
    diskIOPSReadOnly::Union{Nothing, Int64} = nothing
    diskMBpsReadOnly::Union{Nothing, Int64} = nothing
    diskState = nothing # spec type: Union{ Nothing, DiskState }
    encryption = nothing # spec type: Union{ Nothing, Encryption }
    maxShares::Union{Nothing, Int64} = nothing
    shareInfo::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ShareInfoElement} }
    networkAccessPolicy = nothing # spec type: Union{ Nothing, NetworkAccessPolicy }
    diskAccessId::Union{Nothing, String} = nothing
    burstingEnabledTime::Union{Nothing, ZonedDateTime} = nothing
    tier::Union{Nothing, String} = nothing
    burstingEnabled::Union{Nothing, Bool} = nothing
    propertyUpdatesInProgress = nothing # spec type: Union{ Nothing, PropertyUpdatesInProgress }
    supportsHibernation::Union{Nothing, Bool} = nothing
    securityProfile = nothing # spec type: Union{ Nothing, DiskSecurityProfile }
    completionPercent::Union{Nothing, Float64} = nothing
    publicNetworkAccess = nothing # spec type: Union{ Nothing, PublicNetworkAccess }
    dataAccessAuthMode = nothing # spec type: Union{ Nothing, DataAccessAuthMode }
    optimizedForFrequentAttach::Union{Nothing, Bool} = nothing
    LastOwnershipUpdateTime::Union{Nothing, ZonedDateTime} = nothing

    function DiskProperties(timeCreated, osType, hyperVGeneration, purchasePlan, supportedCapabilities, creationData, diskSizeGB, diskSizeBytes, uniqueId, encryptionSettingsCollection, provisioningState, diskIOPSReadWrite, diskMBpsReadWrite, diskIOPSReadOnly, diskMBpsReadOnly, diskState, encryption, maxShares, shareInfo, networkAccessPolicy, diskAccessId, burstingEnabledTime, tier, burstingEnabled, propertyUpdatesInProgress, supportsHibernation, securityProfile, completionPercent, publicNetworkAccess, dataAccessAuthMode, optimizedForFrequentAttach, LastOwnershipUpdateTime, )
        o = new(timeCreated, osType, hyperVGeneration, purchasePlan, supportedCapabilities, creationData, diskSizeGB, diskSizeBytes, uniqueId, encryptionSettingsCollection, provisioningState, diskIOPSReadWrite, diskMBpsReadWrite, diskIOPSReadOnly, diskMBpsReadOnly, diskState, encryption, maxShares, shareInfo, networkAccessPolicy, diskAccessId, burstingEnabledTime, tier, burstingEnabled, propertyUpdatesInProgress, supportsHibernation, securityProfile, completionPercent, publicNetworkAccess, dataAccessAuthMode, optimizedForFrequentAttach, LastOwnershipUpdateTime, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type DiskProperties

const _property_types_DiskProperties = Dict{Symbol,String}(Symbol("timeCreated")=>"ZonedDateTime", Symbol("osType")=>"String", Symbol("hyperVGeneration")=>"String", Symbol("purchasePlan")=>"PurchasePlan", Symbol("supportedCapabilities")=>"SupportedCapabilities", Symbol("creationData")=>"CreationData", Symbol("diskSizeGB")=>"Int64", Symbol("diskSizeBytes")=>"Int64", Symbol("uniqueId")=>"String", Symbol("encryptionSettingsCollection")=>"EncryptionSettingsCollection", Symbol("provisioningState")=>"String", Symbol("diskIOPSReadWrite")=>"Int64", Symbol("diskMBpsReadWrite")=>"Int64", Symbol("diskIOPSReadOnly")=>"Int64", Symbol("diskMBpsReadOnly")=>"Int64", Symbol("diskState")=>"DiskState", Symbol("encryption")=>"Encryption", Symbol("maxShares")=>"Int64", Symbol("shareInfo")=>"Vector{ShareInfoElement}", Symbol("networkAccessPolicy")=>"NetworkAccessPolicy", Symbol("diskAccessId")=>"String", Symbol("burstingEnabledTime")=>"ZonedDateTime", Symbol("tier")=>"String", Symbol("burstingEnabled")=>"Bool", Symbol("propertyUpdatesInProgress")=>"PropertyUpdatesInProgress", Symbol("supportsHibernation")=>"Bool", Symbol("securityProfile")=>"DiskSecurityProfile", Symbol("completionPercent")=>"Float64", Symbol("publicNetworkAccess")=>"PublicNetworkAccess", Symbol("dataAccessAuthMode")=>"DataAccessAuthMode", Symbol("optimizedForFrequentAttach")=>"Bool", Symbol("LastOwnershipUpdateTime")=>"ZonedDateTime", )
OpenAPI.property_type(::Type{ DiskProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskProperties[name]))}

function OpenAPI.check_required(o::DiskProperties)
    o.creationData === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::DiskProperties)
    OpenAPI.validate_property(DiskProperties, Symbol("timeCreated"), o.timeCreated)
    OpenAPI.validate_property(DiskProperties, Symbol("osType"), o.osType)
    OpenAPI.validate_property(DiskProperties, Symbol("hyperVGeneration"), o.hyperVGeneration)
    OpenAPI.validate_property(DiskProperties, Symbol("purchasePlan"), o.purchasePlan)
    OpenAPI.validate_property(DiskProperties, Symbol("supportedCapabilities"), o.supportedCapabilities)
    OpenAPI.validate_property(DiskProperties, Symbol("creationData"), o.creationData)
    OpenAPI.validate_property(DiskProperties, Symbol("diskSizeGB"), o.diskSizeGB)
    OpenAPI.validate_property(DiskProperties, Symbol("diskSizeBytes"), o.diskSizeBytes)
    OpenAPI.validate_property(DiskProperties, Symbol("uniqueId"), o.uniqueId)
    OpenAPI.validate_property(DiskProperties, Symbol("encryptionSettingsCollection"), o.encryptionSettingsCollection)
    OpenAPI.validate_property(DiskProperties, Symbol("provisioningState"), o.provisioningState)
    OpenAPI.validate_property(DiskProperties, Symbol("diskIOPSReadWrite"), o.diskIOPSReadWrite)
    OpenAPI.validate_property(DiskProperties, Symbol("diskMBpsReadWrite"), o.diskMBpsReadWrite)
    OpenAPI.validate_property(DiskProperties, Symbol("diskIOPSReadOnly"), o.diskIOPSReadOnly)
    OpenAPI.validate_property(DiskProperties, Symbol("diskMBpsReadOnly"), o.diskMBpsReadOnly)
    OpenAPI.validate_property(DiskProperties, Symbol("diskState"), o.diskState)
    OpenAPI.validate_property(DiskProperties, Symbol("encryption"), o.encryption)
    OpenAPI.validate_property(DiskProperties, Symbol("maxShares"), o.maxShares)
    OpenAPI.validate_property(DiskProperties, Symbol("shareInfo"), o.shareInfo)
    OpenAPI.validate_property(DiskProperties, Symbol("networkAccessPolicy"), o.networkAccessPolicy)
    OpenAPI.validate_property(DiskProperties, Symbol("diskAccessId"), o.diskAccessId)
    OpenAPI.validate_property(DiskProperties, Symbol("burstingEnabledTime"), o.burstingEnabledTime)
    OpenAPI.validate_property(DiskProperties, Symbol("tier"), o.tier)
    OpenAPI.validate_property(DiskProperties, Symbol("burstingEnabled"), o.burstingEnabled)
    OpenAPI.validate_property(DiskProperties, Symbol("propertyUpdatesInProgress"), o.propertyUpdatesInProgress)
    OpenAPI.validate_property(DiskProperties, Symbol("supportsHibernation"), o.supportsHibernation)
    OpenAPI.validate_property(DiskProperties, Symbol("securityProfile"), o.securityProfile)
    OpenAPI.validate_property(DiskProperties, Symbol("completionPercent"), o.completionPercent)
    OpenAPI.validate_property(DiskProperties, Symbol("publicNetworkAccess"), o.publicNetworkAccess)
    OpenAPI.validate_property(DiskProperties, Symbol("dataAccessAuthMode"), o.dataAccessAuthMode)
    OpenAPI.validate_property(DiskProperties, Symbol("optimizedForFrequentAttach"), o.optimizedForFrequentAttach)
    OpenAPI.validate_property(DiskProperties, Symbol("LastOwnershipUpdateTime"), o.LastOwnershipUpdateTime)
end

function OpenAPI.validate_property(::Type{ DiskProperties }, name::Symbol, val)

    if name === Symbol("timeCreated")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "date-time")
    end

    if name === Symbol("osType")
        OpenAPI.validate_param(name, "DiskProperties", :enum, val, ["Windows", "Linux"])
    end


    if name === Symbol("hyperVGeneration")
        OpenAPI.validate_param(name, "DiskProperties", :enum, val, ["V1", "V2"])
    end





    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int32")
    end

    if name === Symbol("diskSizeBytes")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int64")
    end




    if name === Symbol("diskIOPSReadWrite")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int64")
    end

    if name === Symbol("diskMBpsReadWrite")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int64")
    end

    if name === Symbol("diskIOPSReadOnly")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int64")
    end

    if name === Symbol("diskMBpsReadOnly")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int64")
    end



    if name === Symbol("maxShares")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "int32")
    end




    if name === Symbol("burstingEnabledTime")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "date-time")
    end










    if name === Symbol("LastOwnershipUpdateTime")
        OpenAPI.validate_param(name, "DiskProperties", :format, val, "date-time")
    end
end
