# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionSetIdentity
The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used to encrypt disks.

    EncryptionSetIdentity(;
        type=nothing,
        principalId=nothing,
        tenantId=nothing,
    )

    - type::String : The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported.
    - principalId::String : The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id header in the PUT request if the resource has a systemAssigned(implicit) identity
    - tenantId::String : The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id header in the PUT request if the resource has a systemAssigned(implicit) identity
"""
Base.@kwdef mutable struct EncryptionSetIdentity <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    principalId::Union{Nothing, String} = nothing
    tenantId::Union{Nothing, String} = nothing

    function EncryptionSetIdentity(type, principalId, tenantId, )
        OpenAPI.validate_property(EncryptionSetIdentity, Symbol("type"), type)
        OpenAPI.validate_property(EncryptionSetIdentity, Symbol("principalId"), principalId)
        OpenAPI.validate_property(EncryptionSetIdentity, Symbol("tenantId"), tenantId)
        return new(type, principalId, tenantId, )
    end
end # type EncryptionSetIdentity

const _property_types_EncryptionSetIdentity = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("principalId")=>"String", Symbol("tenantId")=>"String", )
OpenAPI.property_type(::Type{ EncryptionSetIdentity }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionSetIdentity[name]))}

function check_required(o::EncryptionSetIdentity)
    true
end

function OpenAPI.validate_property(::Type{ EncryptionSetIdentity }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "EncryptionSetIdentity", :enum, val, ["SystemAssigned"])
    end
end
