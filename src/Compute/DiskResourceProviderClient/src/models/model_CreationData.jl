# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreationData
Data used when creating a disk.

    CreationData(;
        createOption=nothing,
        storageAccountId=nothing,
        imageReference=nothing,
        galleryImageReference=nothing,
        sourceUri=nothing,
        sourceResourceId=nothing,
        sourceUniqueId=nothing,
        uploadSizeBytes=nothing,
    )

    - createOption::String : This enumerates the possible sources of a disk&#39;s creation.
    - storageAccountId::String : Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
    - imageReference::ImageDiskReference
    - galleryImageReference::ImageDiskReference
    - sourceUri::String : If createOption is Import, this is the URI of a blob to be imported into a managed disk.
    - sourceResourceId::String : If createOption is Copy, this is the ARM id of the source snapshot or disk.
    - sourceUniqueId::String : If this field is set, this is the unique id identifying the source of this resource.
    - uploadSizeBytes::Int64 : If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
"""
Base.@kwdef mutable struct CreationData <: OpenAPI.APIModel
    createOption::Union{Nothing, String} = nothing
    storageAccountId::Union{Nothing, String} = nothing
    imageReference = nothing # spec type: Union{ Nothing, ImageDiskReference }
    galleryImageReference = nothing # spec type: Union{ Nothing, ImageDiskReference }
    sourceUri::Union{Nothing, String} = nothing
    sourceResourceId::Union{Nothing, String} = nothing
    sourceUniqueId::Union{Nothing, String} = nothing
    uploadSizeBytes::Union{Nothing, Int64} = nothing

    function CreationData(createOption, storageAccountId, imageReference, galleryImageReference, sourceUri, sourceResourceId, sourceUniqueId, uploadSizeBytes, )
        OpenAPI.validate_property(CreationData, Symbol("createOption"), createOption)
        OpenAPI.validate_property(CreationData, Symbol("storageAccountId"), storageAccountId)
        OpenAPI.validate_property(CreationData, Symbol("imageReference"), imageReference)
        OpenAPI.validate_property(CreationData, Symbol("galleryImageReference"), galleryImageReference)
        OpenAPI.validate_property(CreationData, Symbol("sourceUri"), sourceUri)
        OpenAPI.validate_property(CreationData, Symbol("sourceResourceId"), sourceResourceId)
        OpenAPI.validate_property(CreationData, Symbol("sourceUniqueId"), sourceUniqueId)
        OpenAPI.validate_property(CreationData, Symbol("uploadSizeBytes"), uploadSizeBytes)
        return new(createOption, storageAccountId, imageReference, galleryImageReference, sourceUri, sourceResourceId, sourceUniqueId, uploadSizeBytes, )
    end
end # type CreationData

const _property_types_CreationData = Dict{Symbol,String}(Symbol("createOption")=>"String", Symbol("storageAccountId")=>"String", Symbol("imageReference")=>"ImageDiskReference", Symbol("galleryImageReference")=>"ImageDiskReference", Symbol("sourceUri")=>"String", Symbol("sourceResourceId")=>"String", Symbol("sourceUniqueId")=>"String", Symbol("uploadSizeBytes")=>"Int64", )
OpenAPI.property_type(::Type{ CreationData }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreationData[name]))}

function check_required(o::CreationData)
    o.createOption === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreationData }, name::Symbol, val)
    if name === Symbol("createOption")
        OpenAPI.validate_param(name, "CreationData", :enum, val, ["Empty", "Attach", "FromImage", "Import", "Copy", "Restore", "Upload"])
    end
    if name === Symbol("uploadSizeBytes")
        OpenAPI.validate_param(name, "CreationData", :format, val, "int64")
    end
end
