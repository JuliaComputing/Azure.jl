# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""EncryptionSettingsCollection
Encryption settings for disk or snapshot

    EncryptionSettingsCollection(;
        enabled=nothing,
        encryptionSettings=nothing,
        encryptionSettingsVersion=nothing,
    )

    - enabled::Bool : Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
    - encryptionSettings::Vector{EncryptionSettingsElement} : A collection of encryption settings, one for each disk volume.
    - encryptionSettingsVersion::String : Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. &#39;1.0&#39; corresponds to Azure Disk Encryption with AAD app.&#39;1.1&#39; corresponds to Azure Disk Encryption.
"""
Base.@kwdef mutable struct EncryptionSettingsCollection <: OpenAPI.APIModel
    enabled::Union{Nothing, Bool} = nothing
    encryptionSettings::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{EncryptionSettingsElement} }
    encryptionSettingsVersion::Union{Nothing, String} = nothing

    function EncryptionSettingsCollection(enabled, encryptionSettings, encryptionSettingsVersion, )
        o = new(enabled, encryptionSettings, encryptionSettingsVersion, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type EncryptionSettingsCollection

const _property_types_EncryptionSettingsCollection = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("encryptionSettings")=>"Vector{EncryptionSettingsElement}", Symbol("encryptionSettingsVersion")=>"String", )
OpenAPI.property_type(::Type{ EncryptionSettingsCollection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_EncryptionSettingsCollection[name]))}

function OpenAPI.check_required(o::EncryptionSettingsCollection)
    o.enabled === nothing && (return false)
    true
end

function OpenAPI.validate_properties(o::EncryptionSettingsCollection)
    OpenAPI.validate_property(EncryptionSettingsCollection, Symbol("enabled"), o.enabled)
    OpenAPI.validate_property(EncryptionSettingsCollection, Symbol("encryptionSettings"), o.encryptionSettings)
    OpenAPI.validate_property(EncryptionSettingsCollection, Symbol("encryptionSettingsVersion"), o.encryptionSettingsVersion)
end

function OpenAPI.validate_property(::Type{ EncryptionSettingsCollection }, name::Symbol, val)



end
