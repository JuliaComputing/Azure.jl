# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""SnapshotProperties
Snapshot resource properties.

    SnapshotProperties(;
        timeCreated=nothing,
        osType=nothing,
        hyperVGeneration=nothing,
        creationData=nothing,
        diskSizeGB=nothing,
        diskSizeBytes=nothing,
        uniqueId=nothing,
        encryptionSettingsCollection=nothing,
        provisioningState=nothing,
        incremental=nothing,
        encryption=nothing,
        networkAccessPolicy=nothing,
        diskAccessId=nothing,
    )

    - timeCreated::ZonedDateTime : The time when the snapshot was created.
    - osType::String : The Operating System type.
    - hyperVGeneration::String : The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
    - creationData::CreationData
    - diskSizeGB::Int64 : If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
    - diskSizeBytes::Int64 : The size of the disk in bytes. This field is read only.
    - uniqueId::String : Unique Guid identifying the resource.
    - encryptionSettingsCollection::EncryptionSettingsCollection
    - provisioningState::String : The disk provisioning state.
    - incremental::Bool : Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.
    - encryption::Encryption
    - networkAccessPolicy::NetworkAccessPolicy
    - diskAccessId::String : ARM id of the DiskAccess resource for using private endpoints on disks.
"""
Base.@kwdef mutable struct SnapshotProperties <: OpenAPI.APIModel
    timeCreated::Union{Nothing, ZonedDateTime} = nothing
    osType::Union{Nothing, String} = nothing
    hyperVGeneration::Union{Nothing, String} = nothing
    creationData = nothing # spec type: Union{ Nothing, CreationData }
    diskSizeGB::Union{Nothing, Int64} = nothing
    diskSizeBytes::Union{Nothing, Int64} = nothing
    uniqueId::Union{Nothing, String} = nothing
    encryptionSettingsCollection = nothing # spec type: Union{ Nothing, EncryptionSettingsCollection }
    provisioningState::Union{Nothing, String} = nothing
    incremental::Union{Nothing, Bool} = nothing
    encryption = nothing # spec type: Union{ Nothing, Encryption }
    networkAccessPolicy = nothing # spec type: Union{ Nothing, NetworkAccessPolicy }
    diskAccessId::Union{Nothing, String} = nothing

    function SnapshotProperties(timeCreated, osType, hyperVGeneration, creationData, diskSizeGB, diskSizeBytes, uniqueId, encryptionSettingsCollection, provisioningState, incremental, encryption, networkAccessPolicy, diskAccessId, )
        OpenAPI.validate_property(SnapshotProperties, Symbol("timeCreated"), timeCreated)
        OpenAPI.validate_property(SnapshotProperties, Symbol("osType"), osType)
        OpenAPI.validate_property(SnapshotProperties, Symbol("hyperVGeneration"), hyperVGeneration)
        OpenAPI.validate_property(SnapshotProperties, Symbol("creationData"), creationData)
        OpenAPI.validate_property(SnapshotProperties, Symbol("diskSizeGB"), diskSizeGB)
        OpenAPI.validate_property(SnapshotProperties, Symbol("diskSizeBytes"), diskSizeBytes)
        OpenAPI.validate_property(SnapshotProperties, Symbol("uniqueId"), uniqueId)
        OpenAPI.validate_property(SnapshotProperties, Symbol("encryptionSettingsCollection"), encryptionSettingsCollection)
        OpenAPI.validate_property(SnapshotProperties, Symbol("provisioningState"), provisioningState)
        OpenAPI.validate_property(SnapshotProperties, Symbol("incremental"), incremental)
        OpenAPI.validate_property(SnapshotProperties, Symbol("encryption"), encryption)
        OpenAPI.validate_property(SnapshotProperties, Symbol("networkAccessPolicy"), networkAccessPolicy)
        OpenAPI.validate_property(SnapshotProperties, Symbol("diskAccessId"), diskAccessId)
        return new(timeCreated, osType, hyperVGeneration, creationData, diskSizeGB, diskSizeBytes, uniqueId, encryptionSettingsCollection, provisioningState, incremental, encryption, networkAccessPolicy, diskAccessId, )
    end
end # type SnapshotProperties

const _property_types_SnapshotProperties = Dict{Symbol,String}(Symbol("timeCreated")=>"ZonedDateTime", Symbol("osType")=>"String", Symbol("hyperVGeneration")=>"String", Symbol("creationData")=>"CreationData", Symbol("diskSizeGB")=>"Int64", Symbol("diskSizeBytes")=>"Int64", Symbol("uniqueId")=>"String", Symbol("encryptionSettingsCollection")=>"EncryptionSettingsCollection", Symbol("provisioningState")=>"String", Symbol("incremental")=>"Bool", Symbol("encryption")=>"Encryption", Symbol("networkAccessPolicy")=>"NetworkAccessPolicy", Symbol("diskAccessId")=>"String", )
OpenAPI.property_type(::Type{ SnapshotProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SnapshotProperties[name]))}

function check_required(o::SnapshotProperties)
    o.creationData === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SnapshotProperties }, name::Symbol, val)
    if name === Symbol("timeCreated")
        OpenAPI.validate_param(name, "SnapshotProperties", :format, val, "date-time")
    end
    if name === Symbol("osType")
        OpenAPI.validate_param(name, "SnapshotProperties", :enum, val, ["Windows", "Linux"])
    end
    if name === Symbol("hyperVGeneration")
        OpenAPI.validate_param(name, "SnapshotProperties", :enum, val, ["V1", "V2"])
    end
    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "SnapshotProperties", :format, val, "int32")
    end
    if name === Symbol("diskSizeBytes")
        OpenAPI.validate_param(name, "SnapshotProperties", :format, val, "int64")
    end
end
