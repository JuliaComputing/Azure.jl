# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DiskUpdateProperties
Disk resource update properties.

    DiskUpdateProperties(;
        osType=nothing,
        diskSizeGB=nothing,
        encryptionSettingsCollection=nothing,
        diskIOPSReadWrite=nothing,
        diskMBpsReadWrite=nothing,
        diskIOPSReadOnly=nothing,
        diskMBpsReadOnly=nothing,
        maxShares=nothing,
        encryption=nothing,
        networkAccessPolicy=nothing,
        diskAccessId=nothing,
    )

    - osType::String : the Operating System type.
    - diskSizeGB::Int64 : If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
    - encryptionSettingsCollection::EncryptionSettingsCollection
    - diskIOPSReadWrite::Int64 : The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
    - diskMBpsReadWrite::Int64 : The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
    - diskIOPSReadOnly::Int64 : The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer between 4k and 256k bytes.
    - diskMBpsReadOnly::Int64 : The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
    - maxShares::Int64 : The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time.
    - encryption::Encryption
    - networkAccessPolicy::NetworkAccessPolicy
    - diskAccessId::String : ARM id of the DiskAccess resource for using private endpoints on disks.
"""
Base.@kwdef mutable struct DiskUpdateProperties <: OpenAPI.APIModel
    osType::Union{Nothing, String} = nothing
    diskSizeGB::Union{Nothing, Int64} = nothing
    encryptionSettingsCollection = nothing # spec type: Union{ Nothing, EncryptionSettingsCollection }
    diskIOPSReadWrite::Union{Nothing, Int64} = nothing
    diskMBpsReadWrite::Union{Nothing, Int64} = nothing
    diskIOPSReadOnly::Union{Nothing, Int64} = nothing
    diskMBpsReadOnly::Union{Nothing, Int64} = nothing
    maxShares::Union{Nothing, Int64} = nothing
    encryption = nothing # spec type: Union{ Nothing, Encryption }
    networkAccessPolicy = nothing # spec type: Union{ Nothing, NetworkAccessPolicy }
    diskAccessId::Union{Nothing, String} = nothing

    function DiskUpdateProperties(osType, diskSizeGB, encryptionSettingsCollection, diskIOPSReadWrite, diskMBpsReadWrite, diskIOPSReadOnly, diskMBpsReadOnly, maxShares, encryption, networkAccessPolicy, diskAccessId, )
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("osType"), osType)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskSizeGB"), diskSizeGB)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("encryptionSettingsCollection"), encryptionSettingsCollection)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskIOPSReadWrite"), diskIOPSReadWrite)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskMBpsReadWrite"), diskMBpsReadWrite)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskIOPSReadOnly"), diskIOPSReadOnly)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskMBpsReadOnly"), diskMBpsReadOnly)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("maxShares"), maxShares)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("encryption"), encryption)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("networkAccessPolicy"), networkAccessPolicy)
        OpenAPI.validate_property(DiskUpdateProperties, Symbol("diskAccessId"), diskAccessId)
        return new(osType, diskSizeGB, encryptionSettingsCollection, diskIOPSReadWrite, diskMBpsReadWrite, diskIOPSReadOnly, diskMBpsReadOnly, maxShares, encryption, networkAccessPolicy, diskAccessId, )
    end
end # type DiskUpdateProperties

const _property_types_DiskUpdateProperties = Dict{Symbol,String}(Symbol("osType")=>"String", Symbol("diskSizeGB")=>"Int64", Symbol("encryptionSettingsCollection")=>"EncryptionSettingsCollection", Symbol("diskIOPSReadWrite")=>"Int64", Symbol("diskMBpsReadWrite")=>"Int64", Symbol("diskIOPSReadOnly")=>"Int64", Symbol("diskMBpsReadOnly")=>"Int64", Symbol("maxShares")=>"Int64", Symbol("encryption")=>"Encryption", Symbol("networkAccessPolicy")=>"NetworkAccessPolicy", Symbol("diskAccessId")=>"String", )
OpenAPI.property_type(::Type{ DiskUpdateProperties }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DiskUpdateProperties[name]))}

function check_required(o::DiskUpdateProperties)
    true
end

function OpenAPI.validate_property(::Type{ DiskUpdateProperties }, name::Symbol, val)
    if name === Symbol("osType")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :enum, val, ["Windows", "Linux"])
    end
    if name === Symbol("diskSizeGB")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int32")
    end
    if name === Symbol("diskIOPSReadWrite")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int64")
    end
    if name === Symbol("diskMBpsReadWrite")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int64")
    end
    if name === Symbol("diskIOPSReadOnly")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int64")
    end
    if name === Symbol("diskMBpsReadOnly")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int64")
    end
    if name === Symbol("maxShares")
        OpenAPI.validate_param(name, "DiskUpdateProperties", :format, val, "int32")
    end
end
